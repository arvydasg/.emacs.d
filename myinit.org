* Interface tweaks
#+BEGIN_SRC emacs-lisp
;; Who I am

;; be able to create directories in neotree
(global-set-key (kbd "C-c d") 'make-directory)

(setq user-full-name "Arvydas Gasparaviciusn")
(setq user-mail-address "arvydas.gaspa@gmail.com")
;; the blinking cursor is nothing, but an annoyance
(blink-cursor-mode 0)

;; highlight the current line
(global-hl-line-mode 1)

;; writes parens automatically for you
(electric-pair-mode +1)  

(menu-bar-mode -1)            ; Disable the menu bar
(tool-bar-mode -1)          ; Disable the toolbar
(toggle-scroll-bar -1) ; turn off scrollbar
(show-paren-mode 1) ; highlight parenthesis

;; Show matching parens
(setq show-paren-delay 0)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Set up the visible bell
(setq visible-bell t)

;; nice scrolling
(setq scroll-margin 0
scroll-conservatively 100000
scroll-preserve-screen-position 1)

;; never lose the layout c-c left/right
(winner-mode 1)

;; ; display line numbers - finally...
;; (global-display-line-numbers-mode 1) 

;; (load-theme 'zenburn t)
;; (load-theme 'wombat t)
(load-theme 'ample t)
;; (load-theme 'waher t)
;; (load-theme 'spacegray t)
;; (load-theme 'ample t)

;; startup & default view
;; copied from old config, dont remember what any of it does below
(custom-set-variables
'(org-hide-leading-stars t)
'(org-startup-folded (quote t))	;PAGALIAU!!!
'(org-startup-indented t)
'(org-startup-indented t)	        ;this is amazing, no need to care about pressing TAB (when diary f.x.) "Org Indent Mode"
'(org-startup-with-inline-images t)
'(org-startup-with-latex-preview t)
'(org-confirm-babel-evaluate nil)
'(org-src-fontify-natively t)
'(org-export-with-toc nil)
)
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  ;; Easily jump to my main org file
  (defun aga-find-current nil
    "Find the myinit.org file."
    (interactive)
    (find-file "~/Dropbox/src/emacs/myinit.org") ;; Ubuntu
    ;; (find-file "C:\\Users\\Arvydas\\Dropbox\\7.dotfiles\\usable_emacs\\myinit.org") ;; windows
    (delete-other-windows))
  ;; Find my NEW init file
  (global-set-key (kbd "C-x <C-backspace>") 'aga-find-current)


  ;; Easily jump to my main org file
  (defun aga-find-old nil
    "Find the myinit.org file."
    (interactive)
    (find-file "~/Dropbox/src/random_dotfiles/emacs + org (summer)/myinit.org") ;; ubuntu
    ;; (find-file "C:\\Users\\Arvydas\\Dropbox\\7.dotfiles\\emacs + org (summer)\\myinit.org") ;; windows
    (delete-other-windows))
    ;; Find OLD init file
    (global-set-key (kbd "C-x <C-home>") 'aga-find-old)

  ;; open my django docs
  (defun django-docs nil
    "Find the myinit.org file."
    (interactive)
    (find-file "~/Dropbox/org/django.org")) ;; ubuntu
    (global-set-key [f5] 'django-docs)
#+END_SRC
* Ace windows
"Ace windows" helps me to switch windows easily. Main keybind - C-x o and then the commands that follow below.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init (setq aw-keys '(?q ?w ?e ?r ?y ?h ?j ?k ?l)
;		aw-ignore-current t ; not good to turn off since I wont be able to do c-o o <current>
		aw-dispatch-always t)
    :bind (("C-x o" . ace-window)
	   ("M-O" . ace-swap-window)
	   ("C-x v" . aw-split-window-horz)))
  (defvar aw-dispatch-alist
  '((?x aw-delete-window " Ace - Delete Window")
      (?m aw-swap-window " Ace - Swap Window")
      (?n aw-flip-window)
      (?h aw-split-window-vert " Ace - Split Vert Window")
      (?v aw-split-window-horz " Ace - Split Horz Window")
      (?i delete-other-windows " Ace - Maximize Window")
      (?o delete-other-windows))
  "List of actions for `aw-dispatch-default'.")
#+END_SRC
* Keybind discovery
"Which-key" states which possible key commbinations can be used after any button is pressed.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  (setq which-key-idle-delay 0.2)
  :config
  (which-key-mode 1))
#+END_SRC
* Saveplace
"Saveplace" remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure t
  :config
  ;; activate it for all buffers
  (setq-default save-place t)
  (save-place-mode 1)
)
#+END_SRC
* Expand region
"Expand region" allows me to select everything in between any kind of brackets by pressing C-=. The more I press it, the more it selects.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
* Undo-tree
"Undo tree" lets me to return to the file stage before any modifications were made. Keybind - C-x u.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Council/Ivy/Swiper
"Swiper" gives us a really efficient incremental search with regular expressions
"Ivy / Counsel" replace a lot of ido or helms completion functionality 
Best explanation is here - https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
#+begin_src emacs-lisp
     (use-package counsel
     :ensure t
     :after ivy
     :config (counsel-mode))
   #+end_src
* Company
"Company" provides autosuggestion/completion in buffers (writing code, pathing to files, etc).
press <f1> to display the documentation for the selected candidate or C-w to see its source
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0) ; lb svarbu, instant suggestion
      ;; (setq company-show-numbers t)  
      (setq company-tooltip-limit 10)
      ;; (setq company-minimum-prefix-length 2)
      (setq company-tooltip-align-annotations t)
      ;; invert the navigation direction if the the completion popup-isearch-match
      ;; is displayed on top (happens near the bottom of windows)
      (setq company-tooltip-flip-when-above t)
      (global-company-mode))
#+END_SRC
* Directories
#+BEGIN_SRC emacs-lisp
  ;; Automatically generated backups
  (setq backup-directory-alist '(("." . "~/Dropbox/documents/org/emacs_backups/emacs_backups/")))
#+END_SRC
* Projectile
"Projectile" allows me to have a list of my projects under one keybind - C-c p p. I can then open a project and my working directory will remain to that project that I opened. With a shortcut C-c p f I can look thrugh ALL the files of that particular project directory. Super useful, makes the buffers way tidier.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* Magit
"Magit" - can not imagine working with git without it. Instead of writing full commands like: "git add ." and then "git commit -m 'bla blaa'" then "git push"... I can simply `C-x g` for a git status. Then `s` to do git add. And finally `C-c C-c` to invoke git commit and simply write a message. Then press `p` and I just pushed the changes. Way quickier than the termina, believe me. 

Some notes:
- install git first on emacs - https://www.youtube.com/watch?v=ZMgLZUYd8Cw
- use personal access token
- add this to terminal to save the token for furher use
- git config --global credential.helper store
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))
#+END_SRC
* Supersave
"Supersave" autosaves buffers for me. I am kind of used to clicking C-x C-s all the time, but "Supersave" just makes sure that it saves all the buffers when I switch windows and so on. So if I ever want to close my emacs - I can be sure that all the buffers are saved.
#+BEGIN_SRC emacs-lisp
;; ace window integration - BUTINA
(use-package super-save
  :ensure t
  :config
  (setq super-save-auto-save-when-idle t)
  (setq super-save-idle-duration 5) ;; after 5 seconds of not typing autosave
  ;; add integration with ace-window
  (add-to-list 'super-save-triggers 'ace-window)
  (super-save-mode +1))
#+END_SRC
* Avy
"Avy" lets me jump to to a specific letter or a word quickly. M-s and I can type a word, it will immeaditely jump to it on any opened and visible buffer.
See https://github.com/abo-abo/avy for more info.
  #+begin_src emacs-lisp
	(use-package avy
	  :ensure t
	  :bind 
	  (("M-s" . avy-goto-char-timer)
    ;;	     ("M-g f" . avy-goto-line)
		 ("M-p" . avy-goto-word-1)))
;;  You can check the avy home page for their recommended configuration which you get by configuring this way instead:
    ;; (use-package avy
    ;; :ensure t
    ;; :config
    ;; (avy-setup-default))
    (setq avy-background t) ; cool, makes the background darker
  #+end_src
* Move text
"Move text" allows me to click M-up/down arrow key and move the text line by line up and down.
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t)
(move-text-default-bindings)
#+END_SRC
* Impatient mode
"Impatient mode" lets you to have a browser window with LIVE HTML preview. Add files by 'M-x httpd-start'. Then do `M-x impatient-mode` - on EACH and EVERY file (css, js and hmtl).
Otherwise, read simple explanation here - https://github.com/skeeto/impatient-mode.
#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    :ensure t
    :commands impatient-mode)
#+END_SRC
* Navigation
** Ivy
"Ivy" is a generic completion mechanism for Emacs.
#+BEGIN_SRC emacs-lisp
     (use-package ivy
     :defer 0.1
     :diminish
     :bind (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
     :custom

     (ivy-count-format "(%d/%d) ")
     ;; nice if you want before opened buffers to appear after a close
     (ivy-use-virtual-buffers t)
     :config (ivy-mode))

     (use-package ivy-rich
     :ensure t
     :init (ivy-rich-mode 1))
#+END_SRC
** Swiper
"Swiper" - an Ivy-enhanced alternative to Isearch.
#+BEGIN_SRC emacs-lisp
     (use-package swiper
     :after ivy
     :bind (("C-s" . swiper)
	    ("C-r" . swiper)))
#+END_SRC
** Neotree
"Neotree" - A Emacs tree plugin like NerdTree for Vim. Basically a sidebar filetree. Toggle on/off with F8.
#+BEGIN_SRC emacs-lisp
     (use-package neotree
     :ensure t
     :init
     (setq neo-smart-open t
     neo-autorefresh t
     neo-force-change-root t)
     (setq neo-theme (if (display-graphic-p) 'icons global))
     (setq neo-window-width 35)
     (global-set-key [f8] 'neotree-toggle))
#+END_SRC
* All the icons
"All the icons" - icons visible on buffer window as well as sidebar filetree.
neveikia icons - prasau, paaiskinimas - https://github.com/seagle0128/all-the-icons-ivy-rich
#+BEGIN_SRC emacs-lisp
     (use-package all-the-icons-ivy-rich
     :ensure t
     :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC
* Hungry delete
"Hungry delete" - deletes all the whitespace when you hit backspace or delete.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))
#+END_SRC
* Emmet mode
"Emmet mode" - HTML completion. Click c-j to autocomplete a tag.
Cheat sheet - https://docs.emmet.io/cheat-sheet/
note:
SU WEB MODE KRC PRADEDA flycheck nebeveikti ir emmet durniuoja
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+END_SRC
* Emojify
"Emojify" allows to preview emojis in emacs buffers. Needed for facebook auto posting
#+BEGIN_SRC emacs-lisp
  (use-package emojify
  :ensure t 
  :hook (after-init . global-emojify-mode))
#+END_SRC
* Rg
"Rg" - rip grep. Helps to search for a term through many files. Super useful when need to change something on many files. 
Installation: Sudo apt install ripgrep M-x rg and search away 
Tut: nice video https://www.youtube.com/watch?v=4qLD4oHOrlc&ab_channel=ProtesilaosStavrou
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :config)
#+END_SRC
* Beacon
"Beacon" - never lose your cursor again. Flashes the cursor location when switching buffers.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
  :ensure t
  :config
    (progn
      (setq beacon-blink-when-point-moves-vertically nil) ; default nil
      (setq beacon-blink-when-point-moves-horizontally nil) ; default nil
      (setq beacon-blink-when-buffer-changes t) ; default t
      (setq beacon-blink-when-window-scrolls t) ; default t
      (setq beacon-blink-when-window-changes t) ; default t
      (setq beacon-blink-when-focused nil) ; default nil

      (setq beacon-blink-duration 0.3) ; default 0.3
      (setq beacon-blink-delay 0.3) ; default 0.3
      (setq beacon-size 20) ; default 40
      ;; (setq beacon-color "yellow") ; default 0.5
      (setq beacon-color 0.5) ; default 0.5

      (add-to-list 'beacon-dont-blink-major-modes 'term-mode)

      (beacon-mode 1)))
#+END_SRC
* Dumb jump
"Dumb jump" - jump to definition.
Tut: ok, so, wow. Let's say I have a views.py in django and I "def veganai(request):" and then the function below it.
I later use that function in another file, let's say urls.py. I can then go to urls.py, stand on that function and
then go M-g j or o to jump to that definition (in views.py)
this is amazing and life saving. I should not forget that this option exists.
video of how to use it - https://www.youtube.com/watch?v=wBfZzaff77g
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
  (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
:init
(dumb-jump-mode)
  :ensure
)
#+END_SRC
* Org agenda
Best org mode tutorial playlist:https://www.youtube.com/watch?v=sQS06Qjnkcc&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&index=1
** Org agenda files and other small configurations
#+BEGIN_SRC emacs-lisp
  ;; M-x org-agenda-file-list. Go there and click "save the changes" MANUALLY to save to init.el. Otherwise, emacs wont read it on every boot.
  ;; Write all org-agenda-files ONCE, do the procedure described in the line above and forget about it. Refiling will work, agenda will work.
  ;; if your org agenda files are not there, do C-c C-e on the parentheses below. Evaluate them.

  (setq org-agenda-files '("~/Dropbox/documents/org/seima.org"
  "~/Dropbox/documents/org/inbox.org"
  "~/Dropbox/documents/org/smutifruti.org"
  "~/Dropbox/documents/org/dpd.org"
  "~/Dropbox/documents/org/facebook_django.org"
  "~/Dropbox/documents/org/personal.org"
  "~/Dropbox/documents/org/arvydasdev.org"
  "~/Dropbox/documents/org/diary.org"))

  ;; Stop preparing agenda buffers on startup
  (setq org-agenda-inhibit-startup t)

  ;; when you press C-c C-z on a headline, it makes a note. Specifying the name of that drawyer.
  (setq org-log-into-drawer "QUICK_NOTES")

  ;; shortcut for opening agenda view
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-agenda-restore-windows-after-quit t)
  ;; (setq org-hide-emphasis-markers t) ; Hide * and / in org tex.

  ;; https://github.com/jezcope/dotfiles/blob/master/emacs.d/init-org.org - solved my refile problem
  ;; sitas geriausias ir paprasciausias krc. veikia puikiai su ivy.
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))

  (setq org-log-note-clock-out t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Do not prompt to resume an active clock, just resume it
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-into-drawer "CLOCK")
  ;; quite nice, tells you when the task has been finished when you say DONE on it
  (setq org-log-done t)

  ;; C-c C-z - tiesiog make note under a heading
  ;; to log into drawer with c-c c-z, reikia:
  ;; m-x customise-variable RET org-log-into-drawer - select LOGBOOK save and apply.

#+END_SRC
** Templates c-c c
#+BEGIN_SRC emacs-lisp
;; setting up the templates for c-c c
(define-key global-map "\C-cc" 'org-capture)
(setq org-capture-templates '(
("i" "Inbox" entry (file+headline "~/Dropbox/documents/org/inbox.org" "Inbox")"* %i%?")
("s" "Seima" entry (file+headline "~/Dropbox/documents/org/seima.org" "Seima to-do")"* %i%?")
("d" "Diary" entry (file+datetree "~/Dropbox/documents/org/diary.org" "Diary") "* %U %^{Title} %?")))
;; ("p" "Planned" entry (file+headline "~/Dropbox/1.planai/tickler.org" "Planned") "* %i%? %^{SCHEDULED}p" :prepend t)
;; ("r" "Repeating" entry (file+headline "~/Dropbox/1.planai/tickler.org" "Repeating") "* %i%? %^{SCHEDULED}p")))
#+END_SRC
** Sasha agenda (shows daily stuff divided)
 ;#+BEGIN_SRC emacs-lisp
         ;; https://sachachua.com/blog/2007/12/a-day-in-a-life-with-org/
         (setq org-agenda-custom-commands
               '(("a" "My custom agenda"
                  ((org-agenda-list nil nil 2 nil)
                   (todo "WAITING")
                   (todo "NEXT")
                   (todo "TODO")))))
   ;; https://newbedev.com/how-to-view-the-next-days-in-org-mode-s-agenda
   ;; these apply to everything in a agenda!!!!
   ;; (setq org-agenda-span 7
   ;;       org-agenda-start-on-weekday nil	;angeda starts from today not from Monday
   ;;       org-agenda-start-day "-2d")	;two days back from today

   (setq org-agenda-start-on-weekday nil)	;nice, finally agenda starts from today
   (setq org-agenda-span 'day)		;iz pz only show today in agenda

      ;; agenda-day-estimated time
      (defun my-day-page ()
         (interactive)
         (org-agenda-list nil nil 1)
         (org-agenda-columns))

      (define-key global-map [f10] 'my-day-page)

 #+END_SRC
