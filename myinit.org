#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+END_SRC
#+STARTUP: fold

# Emacs outshines all other editing software in approximately the same
# way that the noonday sun does the stars. It is not just bigger and
# brighter; it simply makes everything else vanish. – Neal Stephenson,
# In the Beginning was the Command Line (1998)

* General
** Interface tweaks
Build interface to look how I want it to look
#+BEGIN_SRC emacs-lisp
  ;; Increase the garbage collection threshold to 100MB to reduced startup time.
  ;; See https://www.reddit.com/r/emacs/comments/3kqt6e
  (setq gc-cons-threshold 80000000)
  (setq gc-cons-threshold (* 1024 1024 100))
  ;; Turn off mouse interface early in startup to avoid momentary display
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq visible-bell t)
  (blink-cursor-mode -1)
  (set-cursor-color "IndianRed")
  (global-hl-line-mode 1)
  (add-to-list 'custom-theme-load-path "/home/arvydas/Dropbox/src/emacs/misc/")
  ;; (load-theme 'default-black t)
  ;; (load-theme 'zenburn t)
  ;; show where buffers end.
  (setq-default indicate-empty-lines t)
  ;; Delete marked region when typing over it. Woooow.
  (delete-selection-mode t)
#+END_SRC
Startup. Disable splash screen and startup message.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  ;; turn off the error message at emacs launch
  (setq ad-redefinition-action 'accept)
  ;; no more annoying buffer list combinatios
  (global-set-key (kbd "C-x C-b") 'switch-to-buffer)

  ;; simply opening files below
  ;; Use a persistent "inbox.org" as the initial buffer. Startup.
  ;; (setq initial-buffer-choice "~/Dropbox/documents/org/roam/Inbox.org")
  ;; (setq initial-buffer-choice (lambda () (org-roam-dailies-goto-today "d") (current-buffer)))
  (setq initial-buffer-choice (lambda () (org-agenda nil "a") (current-buffer)))

  ;; ;; [2022-04-15 Fri] opening a file AND agenda on the right side
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; (setq initial-buffer-choice "~/Dropbox/documents/org/roam/20220323162258-girls.org")

  ;; (defun my-init-hook ()
  ;;   (split-window-right)
  ;;   (let ((org-agenda-window-setup 'other-window))
  ;;     (org-agenda nil "a")))

  ;; (add-hook 'window-setup-hook #'my-init-hook)
  ;; ;; hide mouse cursor while typing
  ;; (setq make-pointer-invisible t)
#+END_SRC
[2022-03-17 Kt] Disabled it, because now I have 'dashboard'. Does the
same thing and more.

Show startup time on emacs-load
#+BEGIN_SRC emacs-lisp
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC
[2022-03-14 Pr] Transparency
#+BEGIN_SRC emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  ;; (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+END_SRC
[2022-03-17 Kt] [[elisp - Emacs truncate lines in all buffers - Stack Overflow][ elisp - Emacs truncate lines in all buffers - Stack Overflow]]
#+BEGIN_SRC emacs-lisp
(setq-default global-visual-line-mode t)
#+END_SRC
[2022-03-17 Kt] Do not add double space after periods
#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC
[2022-03-17 Kt] set warning of opening large files to 100MB
#+BEGIN_SRC emacs-lisp
(setq-default large-file-warning-threshold 100000000)
#+END_SRC
Parentheses
#+BEGIN_SRC emacs-lisp
;; writes parens automatically for you
(electric-pair-mode +1)
;; highlight parenthesis
(show-paren-mode 1)
;; Show matching parens
(setq show-paren-delay 0)
#+END_SRC
Show me my config's and documentation
#+BEGIN_SRC emacs-lisp
  ;; Easily jump to my main org file
  (defun aga-find-current nil
    "Find the myinit.org file."
    (interactive)
    (find-file "~/Dropbox/src/emacs/myinit.org") ;; Ubuntu
    ;; (find-file "C:\\Users\\Arvydas\\Dropbox\\7.dotfiles\\usable_emacs\\myinit.org") ;; windows
    (delete-other-windows))
  ;; Find myinit.org  file
  (global-set-key (kbd "C-x <C-backspace>") 'aga-find-current)

  (defun aga-find-init.el nil
    "Find the init.el file."
    (interactive)
    (find-file "~/.emacs.d/init.el") ;; Ubuntu
    (delete-other-windows))
  ;; Find init.el file
  (global-set-key (kbd "C-x <C-home>") 'aga-find-init.el)

  ;; ;; open my django docs
  ;; (defun django-docs nil
  ;; "Find the myinit.org file."
  ;; (interactive)
  ;; (find-file "~/Dropbox/documents/org/notes/django_notes.org")) ;; ubuntu
  ;; (global-set-key [f5] 'django-docs)
#+END_SRC
Modeline. file size indication in mode-line. column-number in mode-line.
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(size-indication-mode 1)
#+END_SRC
Line numbers
#+BEGIN_SRC emacs-lisp
  ;; (global-display-line-numbers-mode 1)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC
Character wrap
#+BEGIN_SRC emacs-lisp
;; start wrapping at 80 characterers
(setq fill-column 80)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
[2022-04-05 Tue] Un-fill region. Needed for when wanting to put text
content to a website.
#+begin_src emacs-lisp
  (defun unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  ;; Handy key definition
  (define-key global-map "\C-\M-Q" 'unfill-region)
#+end_src
White-space
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing tabs tab-mark))
(global-whitespace-mode)
#+END_SRC
# Backups are more trouble than they are worth.
#+BEGIN_SRC emacs-lisp
  ;; (setq make-backup-files nil)
  ;; (setq auto-save-list-file-name  nil)
  ;; (setq auto-save-default nil)
#+END_SRC
Ask before closing Emacs
#+BEGIN_SRC emacs-lisp
  (defun ask-before-closing ()
    "Ask whether or not to close, and then close if y was pressed"
    (interactive)
    (if (y-or-n-p (format "Exit Emacs? "))
	(if (< emacs-major-version 22)
	    (save-buffers-kill-terminal)
	  (save-buffers-kill-emacs))
      (message "Canceled exit")))

  (when window-system
    (global-set-key (kbd "C-x C-c") 'ask-before-closing))

  ;; test
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Package management
Inside of my .emacs.d -> init.el file I put this code below. It then
loads "myinit.org" file from dropbox with all the configurations.
#+BEGIN_SRC emacs-lisp
  ;; ;; Initialize package sources
  ;; (require 'package)

  ;; (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ;;                          ("org" . "https://orgmode.org/elpa/")
  ;;                          ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; (package-initialize)
  ;; (unless package-archive-contents
  ;;  (package-refresh-contents))


  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))

  ;; (org-babel-load-file (expand-file-name "~/Dropbox/src/emacs/myinit.org"))

  ;; [2022-04-10 Sun] allows to invoke and use use-package-report
  (setq use-package-compute-statistics t)
#+END_SRC
** Backups
I don’t use backup files often as I use git to manage most of my org
files. However, I still feel safer when having a backup. I follow the
backup configuration from Sacha Chua to enable Emacs’s backups
aggressively.
#+BEGIN_SRC emacs-lisp
;; Save backup files to a dedicated directory.
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)

;; Make numeric backup versions unconditionally.
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
** Which-key
[2021-07-01] A package that displays the available keybindings in a popup. The
package is pretty useful, as Emacs seems to have more keybindings than
I can remember at any given point.

References:

[[https://github.com/justbur/emacs-which-key][which-key repo]]
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  (setq which-key-idle-delay 0.2)
  :config
  (which-key-mode 1))
#+END_SRC

** Try
[2022-03-01 An] Try is a package that allows you to try out Emacs packages without
installing them. If you pass a URL to a plain text .el-file it
evaluates the content, without storing the file.
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** helpful
[2022-03-15 An] Improves *help* buffer. Way more info than with regular help.
INSTALLS: elisp-refs, helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    (("C-h f" . helpful-callable)
     ("C-h v" . helpful-variable)
     ("C-h k" . helpful-key)
     ("C-c C-d" . helpful-at-point)
     ("C-h F" . helpful-function)
     ("C-h C" . helpful-command)))

  ;; ;; Note that the built-in `describe-function' includes both functions
  ;; ;; and macros. `helpful-function' is functions only, so we provide
  ;; ;; `helpful-callable' as a drop-in replacement.
  ;; (global-set-key (kbd "C-h f") #'helpful-callable)

  ;; (global-set-key (kbd "C-h v") #'helpful-variable)
  ;; (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC
** keyfreq
[2022-03-18 Pn] It logs the used commands and their keyboard shortcuts and gives you
an overview. Most frequently used commands should be mapped to easy to
type shortcuts.

You can see the current result by calling keyfreq-show.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
  :ensure t
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  )
#+END_SRC
 * Appearance
** Dashboard
[2022-03-17 Kt] Following [[https://www.youtube.com/watch?v=SfyJtenKd2A&t=505s][this]] video.
[2022-03-22 An] Disabled - haven't used it once.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :disabled t
    :diminish dashboard-mode
    :init
    (progn
      (setq dashboard-items '((recents  . 10)
                              (projects . 5)
                              (bookmarks . 10)))
      (setq dashboard-center-content nil)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-startup-banner "/home/arvydas/Dropbox/src/portfolio/p_porfolio/static/images/arvydas500.png")
      (dashboard-setup-startup-hook)))

  ;; setup that always work - a place to fall back to

  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :diminish dashboard-mode
  ;;   :config
  ;;   (setq dashboard-banner-logo-title "your custom text")
  ;;   (setq dashboard-startup-banner "/path/to/image")
  ;;   (setq dashboard-items '((recents  . 10)
  ;;                           (bookmarks . 10)))
  ;;   (dashboard-setup-startup-hook))
#+END_SRC
** Page-break-lines
[2022-03-17 Kt] Needed for Dashboard?
[2022-04-07 Thu] wtf is this, don't need, disabling
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :disabled t
    :config
    (global-page-break-lines-mode t))
#+END_SRC
** Fill-column-indicator
INSTALLS : fill-column-indicator
m-x fci-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package fill-column-indicator
  ;;   :ensure t
  ;;   :disabled t
  ;;   )

  ;; (setq fci-rule-width 1)
  ;; (setq fci-rule-column 80)

  ;; (add-hook 'text-mode-hook #'fci-mode)
  ;; (add-hook 'prog-mode-hook #'fci-mode)
#+END_SRC
** Neotree
[2021-07-01] "Neotree" - A Emacs tree plugin like NerdTree for Vim. Basically a
sidebar filetree. Toggle on/off with F8.
#+BEGIN_SRC emacs-lisp
  ;; (use-package neotree
  ;;   :ensure t
  ;;   :disabled t
  ;;   :init
  ;;   (setq neo-smart-open t
  ;;         neo-autorefresh t
  ;;         neo-force-change-root t)
  ;;   (setq neo-theme (if (display-graphic-p) 'icons global))
  ;;   (setq neo-window-width 35)
  ;;   (global-set-key [f8] 'neotree-toggle))

  ;; ;; Launch neotree when opening emacs. First launch, then switch to another window.
  ;; (defun neotree-startup ()
  ;;   (interactive)
  ;;   (neotree-show)
  ;;   (call-interactively 'other-window))

  ;; (if (daemonp)
  ;;     (add-hook 'server-switch-hook #'neotree-startup)
  ;;   (add-hook 'after-init-hook #'neotree-startup))
#+END_SRC

** Doom themes
[2022-03-17 Kt] Disabled it. Less bloat, keep it simple with Zenburn
theme.

More about doom themes [[https://github.com/doomemacs/themes][here]].
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    ;; :disabled t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t))
#+END_SRC
** All the icons
[2022-03-17 Kt] "All the icons" - icons visible on buffer window as well as sidebar
filetree.  neveikia icons on fresh Linux os install? Prasau -
[[https://github.com/seagle0128/all-the-icons-ivy-rich][paaiskinimas]].  Do M-x all-the-icons-install-fonts to install the
necessary fonts.  Then check your ~/.local/share/fonts/ if the icons
appeared there or not.
#+BEGIN_SRC emacs-lisp
     (use-package all-the-icons-ivy-rich
     :ensure t
     :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC

** Rainbow-delimiters
[2022-03-01 An] Rainbow-delimiters is useful in programming modes because it colorizes
nested parentheses and brackets according to their nesting depth. This
makes it a lot easier to visually match parentheses in Emacs Lisp code
without having to count them yourself.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Volatile Highlights
[2022-03-01 An] "Volatile highlights" - temporarily highlight changes from pasting
etc.
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :ensure t
  :config
  (volatile-highlights-mode t))
#+END_SRC

** Beacon
[2021-07-01] "Beacon" - never lose your cursor again. Flashes the cursor location when switching buffers.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
  :ensure t
  :config
    (progn
      (setq beacon-blink-when-point-moves-vertically nil) ; default nil
      (setq beacon-blink-when-point-moves-horizontally nil) ; default nil
      (setq beacon-blink-when-buffer-changes t) ; default t
      (setq beacon-blink-when-window-scrolls t) ; default t
      (setq beacon-blink-when-window-changes t) ; default t
      (setq beacon-blink-when-focused nil) ; default nil

      (setq beacon-blink-duration 0.3) ; default 0.3
      (setq beacon-blink-delay 0.3) ; default 0.3
      (setq beacon-size 20) ; default 40
      ;; (setq beacon-color "yellow") ; default 0.5
      (setq beacon-color 0.5) ; default 0.5

      (add-to-list 'beacon-dont-blink-major-modes 'term-mode)

      (beacon-mode 1)))
#+END_SRC

** Auto-dim-other-buffers
Its just too strange, turning off.
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-dim-other-buffers
  ;;   :ensure t
  ;;   :if (display-graphic-p)
  ;;   :config
  ;;   (auto-dim-other-buffers-mode t)
  ;;   (my/use-doom-colors
  ;;    (auto-dim-other-buffers-face
  ;;     :background (color-darken-name (doom-color 'bg) 3))))
#+END_SRC
** Modelines
*** Nyan-mode
Disabled [2022-03-21 Pr] - no need, just clutters the modeline.
[2022-03-18 Pn] [[https://github.com/TeMPOraL/nyan-mode/][Nyan Mode]] is an analog indicator of your position in the buffer. The
Cat should go from left to right in your mode-line, as you move your
point from 0% to 100%.

If you do find Nyan too childish, [[https://github.com/jdtsmith/mlscroll][mlscroll]] is an interactive neutral
alternative.
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t
    :disabled t
    :config
    (setq nyan-bar-length 15)
    (nyan-mode t)
    )
#+END_SRC

*** Doom-modeline
[2022-03-18 Pn] so far There is nothing better and cleaner than -
"Doom-modeline". It converts a basic looking, all cramped modeline into a
nice and clean one with only the necessary info and icons displayed.
So far so good, liking it.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    ;; :disabled t
    :init
    (setq doom-modeline-env-enable-python t)
    (setq doom-modeline-env-enable-go nil)
    (setq doom-modeline-buffer-encoding 'nondefault)
    (setq doom-modeline-hud t)
    (setq doom-modeline-persp-icon nil)
    (setq doom-modeline-persp-name nil)
    :config
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-buffer-state-icon nil)
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-irc t))

  ;; active/inactive modeline colors? in other themes than doom I guess.

  ;; (set-face-attribute 'mode-line nil
  ;;                     :background "#353644"
  ;;                     :foreground "white"
  ;;                     :box '(:line-width 2 :color "#353644")
  ;;                     :noverline nil
  ;;                     :underline nil)

  ;; (set-face-attribute 'mode-line-inactive nil
  ;;                     :background "#565063"
  ;;                     :foreground "white"
  ;;                     :box '(:line-width 2 :color "#565063")
  ;;                     :overline nil
  ;;                     :underline nil)
#+END_SRC
*** Telephone-line
[2022-03-18 Pn] Tried this package because nyan cat thingy didn't fit
in doom-modeline. Will try to keep it for now.
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :disabled t
    :config
    (telephone-line-mode 1))
#+END_SRC

*** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :disabled t)
#+END_SRC
*** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline-all-the-icons
    :ensure t
    :disabled t
    :after spaceline
    :config (spaceline-all-the-icons-theme))
#+END_SRC
* Window management
** Saveplace
[2021-07-01] "Saveplace" remembers your location in a file when saving files
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure t
  :config
  ;; activate it for all buffers
  (setq-default save-place t)
  (save-place-mode 1))
#+END_SRC

** Winner mode
[2021-07-01] Winner Mode is a global minor mode. When activated, it allows you to
“undo” (and “redo”) changes in the window configuration with the key
commands C-c left and C-c right.
#+BEGIN_SRC emacs-lisp
 (winner-mode +1)
#+END_SRC
** Ace windows
[2021-07-01] "Ace windows" helps me to switch windows easily. Main keybind - C-x o
and then the commands that follow below.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init (setq aw-keys '(?q ?w ?e ?r ?y ?h ?j ?k ?l)
                                          ;aw-ignore-current t ; not good to turn off since I wont be able to do c-o o <current>
                aw-dispatch-always t)
    :bind (("C-x o" . ace-window)
           ("M-O" . ace-swap-window)
           ("C-x v" . aw-split-window-horz)))
  (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
      (?m aw-swap-window "Swap Windows")
      (?M aw-move-window "Move Window")
      (?c aw-copy-window "Copy Window")
      (?f aw-switch-buffer-in-window "Select Buffer")
      (?n aw-flip-window)
      (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
      (?c aw-split-window-fair "Split Fair Window")
      (?h aw-split-window-vert "Split Vert Window")
      (?v aw-split-window-horz "Split Horz Window")
      (?o delete-other-windows)
      ;; (?o delete-other-windows "Delete Other Windows")
      ;; (?o delete-other-windows " Ace - Maximize Window")
      (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
#+END_SRC
* Writing
** Flycheck
[2021-07-01] "Flycheck" uses various syntax checking and linting tools to
automatically check the contents of buffers while you type, and
reports warnings and errors directly in the buffer. Or in the right
corner if you use "Doom-modeline". Can click on the icon - shows all
the errors. Great!  https://www.flycheck.org/en/latest/# Not to
confuse with flyspell - checks grammar.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

Spell checking
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  ;; (global-set-key (kbd "C-1") 'flyspell-auto-correct-previous-word)
  ;; (global-set-key (kbd "C-2") 'flyspell-auto-correct-word)
  ;; (global-set-key (kbd "C-3") 'flyspell-goto-next-error)
  ;; (global-set-key (kbd "C-4") 'flyspell-buffer)

  (global-set-key (kbd "<f5>") 'flyspell-mode)

  ;; <2022-03-20 Sk> removing C-M-i "auto-correct word" because it
  ;; wouldn't let me to bind org-roam "insert link automatically
  ;; thingy". Now, as I unbind it (it's not gone, I can still auto
  ;; correct words with C-.m) I can use C-M-i to org-roam insert link. I
  ;; am tired, right, repeating myself. Going to sleep. Glad org-roam
  ;; works and I am finding solutions to make it work according to this
  ;; https://www.youtube.com/watch?v=AyhPmypHDEw tutorial.

  (with-eval-after-load "flyspell"
    (define-key flyspell-mode-map (kbd "C-M-i") nil))
#+END_SRC
** Ws-butler
[2022-01-01 Št] "Ws-butler" - whitespace butler - clean up whitespace automatically on
saving buffer.
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :config
  (ws-butler-global-mode t))
#+END_SRC
** Multiple cursors
[[http://emacsrocks.com/e13.html][wow]]
[2022-01-01 Št]
INSTALLS : multiple cursors
#+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :commands multiple-cursors
      :bind (("C->" . mc/mark-next-like-this)
             ("C-<" . mc/unmark-next-like-this)
             ("C-c C-<" . mc/mark-all-like-this)))
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
** Hungry delete
[2022-01-01 Št] "Hungry delete" - deletes all the whitespace when you hit backspace or
delete.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))
#+END_SRC
n* Emojify
"Emojify" allows to preview emojis in emacs buffers. Needed for
facebook auto posting
#+BEGIN_SRC emacs-lisp
  (use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
#+END_SRC
** Expand region
[2022-01-01 Št] "Expand region" allows me to select everything in between any kind of
brackets by pressing C-=. The more I press it, the more it selects.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region)
    :config)
#+END_SRC
** Company
[2021-07-01] "Company" provides autosuggestion/completion in buffers (writing code,
pathing to files, etc).  press <f1> to display the documentation for
the selected candidate or C-w to see its source

Installs: frame-local, company-box
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0) ; lb svarbu, instant suggestion
    ;; (setq company-show-numbers t)
    (setq company-tooltip-limit 10)
    ;; (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations t)
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)
    (global-company-mode))

  ;; lags a bit, quite slow and not really useful. Impression of 3min of usage.
  ;; (use-package company-box
  ;;   :ensure t
  ;;   :after (company)
  ;;   :hook (company-mode . company-box-mode))
#+END_SRC
** My-comment-box
[2022-03-18 Pn] I got this code from [[http://pragmaticemacs.com/emacs/comment-boxes/][pragmaticemacs]]:
[2022-03-28 Pr] Doesn't work for some reason. Just adds one comment..
not sure why.
#+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; example:                                                                ;;
  ;; from http://irreal.org/blog/?p=374                                      ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun bjm-comment-box (b e)
    "Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."

    (interactive "r")

    (let ((e (copy-marker e t)))
      (goto-char b)
      (end-of-line)
      (insert-char ?  (- fill-column (current-column)))
      (comment-box b e 1)
      (goto-char e)
      (set-marker e nil)))

  (global-set-key (kbd "C-c b b") 'bjm-comment-box)
#+END_SRC
** Browse-kill-ring
[2022-03-18 Pn] Are you tired of using the endless keystrokes of C-y M-y M-y M-y … to
get at that bit of text you killed thirty-seven kills ago? Ever wish
you could just look through everything you’ve killed recently to find
out if you killed that piece of text that you think you killed, but
you’re not quite sure? If so, then browse-kill-ring is the Emacs
extension for you.
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :config
    (browse-kill-ring-default-keybindings); map M-y to browse-kill-ring
    )
#+END_SRC
** Move-lines
[2022-03-20 Sk]
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (move-text-default-bindings))
#+END_SRC
#+END_SRC
* Programming
** Elpy
[2022-02-20 Sk] TUT: "Elpy" - various python modes for easier python
programming. Installs various other packages as well.  A few videos to
help install elpy and
customize.

https://www.youtube.com/watch?v=0kuCeS-mfyc,
https://www.youtube.com/watch?v=mflvdXKyA_g
[[https://www.ruiying.online/post/use-emacs-as-python-ide/][Helpful blog post]]
[[https://elpy.readthedocs.io/en/latest/index.html][Elpy official docs]]
[[https://elpy.readthedocs.io/_/downloads/en/stable/pdf/][Elpy docs pdf]]
When using tab auto completion, click f1 and get the explanation in
another buffer. Company doccumentation window.  and of course more
amazing [[https://gist.github.com/mahyaret/a64d209d482fc0f5eca707f12ccce146][shortcuts]] Here.

INSTALL:
1. add export PATH=$PATH:~/.local/bin to your .bashrc file and reload
   emacs.
2. should get a message asking something about RPC, click yes.
3. then make sure jedi is installed in your system. others use flake8,
   others use jedi.. idk. zamansky and the guy from he tutorial video
   use jedi.
4. do M-x elpy-config to see the config
5. check your .emacs.d folder. if there is one called "elpy" and it is
   empty or something, do M-x elpy-rpc-restart. Folders will appear,
   packages will install. Then do elpy-coppnfig.q
6. pip install flake8 - get to see more syntax checks. M-x elpy-config
   to confirm its installed

INSTALLS: yasnippet, pyenv, hightlight-indentation, elpy

#+BEGIN_SRC emacs-lisp
  (setq elpy-rpc-python-command "python3")
  (setq python-shell-interpreter "python3")
  (setq elpy-get-info-from-shell t)
  (use-package elpy
    :ensure t
    :custom (elpy-rpc-backend "jedi")
    :init
    (elpy-enable))
  ;; :bind (("M-." . elpy-goto-definition)))
  (setq elpy-rpc-virtualenv-path 'current)
  (set-language-environment "UTF-8")

  ;; <2022-03-18 Pn> Turned it off, doesn't look nice
  (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))

  ;; (use-package elpy
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (setq python-shell-interpreter "python3"
  ;;         python-shell-interpreter-args "-i --simple-prompt")
  ;;   (add-hook 'python-mode-hook 'eldoc-mode)
  ;;   (setq elpy-rpc-python-command "python3")
  ;;   (setq elpy-shell-echo-output nil)
  ;;   (setq python-shell-completion-native-enable nil)
  ;;   (setq elpy-rpc-backend "jedi")
  ;;   (setq python-indent-offset 4
  ;;         python-indent 4))

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode 1)
    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)))
  (setq company-quickhelp-delay 0)

  ;; (setq pos-tip-foreground-color "#FFFFFF"
  ;; pos-tip-background-color "#FFF68F")
#+END_SRC

No nee, use the regular macro.
# Execute python by line, or if you read the tutorial, by block as well.
# Some geniuses wrote [[https://stackoverflow.com/questions/31957564/emacs-python-elpy-send-code-to-interpreter][this]] - super useful when working with python. Can
# execute one line at a time. Default elpy has this function, but it says - ups, not working.
#+BEGIN_SRC emacs-lisp
  ;; (defun my-python-line ()
  ;;  (interactive)
  ;;   (save-excursion
  ;;   (setq the_script_buffer (format (buffer-name)))
  ;;   (end-of-line)
  ;;   (kill-region (point) (progn (back-to-indentation) (point)))
  ;;   ;(setq the_py_buffer (format "*Python[%s]*" (buffer-file-name)))
  ;;   (setq the_py_buffer "*Python*")
  ;;   (switch-to-buffer-other-window  the_py_buffer)
  ;;   (goto-char (buffer-end 1))
  ;;   (yank)
  ;;   (comint-send-input)
  ;;   (switch-to-buffer-other-window the_script_buffer)
  ;;   (yank)
  ;;   )
  ;; )

  ;; (eval-after-load "elpy"
  ;;  '(define-key elpy-mode-map (kbd "C-c <C-return>") 'my-python-line))
#+END_SRC

** Diff Highlight
[2022-03-08 An] https://github.com/dgutov/diff-hl
#+BEGIN_SRC emacs-lisp
    (use-package diff-hl
      :ensure t
      :init
      (add-hook 'prog-mode-hook #'diff-hl-mode)
      (add-hook 'org-mode-hook #'diff-hl-mode)
      (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
      (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
      (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-post-refresh)

      (add-hook 'prog-mode-hook #'diff-hl-margin-mode)
      (add-hook 'org-mode-hook #'diff-hl-margin-mode)
      (add-hook 'dired-mode-hook 'diff-hl-margin-mode)
  )
#+END_SRC

** Magit
[2021-07-01] "Magit" - can not imagine working with git without it. Instead of
writing full commands like: "git add ." and then "git commit -m 'bla
blaa'" then "git push"... I can simply `C-x g` for a git status. Then
`s` to do git add. And finally `C-c C-c` to invoke git commit and
simply write a message. Then press `p` and I just pushed the
changes. Way quickier than the termina, believe me.

Some notes:
- install git first on emacs - https://www.youtube.com/watch?v=ZMgLZUYd8Cw
- use personal access token
- add this to terminal to save the token for furher use
- git config --global credential.helper store
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))
#+END_SRC
** Yasnippet
[2022-02-13 Sk] "[[https://www.youtube.com/watch?v=YDuqSwyZvlY][Yasnippet]]" - expand to a switch statement with placeholders. Tab
between the placeholders & type actual values. like in [[https://www.youtube.com/watch?v=mflvdXKyA_g&list=PL-mFLc7R_MJdX0MxrqXEV4sM87hmVEkRw&index=2&t=67s][this]] video.
I am kind of too new to programming to be using snippets, but its nice,
keeping this plugin for now.  It installs kind of many
snippets... hope that doesn't slow emacs down. Shouldnt...
You can also create your own snippet... possibly even for .org files.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets         ; Collection of snippets
    :disabled t)
  (use-package yasnippet                  ; Snippets
    :disabled t)
  ;; (yas-global-mode 1)
#+END_SRC

** Csv mode
[2022-03-13 Sk]
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :mode "\\.csv\\'")
#+END_SRC
** OFF - Terminal pop
[2022-04-04 Mon] Nafik, doesn't work with virual envs.. getting
headaches from trying to figure out what is wrong. No need of this
anymore.

[2022-03-16 Tr] [[https://github.com/stanhe/pop-eshell][This]] is the source code. Git clone to .emacsd/elpa then add the config
you see below. With a shortcut of C-c C-e C-e I can now invoke an
eshell buffer at the bottom at the screen. Click the shortcut once
more and it will close. Super convenient!

I use it for django development. I first do M-x pyvenv-activate and
choose a env dir. Then I can open the shell and run python manage.py
runserver. Works like a charm and stays in the background.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/elpa/pop-eshell")
  ;; (require 'pop-eshell-mode)
  ;; (setq pop-find-parent-directory '(".git" "gradlew")) ;; parent directory should have .git or gradlew file
  ;; (pop-eshell-mode 1)

    ;; Double click to turn on turn off

    ;; full screen - (define-key map (kbd "C-c C-e C-f") 'fast-eshell-pop)
    ;; bottom buffer -  (define-key map (kbd "C-c C-e C-e") 'eshell-pop-toggle)
#+END_SRC
** MiniMap
[2022-03-18 Pn> «[[https://github.com/dengste/minimap][Minimap]] is a feature provided by the Sublime editor. It shows a
smaller, “minibar”, display of the current buffer alongside the main
editing window.»
#+BEGIN_SRC emacs-lisp
  (use-package minimap
     :ensure t
     :config ;; executed after loading package
    (setq minimap-window-location 'right)
     (global-set-key (kbd "S-<f10>") 'minimap-mode)
  )
#+END_SRC
** shell-other-window
#+begin_src emacs-lisp
  (defun eshell-other-window ()
    "Open a `shell' in a new window."
    (interactive)
    (let ((buf (eshell)))
      (switch-to-buffer (other-buffer buf))
      (switch-to-buffer-other-frame buf)))
#+end_src
* Web stuff
** Emmet mode
[2021-07-01] "Emmet mode" - HTML completion. Click c-j to autocomplete a tag.
Cheat sheet - https://docs.emmet.io/cheat-sheet/
note:
SU WEB MODE KRC PRADEDA flycheck nebeveikti ir emmet durniuoja
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    :hook ((web-mode . emmet-mode)
           (html-mode . emmet-mode)
           (css-mode . emmet-mode)
           (sgml-mode . emmet-mode)))
#+END_SRC
** Web-mode
[2021-07-01] "Web mode" - Got it basically only for maching tags highlighting
feature. I am sure it has wayyy more cool features. But more about
those - later.
INSTALLS: web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :commands (web-mode)
    :mode (("\\.html" . web-mode)
           ("\\.htm" . web-mode)
           ("\\.sgml\\'" . web-mode))
    :config
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned
  (setq web-mode-enable-current-element-highlight t)

  (add-hook 'web-mode 'emmet-mode)
#+END_SRC

** Impatient mode
[2021-07-01] "Impatient mode" lets you to have a browser window with LIVE HTML
preview. Add files by 'M-x httpd-start'. Then do `M-x
impatient-mode` - on EACH and EVERY file (css, js and hmtl). And then
go to this link http://localhost:8080/imp/
Otherwise, read simple explanation here -
https://github.com/skeeto/impatient-mode.
#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    :ensure t
    :commands impatient-mode)

  ;; to be able to preview .md files
  ;; from here - https://stackoverflow.com/questions/36183071/how-can-i-preview-markdown-in-emacs-in-real-time
  ;; But Wait... with markdown-mode installed I can already see the markdown live in my emacs...
  (defun markdown-html (buffer)
    (princ (with-current-buffer buffer
             (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
           (current-buffer)))
#+END_SRC
** Prettier
[2022-03-17 Kt] Disabled it. Formatting is good, but not always as I want it.

Formats code for me. If my html or css is messed up and not aligned, I
don't have to worry about it anymore, prettier will make it
pretty. This is quite amazing, prettifies on save.
INSTALLS: nvm, iter2, prettier
REQUIRES: sudo apt install npm, sudo apt install -g prettier
#+BEGIN_SRC emacs-lisp
  (use-package prettier
    :disabled t
    :ensure t
    :hook ((mhtml-mode css-mode scss-mode rjsx-mode js2-mode web-mode ) . prettier-mode))
#+END_SRC
** Lorem ipsum
[2022-03-20 Sk]
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
* Counsel
[2021-07-01> Click 'M-o' while in 'C-x C-f' to get a lot of options!
#+begin_src emacs-lisp
     (use-package counsel
     :ensure t
     :after ivy
     :config (counsel-mode))
#+end_src
* Org-Mode
** Agenda
[[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Amazing explanation here]]
Best org agenda tutorial/explanation - [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][here]]

Various org-agenda configurations

M-x org-agenda-file-list. Go there and click "save the changes"
MANUALLY to save to init.el. Otherwise, emacs wont read it on
every boot.  Write all org-agenda-files ONCE, do the procedure
described in the line above and forget about it. Refiling will
work, agenda will work.  if your org agenda files are not there,
do C-c C-e on the parentheses below. Evaluate them.
#+BEGIN_SRC emacs-lisp
  ;; (setq org-agenda-files '("~/Dropbox/documents/org/"))
  ;; (setq org-agenda-files (directory-files-recursively "~/Dropbox/documents/org/roam/" "\.org$"))
#+END_SRC
when you press C-c C-z on a headline, it makes a note. Specifying the name of that drawyer.
C-c C-z - tiesiog make note under a heading
to log into drawer with c-c c-z, reikia:

and apply.
#+BEGIN_SRC emacs-lisp
    (setq org-log-into-drawer "LOGBOOK")
#+END_SRC
No need to have two places to make notes. "clock" and "Logbook"
Put clock and logbook notes into one
#+BEGIN_SRC emacs-lisp
  (setq org-clock-into-drawer "LOGBOOK")
#+END_SRC
shortcut for opening agenda view
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
hide any scheduled tasks that are already completed.
if I hide, i will forget to archive them.. not good
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-restore-windows-after-quit t)
#+END_SRC
(setq org-hide-emphasis-markers t) ; Hide * and / in org tex.
https://github.com/jezcope/dotfiles/blob/master/emacs.d/init-org.org - solved my refile problem
sitas geriausias ir paprasciausias krc. veikia puikiai su ivy.
[2022-04-01 Fri] Oh shit, I turned off all the refile thingies and now
I can refile away INSIDE a file headlines only. EXACTLY what I needed
for refiling my dailies. Great!!
#+BEGIN_SRC emacs-lisp

  ;; (setq org-refile-targets '(("~/Dropbox/documents/org/roam/*.org" :maxlevel . 1)))


  ;; (defun ndk/org-refile-candidates ()
  ;;    (directory-files "~/Dropbox/documents/org/roam/" t ".*\\.org$"))
  ;; (add-to-list 'org-refile-targets '(ndk/org-refile-candidates :maxlevel . 3))

#+END_SRC
[2022-03-23 Tr] Removed after installing org-roam. Note doesn't get
copied to daily file.
quite nice, asks you to write a closing note for a task when it's
marked as DONE
#+BEGIN_SRC emacs-lisp
  ;; (setq org-log-done 'note)
  (setq org-log-done 'time)
#+END_SRC
This shortcut exists and works already in org files, but I made it
available from any buffer!! Useful when editing other type of files
and want to jump to your clocked task. Otherwise would have to open
agenda first and only then org-clock-goto.
C-h k - and writing C-c C-x C-j was very useful. Got name of the key.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-x C-j") 'org-clock-goto)
#+END_SRC
heading indentation
do M-x revert-buffer if the changes doesn't appear. Should indent then
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
RET to follow links
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
#+END_SRC
Prevent setting "done" on he heading if subheadings are not completed
#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
#+END_SRC
[2022-03-27 Sk] Got used to putting time stamps in this way, so rebind
C-c ., which is bound to ACTIVE timestamp to INACTIVE timestamp.
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-c .") 'org-time-stamp-inactive)
#+END_SRC
[2022-03-23 Tr] Turned it off after installing org-roam.
Prefix tasks with parent heading Instead of showing the filename
where the task resides, I show the first characters of the parent
heading. That way I can use short and generic task names and still
understand it in the agenda. No need to repeat the context in the
task name anymore.
#+BEGIN_SRC emacs-lisp
    ;; (defun getlasthead ()
    ;;   (let ((x (nth 0 (last (org-get-outline-path)))))
    ;;     (if x
    ;;         (if (> (string-width x) 15)
    ;;             (concat "[" (org-format-outline-path (list (substring x 0 15))) "]")
    ;;           (concat "[" (org-format-outline-path (list x)) "]"))
    ;;       "")))
    ;; (setq org-agenda-prefix-format " %i %-20(getlasthead)%?-15t% s ")
   #+END_SRC
keywords for org mode
#+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "IN-PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "SUTVARKYTA(s)" "NESUTVARKYTA(n)" "REPEATING(r)" "CANCELLED(c)"))))
#+END_SRC
When clocking in, change the state to "in progress", then when
clocking out change state to "waiting".
#+BEGIN_SRC emacs-lisp
  (setq org-clock-in-switch-to-state "IN-PROGRESS")
  (setq org-clock-out-switch-to-state "WAITING")
#+END_SRC
to see all the emacs predifined colors - M-x list-colors-display
#+BEGIN_SRC emacs-lisp
    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "IndianRed1" :weight bold)
                  ("NEXT" :foreground "DeepSkyBlue2" :weight bold)
                  ("IN-PROGRESS" :foreground "gold1" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold))))
#+END_SRC
My personal agenda
#+BEGIN_SRC emacs-lisp
  ;; Show agenda + started tasks with "waiting" label
  (setq org-agenda-custom-commands
        '(("a" "Daily agenda and all TODOs"
           ((agenda "" ((org-agenda-span 7)))
            (tags-todo "/+WAITING"
                       ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-overriding-header "Started tasks:")))))))

  ;; <2022-03-27 Sk> turned off next actions. No need to know them of
  ;; all the projects all thetime

            ;; (tags-todo "/+NEXT"
            ;;            ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
            ;;             (org-agenda-overriding-header "NEXT actions:")))))))
#+END_SRC
Always highlight the current agenda line:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
#+END_SRC
Stop preparing agenda buffers on startup
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-inhibit-startup t)
#+END_SRC
[2022-04-01 Fri] Show 2022-02-02 instead of 02/02/22
#+BEGIN_SRC emacs-lisp
    ;; System locale to use for formatting time values.
    (setq system-time-locale "C")         ; Make sure that the weekdays in the
                                          ; time stamps of your Org mode files and
                                          ; in the agenda appear in English.
#+END_SRC
** Org habit
[[https://orgmode.org/manual/Repeated-tasks.html][Docs of Repeated tasks]]
[[https://orgmode.org/manual/Repeated-tasks.html][Docs of Org Habit]]
[2022-03-23 Tr] Disabled. No need of the visuals, too much clutter, to
many dailies.. getting overwhelmed. Focus on actual tasks instead.
#+BEGIN_SRC emacs-lisp
  (use-package org-habit
    :ensure nil
    :disabled t
    :config)
  (setq org-habit-show-habits-only-for-today t) ;does nothing wth
  ;; (setq org-habit-graph-column 72) ;push little further to the rigth
  (setq org-agenda-show-future-repeats 'next)
#+END_SRC
** Clock
Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-log-note-clock-out t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Do not prompt to resume an active clock, just resume it
  (setq org-clock-persist-query-resume nil)
  ;; Keybind dissapeared after new org install? When roam.
  (define-key org-mode-map (kbd "C-c C-x C-r") 'org-clock-report)

  ;; [2022-04-10 Sun] If idle for more than 15 minutes, resolve the things by asking what to do
  ;; with the clock time
  (setq org-clock-idle-time 15)

  ;; [2022-04-10 Sun] Show lot of clocking history so it's easy to pick items off the `C-c I` list
  (setq org-clock-history-length 23)

  (defun eos/org-clock-in ()
    (interactive)
    (org-clock-in '(4)))

  (global-set-key (kbd "C-c i") #'eos/org-clock-in)
  (global-set-key (kbd "C-c C-x C-o") #'org-clock-out)

  ;; CLOCK REPORT EXAMPLE

  ;; [2022-04-10 Sun] Daily org-diary file report BY TAG
  ;; #+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100! :match "emacs"

  ;; [2022-04-10 Sun] Daily org-diary file report without tag, show all tasks
  ;; #+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100!

  ;; #+BEGIN: clocktable :maxlevel 3 :scope add-dailies :tags t
  ;; #+BEGIN: clocktable :maxlevel 3 :scope file :step day :tstart "<-1w>" :tend "<now>" :compact t
  ;; #+BEGIN: clocktable :maxlevel 5 :compact nil :emphasize t :scope subtree :timestamp t :link t :header "#+NAME: 2022_Vasaris\n"
  ;; #+BEGIN: clocktable :maxlevel 1 :compact t :emphasize t :timestamp t :link t
  ;; #+BEGIN: clocktable :maxlevel 5 :compact t :sort (1 . ?a) :emphasize t :scope subtree :timestamp t :link t

#+END_SRC
[2022-03-24 Kt] Allows org-roam to add daily files to org agenda
files. I can then do C-c C-x C-r and make clock-report with all the
completed tasks which are now in daily files and not in archives
#+BEGIN_SRC emacs-lisp

  ;; only looking through one folder
  ;; (defun add-dailies ()
  ;;   (append org-agenda-files
  ;;           (file-expand-wildcards "~/Dropbox/documents/org/roam/daily/2022/kovo/*.org")))

  ;; looking through all the folders inside 2020, great!
  (defun add-dailies ()
    (append org-agenda-files
            (file-expand-wildcards "~/Dropbox/documents/org/roam/daily/2022/**/*.org")))
#+END_SRC
** Effort
#+BEGIN_SRC emacs-lisp
  ;; To create an estimate for a task or subtree start column mode with C-c C-x C-c and collapse the tree with c
                                          ; Set default column view headings: Task Effort Clock_Summary
  (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

                                          ; global Effort estimate values
                                          ; global STYLE property values for completion
  (setq org-global-properties (quote (("Effort_ALL" . "1:00 0:00 0:05 0:10 0:30 2:00 3:00 4:00")
                                      ("STYLE_ALL" . "habit"))))

  (global-set-key [f9] 'org-agenda-filter-by-effort)
#+END_SRC
** Templates
#+BEGIN_SRC emacs-lisp
  ;; useful org-capture document - https://orgmode.org/manual/Template-expansion.html
  ;; setting up the templates for c-c c
  ;; genius. that effort.

  ;; MANY small files below
  (define-key global-map "\C-cc" 'org-capture)
  ;; (setq org-capture-templates '(
  ;; ("a" "Arvydas.dev" entry (file+headline "~/Dropbox/documents/org/arvydasdev.org" "arvydas.dev") "* TODO %?\n%^{Effort}p")
  ;; ("e" "Emacs" entry (file+headline "~/Dropbox/documents/org/src_emacs.org" "Emacs") "* TODO %?\n%^{Effort}p")
  ;; ("s" "Smuti Fruti" entry (file+headline "~/Dropbox/documents/org/src_smutifruti.org" "Smuti Fruti") "* TODO %?\n%^{Effort}p")
  ;; ("f" "Facebook_django" entry (file+headline "~/Dropbox/documents/org/src_facebook_django.org" "Facebook_django") "* TODO %?\n%^{Effort}p")
  ;; ("p" "Personal" entry (file+headline "~/Dropbox/documents/org/personal.org" "Personal") "* TODO %?\n%^{Effort}p")
  ;; ("d" "Diary" entry (file+datetree "~/Dropbox/documents/org/notes/diary.org" "Diary") "* %U %^{Title}\n%?")))
  ;; ("p" "Planned" entry (file+headline "~/Dropbox/1.planai/tickler.org" "Planned") "* %i%? %^{SCHEDULED}p" :prepend t)
  ;; ("r" "Repeating" entry (file+headline "~/Dropbox/1.planai/tickler.org" "Repeating") "* %i%? %^{SCHEDULED}p")))

  ;; ONE BIG FILE BELOW
  (setq org-capture-templates '(
                                ("i" "Inbox No Timesamp" entry (file+headline "~/Dropbox/documents/org/roam/Inbox.org" "Inbox No Timestamp") "* TODO %?\n %^{Effort}p")
                                ("I" "Inbox Timestamp" entry (file+headline "~/Dropbox/documents/org/roam/Inbox.org" "Inbox Timestamp") "* TODO %?\n%^{Effort}p\n%^{SCHEDULED}p")
                                ("t" "Tickler" entry (file+headline "~/Dropbox/documents/org/roam/20220323172208-tickler.org" "Tasks") "* %? \n%^{SCHEDULED}p")
                                ("e" "Emacs" entry (file+headline "~/Dropbox/documents/org/roam/20220323162627-emacs.org" "Tasks") "* TODO %(org-set-tags \"emacs\")%?\n%^{Effort}p")
                                ("o" "Obelsdumas" entry (file+headline "~/Dropbox/documents/org/roam/20220323163909-obelsdumas.org" "Tasks") "* TODO %(org-set-tags \"obelsdumas\")%?\n%^{Effort}p")
                                ("p" "Portfolio" entry (file+headline "~/Dropbox/documents/org/roam/20220323164133-portfolio.org" "Tasks") "* TODO %(org-set-tags \"portfolio\")%?\n%^{Effort}p")
                                ("s" "Smuti Fruti" entry (file+headline "~/Dropbox/documents/org/roam/20220323164321-smuti_fruti.org" "Tasks") "* TODO %(org-set-tags \"smuti_fruti\")%?\n%^{Effort}p")
                                ("f" "Facebook" entry (file+headline "~/Dropbox/documents/org/roam/20220323163825-facebook_group_automatization.org" "Tasks") "* TODO %(org-set-tags \"facebook\")%?\n%^{Effort}p")))
                                ;; ("d" "Diary" entry (file+datetree "~/Dropbox/documents/org/references/diary.org" "Diary") "* %U %^{Title}\n%?")))

#+END_SRC
** Archiving notes
TUT: more about archiving -
http://doc.endlessparentheses.com/Var/org-archive-location.html its
possible to archive like so:
# archiving example
#+archive: ~/Dropbox/documents/org/emacs_backups/archive/%s_datetree::datetree/
#+archive: ~/Dropbox/documents/org/emacs_backups/archive/archive.org::datetree/* From %s
#+archive: ~/Dropbox/documents/org/emacs_backups/archive/archive.org::** From %s
#+archive: ::* Archived Tasks - internal archiving
#+archive: ::** Arvydas.dev ARCHIVED
#+archive: ~/Dropbox/documents/org/references/archive.org::* From Blog
** Org-bullets
[2022-03-14 Pr]
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Add note tag to C-c C-z
#+BEGIN_SRC emacs-lisp
  ;; Upon adding a note to a heading - add a tag automatically
  (defun ndk/org-mark-headline-for-note ()
    (let ((tags (org-get-tags nil t)))
      (unless (seq-contains tags "note")
        (progn
          (outline-back-to-heading)
          (org-set-tags (cons "note" tags))))))

  (defun my/org-add-note ()
    (interactive)
    (org-add-note)                    ; call the original function
    (ndk/org-mark-headline-for-note)) ; then call the function above to add the tag

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-z") #'my/org-add-note))
#+END_SRC
** Org-download
[2022-03-25 Pn>
#+BEGIN_SRC emacs-lisp
    (use-package org-download
      :ensure t
      :commands org-download)
    (setq-default org-download-image-dir "~/Dropbox/documents/org/images")
#+END_SRC
** Org-roam
*** Org-roam itself
[2022-03-20 Sk] Finally managed to make it work. Ignored some steps
from the tutorial and it just works. Let's see what the hype is all
about.
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :demand t  ;; Ensure org-roam is loaded by default
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Dropbox/documents/org/roam")
    (org-roam-dailies-directory "~/Dropbox/documents/org/roam/daily/")
    (org-roam-node-display-template "${tags:10} ${title:100}")
    (org-roam-completion-everywhere t)

    ;; org-roam-capture-templates
    (org-roam-capture-templates
     '(("d" "default" plain
        "* ${title}\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)
       ("b" "book notes" plain (file "~/Dropbox/documents/org/roam/templates/BookTemplate.org")
        :if-new (file+head "book/%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "project" plain
        "* Goals\n\n%?\n\n* ${title}\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head
                 "%<%Y%m%d%H%M%S>-${slug}.org"
                 "#+title: ${title}\n#+category: ${title}\n#+filetags: project")
        :unnarrowed t)))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Capture template accrding to Systemcrafters ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;; org-roam-dailies-capture-templates
    ;; (org-roam-dailies-capture-templates
    ;;  '(("d" "default" entry
    ;;     "* %<%H:%M %p>: %?"
    ;;     :if-new (file+head "%<%Y-%m-%d>.org"
    ;;                        "#+title: %<%Y-%m-%d>\n#+STARTUP: content"))))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; cute single capture template with some dailies ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;; (org-roam-dailies-capture-templates
    ;;  '(("d" "default" entry
    ;;     "* %<%H:%M %p>: %?"
    ;;     :if-new (file+head "%<%Y-%m-%d>.org"
    ;;                        "#+title: %<%Y-%m-%d>\n#+STARTUP: content\n* Dailies [/]\n\n- [ ] Check the weather for today\n- [ ] Duo + letra + what you remember\n- [ ] Morning1 Anki python\n- [ ] Morning pages\n- [ ] Clean up room before sitting at the computer\n- [ ] Zero days gratitude\n- [ ] Empty Google Keep\n- [ ] Push emacs"))))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Amazing capture template of this guy, has some bugs tho. ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;; https://emacs.stackexchange.com/questions/68201/dailies-capture-template-org-roam-not-unique-headline

    ;; bug 1 - moving completed tasks inside the daily file doesnt work
    ;; bug 2 - sometimes moves the tasks not in the right heading. To the cursor location
    ;; bug 3 -

    (org-roam-dailies-capture-templates
     (let ((head
            (concat
             "#+title: %<%Y-%m-%d, %A>\n#+STARTUP: content\n\n\n* Inbox\n* Log\n* [/] Dailies\n- [ ] Morning pages\n- [ ] Check the weather for today\n- [ ] Duo + letra + what you remember\n- [ ] Go through inbox/google keep\n- [ ] Git push config/org/.emacs.d\n- [ ] Anki\n- [ ] Check agenda\n- [ ] Check email\n")))
       `(("d" "default" entry
          "* %?"
          :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org" ,head ("Inbox"))
          :unnarrowed t)
         ("j" "journal" entry
          "* %U: %?"
          :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org" ,head ("Log")))
         ("t" "Do Today" entry
          "** %a %?"
          :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org" ,head ("Inbox"))
          :immediate-finish t))))

    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ;; ("C-c n B" . my/org-roam-capture-inbox)
           ("C-c n b" . my/org-roam-capture-inbox-plain)
           ("C-c n I" . org-roam-node-insert-immediate)
           ("C-c n p" . my/org-roam-find-project)
           ("C-c n t" . my/org-roam-capture-task)
           ;; ("C-c n b" . my/org-roam-capture-inbox)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("T" . org-roam-dailies-capture-tomorrow)
           ("Y" . org-roam-dailies-capture-yesterday))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (message "Org-roam got loaded!")
    (org-roam-db-autosync-mode))
    #+END_SRC
*** Copy completed to dailies
[2022-03-23 Tr] Automatically copy (or move) completed tasks to dailies from here -
https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
This might be nice, BUT then it also copies my habits, which are files
with loads of info under them... don't really want to clutter my
org-roam files with that unnecessary information. Should I get rid of
org-habits to accommodate THIS feature? Is it even that good? How it
is more beneficial to store notes in archive, nice and tidy AS WELL AS
in org-roam daily files? Daily file overview sounds very nice. See
what and how much time I have spend on activities that day. And then
also if I want to see how much time I have spend on "project x", I can
just go to archive and sum the time there. And about the habits.. I
guess I have to get rid of them. Not really a big deal, I think I
should rid some habits, since I have been repeating them for a long
time already. So.. at the end, it's good that I discovered this method
below, I get a chance to clean up my org-habits :)

It sucks that I can not add habits like so. It simply copies the whole
task, with ALL timestamps... not helpful for when I want to check how
much time I have spend on that day.

#+BEGIN_SRC emacs-lisp
  (defun my/org-roam-copy-todo-to-today ()
    (interactive)
    (let ((org-refile-keep nil) ;; Set this to nil to delete the original!
          (org-roam-dailies-capture-templates
           '(("t" "tasks" entry "%?"
              :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Completed Tasks")))))
          (org-after-refile-insert-hook #'save-buffer)
          today-file
          pos)
      (save-window-excursion
        (org-roam-dailies--capture (current-time) t)
        (setq today-file (buffer-file-name))
        (setq pos (point)))

      ;; Only refile if the target file is different than the current file
      (unless (equal (file-truename today-file)
                     (file-truename (buffer-file-name)))
        (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (my/org-roam-copy-todo-to-today))))

  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "CANCELLED")
                   (my/org-roam-copy-todo-to-today))))
#+END_SRC
*** Project files into agenda
[2022-03-23 Tr] Read Org-roam files and put the ones that have tag Project into
org-agenda-files

For the first time, do C-h v 'org-agenda-files', click customize and
save changes. This will make it permanent. I guess as new projects
files get added, should repeat this.
#+BEGIN_SRC emacs-lisp

  ;; Add everything that has "Project" tag to org-roam-agenda
  ;; so the files are used to generate the agenda.

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)
#+END_SRC
*** Org-roam-insert-immediate
#+BEGIN_SRC emacs-lisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+END_SRC
*** Capture to inbox
[2022-03-23 Tr] Create inbox function, keybinding above.
Do I actually need it? I can simply use the capture templates as
before. Leaving it here for reference.
[2022-03-27 Sk] Yes I need it. using roam features instead of regular
org templates.
[2022-03-28 Pr] One with timestamps and everything, another without
[2022-03-30 Tr] Turned off inbox stuff, because changed
org-roam-capture-template. Now inbox will be in individual daily files.

#+BEGIN_SRC emacs-lisp
  ;; (defun my/org-roam-capture-inbox ()
  ;;   (interactive)
  ;;   (org-roam-capture- :node (org-roam-node-create)
  ;;                      :templates '(("i" "inbox" plain "** TODO %u %? %^G\n\n:PROPERTIES:\n:Effort: %^{effort|1:00|0:00|0:05|0:10|0:30|2:00|4:00}\n:END:\n"
  ;;                                    :if-new (file+head "Inbox.org"
  ;;                                                       "#+title: Inbox\n")))))
  ;;   (defun my/org-roam-capture-inbox-plain ()
  ;;   (interactive)
  ;;   (org-roam-capture- :node (org-roam-node-create)
  ;;                      :templates '(("i" "inbox" plain "** TODO %u %?"
  ;;                                    :if-new (file+head "Inbox.org"
  ;;                                                       "#+title: Inbox\n")))))
#+END_SRC
*** Open a list of projects
[2022-03-26 Št] yes, yes, yes it works! Lexical binding on, p instead
of P in tags = works!! C-c p p = projectile project, then C-c n p =
org mode notes, great!
#+BEGIN_SRC emacs-lisp
  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* ${title}\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: project")
        :unnarrowed t))))

  (global-set-key (kbd "C-c n p") #'my/org-roam-find-project)
#+END_SRC
*** Add task to a specific project
[2022-03-26 Št] Capture template works better, it adds tags, adds
effort automatically.
#+BEGIN_SRC emacs-lisp
  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "project"))
                       :templates '(("c" "clocked-task" plain "** TODO %? :${title}:\n\n:PROPERTIES:\n:Effort: %^{effort|1:00|0:00|0:05|0:10|0:30|2:00|4:00}\n:Created: %u\n:END:\n"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: project"
                                                            ("${title}")))
                                    ("t" "task" plain "** %? :${title}:\n\n:PROPERTIES:\n:Created: %u\n:END:\n"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: project"
                                                            ("${title}")))
                                    ("i" "iskvietimas" plain (file "~/Dropbox/documents/org/roam/templates/BookTemplate.org")
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: project"
                                                            ("${title}"))))))

#+END_SRC
** Org-pomodoro
[2022-04-05 Tue] Installed org-pomodoro
[2022-04-06 Wed] Found a way [[https://www.reddit.com/r/emacs/comments/bka4ek/automating_the_pomodoro_technique_dealing_with/][simplier alternative]], turning this plugin off
#+begin_src emacs-lisp
  ;; (use-package org-pomodoro
  ;;   ;; :ensure t
  ;;   :disabled
  ;;   :config
  ;;   (setq
  ;;    org-pomodoro-length 10
  ;;    org-pomodoro-short-break-length 2)
  ;;   (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))
#+end_src
[2022-04-05 Tue] Way simplier org-pomodoro solution
[2022-04-06 Wed] Found Workrave app, not going to need pomodoros
anymore. Nice, it stops whenever I am done typing or moving my mouse.
Very niiice.
#+begin_src emacs-lisp
  ;; ;; Tasks get a 25 minute count down timer
  ;; (setq org-timer-default-timer 25)

  ;; ;; Use the timer we set when clocking in happens.
  ;; (add-hook 'org-clock-in-hook
  ;;           (lambda () (org-timer-set-timer '(16))))

  ;; ;; unless we clocked-out with less than a minute left,
  ;; ;; show disappointment message.
  ;; (add-hook 'org-clock-out-hook
  ;;           (lambda ()
  ;;             (unless (s-prefix? "0:00" (org-timer-value-string))
  ;;               (message-box "The basic 25 minutes on this dreadful task are not up; it's a shame to see you leave."))
  ;;             (org-timer-stop)
  ;;             ))
#+end_src
** Other
#+BEGIN_SRC emacs-lisp
  ;; headings, jeigu ka
  ;; '(org-level-1 ((t (:inherit outline-1 :height 1.1)
  ;; when editing code blocks, treat them with proper indentation

  ;; https://orgmode.org/manual/Editing-Source-Code.html
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

  ;; tells Emacs that each time you open an Org file it must display the images instead of its link.
  ;; C-c C-x C-v to hide it
  (setq org-startup-with-inline-images t)

  ;; timer
  (setq org-clock-sound "~/Dropbox/src/emacs/misc/bell.wav")

  ;; [2022-04-10 Sun] org tempo added before, now just added templates
  (use-package org-tempo
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python ")))
#+END_SRC
* ERC
[2022-03-10 Kt]
#+BEGIN_SRC emacs-lisp
  (use-package erc
    :ensure t
    :commands (erc erc-tls)
    :config
    (setq erc-log-channels-directory "~/.emacs.d/erc")
    (setq erc-save-buffer-on-part t)
    (add-to-list 'erc-modules 'autojoin)
    (add-to-list 'erc-modules 'log)
    (erc-update-modules)
    (setq erc-kill-buffer-on-part t)
    (setq erc-track-shorten-start 8))

  (setq erc-server "irc.libera.chat"
        erc-nick "Arvydas"
        ;; erc-user-full-name "Emacs User"
        erc-autojoin-channels-alist '(("libera.chat" "#systemcrafters" "#emacs")))

  (setq erc-track-exclude-types '("NICK" "JOIN" "LEAVE" "QUIT" "PART"
                                  "301"   ; away notice
                                  "305"   ; return from awayness
                                  "306"   ; set awayness
                                  "324"   ; modes
                                  "329"   ; channel creation date
                                  "332"   ; topic notice
                                  "333"   ; who set the topic
                                  "353"   ; Names notice
                                  ))
#+END_SRC

* Elfeed
[2022-03-18 Pn] [[https://github.com/skeeto/elfeed][Elfeed]] is an extensible web feed reader for Emacs,
supporting both Atom and RSS.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t)
  (setq elfeed-feeds
        '("http://nullprogram.com/feed/"
          "https://lukesmith.xyz/rss.xml"
          "https://planet.emacslife.com/atom.xml"))
#+END_SRC
* Wttr
[2022-04-01 Pn] Good for seeing the weather in the morning :)
In case getting an output of raw html - [[https://github.com/bcbcarl/emacs-wttrin/issues/16][this is the fix]].
#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :ensure t
    :init
    (setq wttrin-default-cities '("Panevezys"
                                  "Vilnius")))

#+END_SRC
* Jumping around
** Undo-tree
[2021-07-01]"Undo tree" lets me to return to the file stage before any
modifications were made. Keybind - C-x u.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
  (setq undo-tree-auto-save-history nil)
#+END_SRC
** Rg
[2021-07-01] "Rg" - rip grep. Helps to search for a term through many files. Super
useful when need to change something on many files.  Installation:
Sudo apt install ripgrep M-x rg and search away Tut: nice video
https://www.youtube.com/watch?v=4qLD4oHOrlc&ab_channel=ProtesilaosStavrou
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :commands rg)
#+END_SRC
** Supersave
[2021-07-01] "Supersave" autosaves buffers for me. I am kind of used to clicking
C-x C-s all the time, but "Supersave" just makes sure that it saves
all the buffers when I switch windows and so on. So if I ever want to
close my emacs - I can be sure that all the buffers are saved.
#+BEGIN_SRC emacs-lisp
  ;; ace window integration - BUTINA
  (use-package super-save
    :ensure t
    :disabled t                           ;fuck that, losing lots of work with this at pkc
    :config
    (setq super-save-auto-save-when-idle t)
    (setq super-save-idle-duration 5) ;; after 5 seconds of not typing autosave
    ;; add integration with ace-window
    (add-to-list 'super-save-triggers 'ace-window)
    (super-save-mode +1))
#+END_SRC

** Avy
[2021-07-01] "Avy" lets me jump to to a specific letter or a word quickly. M-s and
I can type a word, it will immeaditely jump to it on any opened and
visible buffer.  See https://github.com/abo-abo/avy for more info.
  #+begin_src emacs-lisp
  (use-package avy
  :ensure t
  :bind
  (("M-s" . avy-goto-char-timer)
  ("M-p" . avy-goto-word-1)))
  ; cool, makes the background darker
  (setq avy-background t)
  #+end_src

** Projectile
[2021-07-01] "Projectile" allows me to have a list of my projects under one
pkeybind - C-c p p. I can then open a project and my working directory
will remain to that project that I opened. With a shortcut C-c p f I
can look thrugh ALL the files of that particular project
directory. Super useful, makes the buffers way tidier.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind (("C-c p" . projectile-command-map)) ;trying to load this after the command gets invoked the first time, but for some reasons it works only I press it the second time
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (setq projectile-sort-order 'recently-active)
    (setq projectile-project-search-path '("~/Dropbox/src/")))
#+END_SRC
** Ivy
[2021-07-01] "Ivy" is a generic completion mechanism for Emacs.
C-c f, M-x basically. Other packages use it as well.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :defer 0.1
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window)) ; I never use this
    :custom

    (ivy-count-format "(%d/%d) ")
    ;; nice if you want previously opened buffers to appear after an
    ;; emacs shutdown
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1))
#+END_SRC

** Goto-chg
[2022-02-24 Kt] Perfect! Can now cycle through the last changes in the buffer. Very
useful when doing some C-s in the buffer and then want to come back to
the last modified location. Great! If trying to use it in org file -
doesn't work. Does ''org-cycle-agenda-files' instead when doing the reverse.
#+BEGIN_SRC emacs-lisp
(use-package goto-chg
      :ensure t)
(global-set-key (kbd "M-[") 'goto-last-change)
(global-set-key (kbd "M-]") 'goto-last-change-reverse)
#+END_SRC
** Swiper
[2021-07-01] "Swiper" - an Ivy-enhanced alternative to Isearch. Instead of regular
C-s C-r. Relies on Ivy, but Ivy doens't rely on Swiper.
#+BEGIN_SRC emacs-lisp
     (use-package swiper
     :after ivy
     :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC

** Dired
[2022-03-11 Pn]
#+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil                         ;no need for t, because dired is built in
      :custom ((dired-listing-switches "-agho --group-directories-first"))) ;sort directories first
    (global-set-key (kbd "C-x C-d") 'dired-jump) ;open dired buffer in current location
    (define-key dired-mode-map (kbd "f") 'dired-find-alternate-file)
  ;; (global-set-key (kbd "C-x d") 'dired)

    ;; a function to kill dired buffers. Kind of works. Or you can use "a"
    ;; to cycle through dired and it leaves no buffers opened
    ;; DiredReuseDirectoryBuffer - https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
    ;; KillingBuffers - https://www.emacswiki.org/emacs/KillingBuffers
    (defun kill-dired-buffers ()
      (interactive)
      (mapc (lambda (buffer)
              (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
                (kill-buffer buffer)))
            (buffer-list)))

    ;; can easily check how many buffers got opened
    (defun kill-all-dired-buffers ()
      "Kill all dired buffers."
      (interactive)
      (save-excursion
        (let ((count 0))
          (dolist (buffer (buffer-list))
            (set-buffer buffer)
            (when (equal major-mode 'dired-mode)
              (setq count (1+ count))
              (kill-buffer buffer)))
          (message "Killed %i dired buffer(s)." count))))
#+END_SRC

** Diredfl
[2022-03-11 Pn] Adding more colors to dired buffers
#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :ensure t
  :after (dired)
  :config
  (diredfl-global-mode 1))
#+END_SRC
** Dired-subtree
[2022-03-11 Pn] Dired-subtree is a package that enables managing Dired buffers in a
tree-like manner.
INSTALLS: dired-hacks-utils, dired-subtree

kaybinding - 'i' to open dired folder as subtree
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after (dired)
  :ensure t)
#+END_SRC
** Dired-git-info
[2022-03-11 Pn] [[https://github.com/clemera/dired-git-info][dired-git-info]]. This Emacs packages provides a minor mode which shows
git information inside the dired buffer.
#+BEGIN_SRC emacs-lisp
  (use-package dired-git-info
    :ensure t
    :after dired)
  ;; Bind the minor mode command in dired
  (with-eval-after-load 'dired
    (define-key dired-mode-map ")" 'dired-git-info-mode))
  ;; Don’t hide normal Dired file info
  (setq dgi-auto-hide-details-p nil)
  ;; Enable automatically in every Dired buffer (if in Git repository)
  (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable)
#+END_SRC
** Amx
[2022-04-01 Fri] amx: An alternative M-x interface for Emacs. Sort by most recent commands.
https://github.com/DarwinAwardWinner/amx
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :ensure t
    :defer 0.5
    :config (amx-mode))
#+END_SRC
* Macros
[2022-03-12 Št] 5 min tasks taken from all my agenda files.
First open agenda, then list all the tasks, then click f9, then choose 5min.
#+BEGIN_SRC emacs-lisp
(fset '5minTasks
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([3 97 116 f9 61 50] 0 "%d")) arg)))
#+END_SRC
[2022-03-17 Kt] Macro for adding code block called hack
[2022-03-29 An] Or add [[https://orgmode.org/manual/Structure-Templates.html][(require 'org-tempo)]] for <s to work again.
[2022-04-04 Mon] Removed this macro, next time make one that leaves
cursor on language input
#+BEGIN_SRC emacs-lisp

#+END_SRC
#+END_SRC
[2022-03-19 Št] Open nautilus
#+BEGIN_SRC emacs-lisp
(fset 'nautilus
   [?\M-! ?n ?a ?u ?t ?i ?l ?u ?s return])
  (global-set-key [f1] 'nautilus)
#+END_SRC
[2022-03-19 Št] Open nautilus current buffer
#+BEGIN_SRC emacs-lisp
(fset 'nautilus_current
   [?\M-! ?n ?a ?u ?t ?i ?l ?u ?s ?  ?. return])
  (global-set-key [f2] 'nautilus_current)
#+END_SRC
[2022-03-27 Sk] Duplicate a task. If I try to auto copy habit to daily
file, it gets duplicated with all the clocked times. That's not so
good.. to everyday get all the previous clocked times added up. It
results in inaccurate data.

What I will do here is copy the task, then clock in on it. Easy. The
poriginal task (so it wouldn't show in agenda view anymore and would be
marked as done), I will mark as "repeating" and I will not include
'repeating' tasks in 'auto copy tasks to dailies' list. Iz pz.
#+BEGIN_SRC emacs-lisp
  (fset 'duplicate\ and\ clock_in
     [?\C-c ?\C-t ?r ?\C-  ?\M-x return ?\M-w return ?\C-y ?\C-p ?\C-x ?n ?s tab ?\C-n ?\C-k ?\C-k ?\C-k ?\C-k ?\C-k ?\C-p ?\C-x ?n ?w ?\C-l ?\C-n ?\C-k ?\C-p ?\C-c ?\C-x ?\C-i ?\C-x ?\C-s])
#+END_SRC

* org-agenda-file-list
# keeping it here, so it would load last and so this is the last place
# it loads agenda files from.
# Labukas cia tik testukas for git from lenovo.
[2022-04-14 Thu] commenting the code below, leaving the files to be
only the ones that have "project" tag
#+BEGIN_SRC emacs-lisp
  ;; (setq org-agenda-files (directory-files-recursively "~/Dropbox/documents/org/roam/" "\.org$"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+END_SRC
