#+TITLE: Emacs configuration file
#+AUTHOR: Arvydas Gasparavicius
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Intro
** Why I am using emacs

- I take notes in it
- I write code in it
- I plan time in it
- I run terminal in it
- I write and publish my blog with it
- I can write journal in it
- I basically live in it when I am at the computer
- I like improving my tools and workflow, emacs allows that
- Emacs is the most flexible and configurable editor in the multiverse

** Little history about my Emacs config

I put this at the end, since this info is not really crucial for the configuration.

*** [2023-12-05 Tue] Back to init.org

While driving from work I listened to [[https://github.com/freetonik/emacscast.org][emacascast]] podcast (episode 2)and
realized how great the [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]] is and how well it suites the emacs
config file. Today I switched back to using one .org file with all the
configurations instead of many small .el files.

*** [2023-11-28 Tue] Emacs for note taking

Decided to use emacs for note taking primarily. I rarely come to emacs
to write code. All these AI tools and so on.. Staying in other editors
instead. And if I come to emacs to code, I spend quite a while editing
the setup and yeah..

So, this emacs configuration is aimed to creating a "second brain",
for note keeping/taking/searching etc.

For that the code package is Denote. [[https://github.com/arvydasg/.emacs.d/commit/efb3b0f28b64a2dee7cca703ff301ea56f55921f][efb3b0f]] commit is the essential
one, where most modifications have happened.

Notes from that commint that summarize this chapter:
- consult package is amazing
- super nice to write notes with denote. Like the structure
- cleared up some clutter from the emacs config, replaced/removed lots
  of packages
- vertico + orderless for nice search mechanism
- project.el instead of projectile
- New theme

*** [2023-06-05 Mon] Lots of refactoring

New laptop, new setup ONCE Again. This time on Windows and WSL.

Have a lof of directories that have to be changed all the time I
switch machines, so decided to put all of those directories in one
place so it's easy to configure.

*** [2023-03-18 Sat] One org mode file for all configuration

Branch copied from "230318-Org-file-in-project-folder".

Decided to make .org file to act as my init file. Better for
documenting processes and storing shortcuts.. now I have three places
for that. One for init(config), one for shortcuts one for
documentation of emacs processes.

In the future it might be problem with windows stuff, but will see
then.

*** [2023-01-08 Sun] No init.org.
With it the config loads slower and it's not as easy to turn off
packages quickly. With my setup, I just uncomment the code and the
package is ignrod upon next load.

In case I want to load org file as my init.el, I can do it by placing
init.org file in my .emacs.d

#+begin_src bash :tangle no
  (package-initialize)
  (org-babel-load-file "~/.emacs.d/config.org")
#+end_src

*** [2023-01-06 Fri] Daemon mode

Found out about emacs daemon mode. It makes emacs
instances load instantaneously. Amazing.

Add these to .bashrc for easy launch/use/kill:

#+begin_src bash :tangle no
  alias ed='emacs --daemon'
  alias e='emacsclient -c -n'
  alias ek='emacsclient -e "(kill-emacs)"'
#+end_src

*** [2023-01-06 Fri] Using emacs with org mode at work

[[https://www.reddit.com/r/emacs/comments/1043g41/help_me_use_emacs_with_org_mode_at_work/][Using emacs with org mode at work]].
Finally decided to have work org files at work and personal at home.
Better work and life balance in this way. Emacs at work windows
computer will run on WSL with [[https://opticos.github.io/gwsl/][GWSL]] for a GUI.

*** [2022-12-27 Tue] Overwhelmed

I am feeling little bit overwhelmed with my workflow
with emacs to track my daily tasks and projects at home and at work.

All was fine until I discovered that I can use emacs at work(finally).
Now the struggle is with Dropbox, keeping only my work files at work,
but also seeing them at home..

Then also the agenda views, capture templates, refiling, one big org
file or many small org files, tags, categories, archiving and so on.
The more I tinker with it the more lost and confused I become.

Each time configuring the method requires me restructuring the
notes...

This is the attempt where I try to implement this:

https://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html

https://members.optusnet.com.au/~charles57/GTD/remember.html

https://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt

https://lifehacker.com/the-weekly-review-how-one-hour-can-save-you-a-week-s-w-5908816

Wish me luck.

I will simplify it as much as possible, then use it with ease and
enjoyment. I know it.

** How to use this config

Put the following into the header for it to work

#+begin_src emacs-lisp :tangle no
  #+BABEL: :cache yes
  #+PROPERTY: header-args :tangle yes
  #+STARTUP: overview
#+end_src

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to
keep my =~/.emacs.d= tidy, but still be able to keep it all in one file. I
aim to briefly explain all my configurations as I go along!

I would not recommend using this configuration /as-is/, because it probably
contains a lot you don't really need. I do, however, hope people find some
golden nuggets that they can smuggle into their own configs.

If you really do want to try this config out, this is how I'd go about it:

Backup your old =~/.emacs.d= (if necessary).

#+begin_src sh :tangle no
  mv ~/.emacs.d ~/.emacs.d-bak
#+end_src

Backup your old =~/.emacs=-file (if necessary).

#+begin_src sh :tangle no
  mv ~/.emacs ~/.emacs-bak
#+end_src

Clone the repo.

#+begin_src sh :tangle no
  git clone https://github.com/arvydasg/.emacs.d
#+end_src

On first run it should install a bunch of packages (this might take a while),
and you might have to restart your Emacs the first time. If you experience
bugs, please let me know!

** Great Emacs config's of others

- First and only Lithuanian(after myself) I see using Emacs https://github.com/Giedriusj1
- https://github.com/search?q=language%3Aelisp%20init.el
- https://github.com/gopar/.emacs.d
- https://github.com/zamansky/using-emacs/blob/master/myinit.org
- https://github.com/rememberYou/.emacs.d/blob/master/config.org#javascript
- http://doc.norang.ca/org-mode.html#TaskEstimates
- https://alphaalgorithms.github.io/2019/05/17/emacs-agenda-views/
- https://staff.fnwi.uva.nl/p.vanormondt/blog/2021-02-13-emacs-init-file.html
- https://github.com/sbroberg/.emacs.d
- https://github.com/thierryvolpiatto/emacs-config/blob/main/init.el
- https://gitlab.com/skybert/my-little-friends/-/blob/master/emacs/.emacs#L1100
- https://github.com/tabfugnic/dotfiles/blob/main/emacs.d/config.org
- https://sachachua.com/dotemacs/index.html#org604b1d4
- https://github.com/magnars/.emacs.d
- https://github.com/zaeph/.emacs.d
- https://whhone.com/emacs-config/#general
- https://sqrtminusone.xyz/configs/emacs/
- https://github.com/novoid/dot-emacs/blob/master/config.org
- https://github.com/Crandel/home/tree/master/.config/emacs
- https://github.com/Likhon-baRoy/.emacs.d
- https://github.com/jakebox/jake-emacs
- https://github.com/terlar/emacs-config
- https://github.com/larstvei/dot-emacs
- https://github.com/freetonik/emacs-dotfiles

* Configurations
** Tangling
*** What is tangling, literate programming, org-babel

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be overwritten by saving
=init.org=. The =init.el= in this repo should not be tracked by git, and is
replaced the first time Emacs is started (assuming it has been renamed to
=~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions to
extract the code blocks and write them to a file. There are multiple ways of
handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]].

When this configuration is loaded for the first time, the ~init.el~ is the
file that is loaded. It looks like this:

#+begin_src emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

It tangles the org-file, so that this file is overwritten with the actual
configuration.

*** Stop tracking init.el

There is no reason to track the =init.el= that is generated; by running the
following command =git= will not bother tracking it:

#+begin_src sh :tangle no
  git update-index --assume-unchanged init.el
#+end_src

If one wishes to make changes to the repo-version of =init.el= start tracking
again with:

#+begin_src sh :tangle no
  git update-index --no-assume-unchanged init.el
#+end_src

*** Lexical binding, garbage collection

Lexical scoping for the init-file is needed, it can be specified in the header.
Make startup faster by reducing the frequency of garbage collection. The
default is 800 kilobytes. Measured in bytes. These are the first lines of the
actual configuration.

A common optimization is to temporarily disable garbage collection
during initialization. Here, we set the ~gc-cons-threshold~ to a
ridiculously large number, and restore the default value after
initialization.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

Enabling lexical scoping with lexical-binding: t in your Emacs
init-file can provide advantages such as better encapsulation,
avoiding accidental variable modifications, and clearer code
behavior by ensuring that variables are scoped as intended.

*** Automatically tangle init.org and recompile the init.el file

The =init.el= should (after the first run) mirror the source blocks in the
=init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts
the code blocks from the current file into a source-specific file (in this
case a =.el=-file).

To avoid doing this each time a change is made we can add a function
to the =after-save-hook= ensuring to always tangle and byte-compile
the =org=-document after changes. Open *Compile-Log* buffer to see
if your compilation has been successfull. Great for tracking if you
have broke something with your configuration.

#+begin_src emacs-lisp
  (defun tangle-init ()
    "If the current buffer is init.org the code-blocks are tangled,
     and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

** Packages

John Wiegley's extremely popular [[https://github.com/jwiegley/use-package][use-package]] was included in [[https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg00261.html][Emacs 29]]. It
provides a powerful macro for isolating package configuration.

#+begin_src emacs-lisp
  (require 'use-package)
  ;; always add :ensure t to each package
  (setq use-package-always-ensure t)
#+end_src

Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive
and is well maintained.

#+begin_src emacs-lisp
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))
#+end_src
** General tweaks

Absolute path to emacs dir
#+begin_src emacs-lisp
  (setq ag/emacs-dir "~/.emacs.d")
#+end_src

Jump to my main config file. Putting this at the top of the config to guarantee
that I will always have this keybinding available if stuff breaks futher on in
the config.

#+begin_src emacs-lisp
  (defun ag/find-init.org nil
    (interactive)
    (find-file (concat ag/emacs-dir "/init.org")))
  (global-set-key (kbd "C-x <C-backspace>") 'ag/find-init.org)
#+end_src

Set utf-8 as preferred coding system.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+end_src

We can set variables to whatever value we’d like using setq.

#+begin_src emacs-lisp
  (setq use-package-compute-statistics t  ; M-x use-package-report
        make-backup-files nil             ; Stop creating backup~ files
        auto-save-default nil             ; Stop creating #autosave# files
        inhibit-startup-screen t          ; No splash screen please
        initial-scratch-message nil       ; Clean scratch buffer
        kill-whole-line t                 ; C-k kills line including its newline
        ring-bell-function 'ignore        ; Quiet
        scroll-margin 1                   ; Space between cursor and top/bottom
        show-paren-delay 0
        sentence-end-double-space nil     ; No double space
        confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
        read-extended-command-predicate #'command-completion-default-include-p ; Hide M-x commands which does not work in the current buffer.
        )
#+end_src

Some variables are buffer-local, so changing them using setq will only change
them in a single buffer. Using setq-default we change the buffer-local
variable’s default value.

#+begin_src emacs-lisp
  (setq-default
   fill-column 79                   ;Maximum line width
   auto-fill-function 'do-auto-fill ;Auto-fill-mode everywhere
   calendar-week-start-day 1        ;self explanatory
   )
#+end_src

*** y-or-n-p

Answering yes and no to each question from Emacs can be tedious, a single y or
n will suffice.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Autosave stuff

To avoid file system clutter we put all auto saved files in a single directory.
( have not had a chance to use this, keeping anyway..)

#+begin_src emacs-lisp
  (defvar emacs-autosave-directory
    (concat user-emacs-directory "autosaves/")
    "This variable dictates where to put auto saves. It is set to a
    directory called autosaves located wherever your .emacs.d/ is
    located.")

  ;; Sets all files to be backed up and auto saved in a single directory.
  (setq backup-directory-alist
        `((".*" . ,emacs-autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))
#+end_src

*** Clean up all the whitespace in the buffer on buffer save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

*** Auto fill fix

Auto Fill mode breaks lines automatically at the appropriate places whenever
lines get longer than the desired width
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

*** Unfill region

[2022-04-05 Tue] Un-fill region. Used it when putting text content to a website
and emacs text wrapping at 79 or 80 characters is not appropriate.

#+begin_src emacs-lisp
  (defun ag/unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  (define-key global-map "\C-\M-Q" 'ag/unfill-region)
#+end_src

*** Duplicate current line or region

#+begin_src emacs-lisp
  (defun duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
  If there's no region, the current line will be duplicated. However, if
  there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (let (beg end (origin (point)))
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (let ((region (buffer-substring-no-properties beg end)))
        (dotimes (_ arg)
          (goto-char end)
          (newline)
          (insert region)
          (setq end (point)))
        (goto-char (+ origin (* (length region) arg) arg)))))

  (global-set-key (kbd "M-c") 'duplicate-current-line-or-region)
#+end_src

** Key bindings

Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that holds
all my custom bindings. This map can be activated by toggling a simple
=minor-mode= that does nothing more than activating the map. This inhibits
other =major-modes= to override these bindings.

Basically instead of using the default key-bindings that come with the
packages, I override the default keybindings globally.

M-x cusom-bindings-map to preview all the bindings in one place.

#+begin_src emacs-lisp
  (defvar ag/custom-bindings-map (make-keymap)
    "A keymap for custom bindings.")
#+end_src

** Visuals

*** Declutter

First off, let’s declutter. Remove clickies to give a nice and clean look.
Also, the cursor can relax. We add this to the early-init, as it might be
marginally faster, and look less wonky.

#+begin_src emacs-lisp :tangle early-init.el
  (dolist (mode
           '(tool-bar-mode                ; No toolbars, more room for text
             scroll-bar-mode              ; No scroll bars either
             menu-bar-mode                ; No menu bar as well
             blink-cursor-mode))          ; Disable blinking cursor
    (funcall mode 0))
#+end_src

*** Theme

Make MISC folder as a place where emacs looks for additional custom themes

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path (concat ag/emacs-dir "/MISC/"))
#+end_src

This setting tells Emacs to consider all themes as safe and eliminates the
prompt for confirmation on whether to load and trust a theme with Lisp code.
With this configuration, Emacs will automatically trust and load themes without
asking for confirmation each time you start Emacs.
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

¨Highly accessible themes for GNU Emacs, conforming with the highest standard
for colour contrast between background and foreground values (WCAG AAA)¨

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi-tinted))
#+end_src

*** Smooth scrolling

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure t)

  ;; Accelerate scrolling with the trade-off of sometimes delayed accurate fontification.
  (setq fast-but-imprecise-scrolling t)
#+end_src

*** Frame

Add a small border on the frame. This also goes in the early-init.
#+begin_src emacs-lisp :tangle early-init.el
;; (add-to-list 'default-frame-alist '(internal-border-width . 24))
#+end_src

*** Dashboard

Dashboard provides a nice welcome.

#+begin_src emacs-lisp
  ;; A startup screen extracted from Spacemacs
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-projects-backend 'project-el
          dashboard-banner-logo-title nil
          dashboard-center-content t
          dashboard-set-footer nil
          dashboard-page-separator "\n\n\n"
          dashboard-items '((projects . 15)
                            (recents  . 15)
                            (bookmarks . 5)
                            (agenda . 5)))
    (dashboard-setup-startup-hook)
    ;; :bind (:map ag/custom-bindings-map
    ;;       ("C-v" . #'dashboard-open))
    )
#+end_src

*** Line numbers

Don't display them globally, only in prog-mode
#+begin_src emacs-lisp
;; (global-display-line-numbers-mode 1)
;; (add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

*** Cursor type

Use a bar cursor by default.
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
#+end_src

*** Mode line

**** Custom mode line

Will create my own modeline following [[https://www.youtube.com/watch?v=Qf_DLPIA9Cs&ab_channel=ProtesilaosStavrou][this]] excellent Protesilaos Stravrou
guide.

***** How it works

First of all I have to mention that I will use =setq-default= instead of
=setq=. Setq-default does the change for ALL the buffers, setq - only for the
current buffer.

Can simply try it out by evaluating this piece of code when you have two
different windows open side by side:
#+begin_src emacs-lisp :tangle no
  (setq mode-line-format nil)
#+end_src

Run this command do revert the change in the current buffer/window:
#+begin_src emacs-lisp :tangle no
  (kill-local-variable 'mode-line-format)
#+end_src

now run this command when you have two buffer windows open, mode line will
dissapear in both:
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format nil)
#+end_src

So here is my cusom mode line example:
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (format "BUFFER: %s"
                           (propertize (buffer-name) 'face 'success)))
                  "   "
                  (:eval
                   (format "MODE: %s"
                           (propertize (symbol-name major-mode) 'face 'bold)))
                  ))
#+end_src

***** The actual custom modeline

Mainly copied from - https://github.com/terlar/emacs-config

Define a variable to conveniently access only the major mode part of
mode-line-modes.

#+begin_src emacs-lisp
  (defvar mode-line-major-mode
    `(:propertize ("" mode-name)
                  help-echo "Major mode\n\
  mouse-1: Display major mode menu\n\
  mouse-2: Show help for major mode\n\
  mouse-3: Toggle minor modes"
                  mouse-face mode-line-highlight
                  local-map ,mode-line-major-mode-keymap))
#+end_src

Configure the order and components of the mode line.

#+begin_src emacs-lisp
  (setq-default mode-line-format
                '("%e" mode-line-front-space
                  mode-line-misc-info
                  (vc-mode vc-mode)
                  "  "
                  mode-line-modified
                  mode-line-remote
                  "  "
                  (:eval (propertize (concat (abbreviate-file-name default-directory)(buffer-name))))
                  ;; mode-line-buffer-identification ;only shows the filename
                  "  "
                  mode-line-position
                  (:eval
                   (mode-line-right))
                  mode-line-end-spaces))
#+end_src

Setup the right aligned mode line and helper functions to display it.

#+begin_src emacs-lisp
  (defvar mode-line-right-format nil
    "The mode line to display on the right side.")

  (defun mode-line-right ()
    "Render the `mode-line-right-format'."
    (let ((formatted-line (format-mode-line mode-line-right-format)))
      (list
       (propertize
        " "
        'display
        `(space :align-to (- right
                             (+ ,(string-width formatted-line) right-fringe right-margin))))
       formatted-line)))
#+end_src

Move default components to the right side of the mode line.

#+begin_src emacs-lisp
  (setq mode-line-right-format
        (list '(:eval mode-line-mule-info)
              "  "
              mode-line-major-mode))
#+end_src

Add position information including column and line number but skip the
percentage.

#+begin_src emacs-lisp
  (setq mode-line-position-column-line-format '(" L%l:C%C"))
  (setq mode-line-percent-position nil)
  (column-number-mode 1)
  (line-number-mode 1)
#+end_src

**** COMMENT powerline

#+begin_src emacs-lisp
  (use-package powerline)
  (powerline-default-theme)
#+end_src

*** Default visual modes

#+begin_src emacs-lisp
  (dolist (mode
           '(column-number-mode           ; Show column number in mode line
             size-indication-mode         ; file size indication in mode-line
             electric-pair-mode           ; closes parens automatically for you
             smooth-scrolling-mode        ; Smooth scrolling
             show-paren-mode              ; Highlight matching parentheses
             global-hl-line-mode          ; Highlight the line you are on in all buffers
             ))
    (funcall mode 1))
#+end_src

** Modes

Here are a list of modes(that come by default with Emacs) that I prefer to
enable by default.

#+begin_src emacs-lisp
  (dolist (mode
           '(abbrev-mode                  ; E.g. sopl -> System.out.println
             delete-selection-mode        ; Replace selected text
             dirtrack-mode                ; directory tracking in *shell*
             global-so-long-mode          ; Mitigate performance for long lines
             recentf-mode                 ; Recently opened files
             winner-mode                  ; ctrl+c+left/right redoes/undoes the window layouts
             ))
    (funcall mode 1))
#+end_src

** EditorConfig

Using [[https://editorconfig.org/][EditorConfig]] is a must when collaborating with others. It is also a way
of having multiple tools that want to format your buffer to agree (e.g. both
the language's Emacs mode and some external formatter/prettifier).

#+begin_quote
at work where I'm dev lead, I added an .editorconfig to all our projects to
enforce some basic style consistency. I'm the only full-time Emacs user, and
everyone else uses VS Code, but we now have the same basic indentation style
per project, instead of requiring each dev to self-regulate.

Works well for us, and nobody tinkers with the .editorconfig because, well, I
would never approve that PR heheh.
#+end_quote

We must create .editorconfig file in each project directory and specify
parameters in it - https://spec.editorconfig.org/.

We can then use =editorconfig-find-current-editorconfig= function to see if the
editorconfig can see our config file.

We can then create a simple .py file:

#+begin_src python :tangle no
  def x(value):
      print(value)
#+end_src

We can see that there are 4 spaces to print statement. We can add such lines in
our .editorconfig file to change that:

#+begin_src bash :tangle no
  root = true

  [*]
  indent_style = space
  indent_size = 10
#+end_src

Now do =editorconfig-apply= and after =editorconfig-format-buffer=
function(can probably bind it to a key or do a hook, so it is ran on each save)
and the new changes to inded_size will be applied to your python file:

#+begin_src python :tangle no
  def x(value):
      print(value)
#+end_src

Found this also in the docs(can confirm that it works automatically, yes):

#+begin_quote
Normally, enabling editorconfig-mode should be enough for this plugin to work:
all other configurations are optional. This mode sets up hooks so that
EditorConfig properties will be loaded and applied to the new buffers
automatically when visiting files.
#+end_quote

Finally let's install it.

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

** Ace-window

[2021-07-01] “Ace windows” helps me to switch windows easily. Main
keybind - C-x o and then the commands that follow below.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t)

  (setq aw-keys '(?q ?w ?e ?r ?y ?h ?j ?k ?l))
  (global-set-key (kbd "C-x o") 'ace-window)
  (global-set-key (kbd "M-0") 'ace-swap-window)
  (global-set-key (kbd "C-x v") 'aw-split-window-horz)

  (defvar aw-dispatch-alist
    '((?x aw-delete-window "Delete Window")
      (?m aw-swap-window "Swap Windows")
      (?M aw-move-window "Move Window")
      (?c aw-copy-window "Copy Window")
      (?f aw-switch-buffer-in-window "Select Buffer")
      (?n aw-flip-window)
      (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
      (?c aw-split-window-fair "Split Fair Window")
      (?h aw-split-window-vert "Split Vert Window")
      (?v aw-split-window-horz "Split Horz Window")
      (?o delete-other-windows)
      ;; (?o delete-other-windows "Delete Other Windows")
      ;; (?o delete-other-windows " Ace - Maximize Window")
      (?? aw-show-dispatch-help))
    "List of actions for `aw-dispatch-default'.")
#+end_src

** Denote

Using denote for my personal knowledge base that will last forever and does not
depend on any close-source tools(Evernote, Onenote, etc). The knowledge base is
made of simply text file, so they won't get corrupted or old/unused overtime.

*** Main denote config
#+begin_src emacs-lisp
  (use-package denote
    :ensure t

    ;; Denote DOES NOT define any key bindings. I just pick some of the bindings
    ;; from "Sample configuration" here - https://protesilaos.com/emacs/denote and
    ;; bind them. There are way more available functions in the docs.
    :bind (:map ag/custom-bindings-map
                ("C-c n n" . #'denote)  ;create new denote note
                ("C-c n i" . #'denote-link) ; add a link to another denote file
                ("C-c n I" . #'denote-add-links) ; add ALL denote files related to your chose keywords
                ("C-c n b" . #'denote-backlinks) ; LIST all files where current file is mentioned
                ("C-c n f f" . #'denote-find-link) ; FIND all links to other denote files
                ("C-c n f b" . #'denote-find-backlink) ; FIND all files where current file is mentioned
                )
    :hook (dired-mode . denote-dired-mode) ; highlights the filename and tags
    :config
    (setq denote-infer-keywords t)	;newly created keywords to go denote keyword list
    (setq denote-sort-keywords t)		;sort denote keywords
    ;; Automatically rename Denote buffers using the
    ;; `denote-rename-buffer-format'. Instead of full filename with date
    ;; and time and tags - show only filename
    (denote-rename-buffer-mode 1)
    )

  (setq denote-directory (expand-file-name "/home/arvy/GIT/notes/")) ;Set denote directory
#+end_src

*** Define a function to open a specific directory in Dired mode

#+begin_src emacs-lisp
  (defun ag/open-denote-dir-in-dired ()
    (interactive)
    (dired denote-directory))
  (setq initial-buffer-choice #'ag/open-denote-dir-in-dired)
  (define-key ag/custom-bindings-map (kbd "") 'ag/open-denote-dir-in-dired)
#+end_src

*** Change front matter(what appears on each note at the top)

More things to include here - https://orgmode.org/manual/Export-Settings.html
Control visibility - https://orgmode.org/manual/Initial-visibility.html

I specifically wanted to add the "startup" parameter in each new buffer, so
large note files would not spit all the information into my face when I open
that note. Have overview view instead.
#+begin_src emacs-lisp
(setq denote-org-front-matter
"#+title:      %s
#+date:       %s
#+filetags:   %s
#+identifier: %s
#+STARTUP:    overview
")
#+end_src

*** Denote with a timer

https://protesilaos.com/emacs/denote - "Journalling with a timer" part.

Good for Spanish practice.

[[https://github.com/protesilaos/tmr][TMR package]] is needed for this to work

#+begin_src emacs-lisp
(use-package tmr)
#+end_src

Create variables and add a hook to denote journal hook.
#+begin_src emacs-lisp
  (defvar my-denote-tmr-duration "10")

  (defvar my-denote-tmr-description "Practice writing in my journal")

  (defun my-denote-tmr ()
    (tmr my-denote-tmr-duration my-denote-tmr-description))

  (add-hook 'denote-journal-extras-hook 'my-denote-tmr)
#+end_src

** Org-mode

I use Org mode extensively.

*** Org-mode generals

The deeper you go in the headings, the mode indented it is. Basically makes the
org file to look nicer.
#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Allows to toggle TAB while not on the headline, but when somewhere outside the
headline. Useful for when you want to collapse the headline when deep inside of
its contents.
#+begin_src emacs-lisp
  (setq org-cycle-emulate-tab 'white)
#+end_src

Pressing RET(enter) follows(opens) a link under cursor
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src

Open source block window under the current buffer (C-c ')
#+begin_src emacs-lisp
  (setq org-src-window-setup `split-window-below)
#+end_src

Rebind active time-stamp to inactive. For some reason I got used to using
inactive timestamps, maybe because they don't show up in agenda.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (bind-key "C-c ." #'org-time-stamp-inactive org-mode-map))
#+end_src

Make the indentation look nicer in org mode. Pull the second level and higher
level headings from the left side.
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

This setting is responsible for the indentation in the src code blocks. If set
to t - will preserve the indentation after you leave the source block. If set
to nil - your code will be indented with two extra spaces. Looks nice, but idk
why one would choose this option(it was my default for a looong time until now,
just figured out this option).

Actually nil is the way to go for me. Otherwise - code is structured strangely
after I close the src block.
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation nil)
#+end_src

Not sure what these two do, but leaving them here.
#+begin_src emacs-lisp
;; (setq org-src-tab-acts-natively t)
;; (setq org-src-fontify-natively t)
#+end_src

*** Org-mode agenda

When a TODO is set to a done state, record a timestamp
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Assigning a few files to variables
#+begin_src emacs-lisp
  (setq ag/task-file "/home/arvy/GIT/notes/tasks.org")
  (setq ag/somedaymaybe-file "/home/arvy/GIT/notes/somedaymaybe.org")
#+end_src

Setting up org-agenda-files using those variables
#+begin_src emacs-lisp
  (setq org-agenda-files `(,ag/task-file ,ag/somedaymaybe-file))
#+end_src

Create a keybinding for org-agenda
#+begin_src emacs-lisp
  (define-key ag/custom-bindings-map (kbd "C-c a") 'org-agenda)
#+end_src

Set default todo keywords (C-t)
#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "PROGRESS(p)" "|" "DONE(d)" "CANCELLED(c)"))))
#+end_src

TODO and DONE keywords already have colors assigned to them, but my newly
created "PROG" - does not. Assigning it here:

To see all the available colors, check =list-faces-display=.

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(
          ("PROGRESS" . (:foreground "yellow" :weight bold))
          ))
#+end_src

By default when you do 'M-x org-agenda' and you go to todo's or tags or just
the agenda view - you see it like this:
#+begin_src emacs-lisp :tangle no
  (agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type....
#+end_src

For me that is too much information, I don't need to know in which file the
agenda item is, sicne I only have one agenda file. Instead of that information,
I make it as clutter free as possible by overriding everything(those file names
nad etc) to a dot like so:
#+begin_src emacs-lisp
;; (setq org-agenda-prefix-format '(
;;          (agenda  . "  • ")
;;          (timeline  . " • ")
;;          (todo  . " • ")
;;          (tags  . " • ")
;;          (search . " • ")
;;          ))
#+end_src

Hook to display the agenda in a single window by deleting all the
other windows
#+begin_src emacs-lisp
  (add-hook 'org-agenda-finalize-hook 'delete-other-windows)
#+end_src

Defining custom agenda commands that allow me to reach the tasks that I need.
The same can almost be as quickly achieved by opening org agenda, pressing =m=
and then defining your tag by which to filter. If we count the number of key
presses - they are the same :) Interesting which method I will end up using more.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ;; ("x" agenda)
          ;; ("u" tags "+boss-urgent")
          ;; ("v" tags-todo "+boss-urgent")
          ;; ("U" tags-tree "+boss-urgent")
          ;; ("f" occur-tree "\\<FIXME\\>")
          ;; ("h" . "HOME+Name tags searches") ;description for "h" prefix
          ;; ("hl" tags "+home+Lisa")
          ;; ("hp" tags "+home+Peter")
          ;; ("hk" tags "+home+Kim")
          ("p" . "Project searches") ;description for "h" prefix
          ("pi" tags "inbox")
          ("pe" tags "emacs")
          ("pl" tags "lifeapi")
          ("pq" tags "quotes")
          ("pa" tags "arvydasdev")
          ("pp" tags "pagalbagyvunams")
          ("pc" tags "cdp")
          ("ps" tags "smutifruti")
          ("po" tags "obelsdumas")
          ))
#+end_src

*** Org-mode refile

Set org refile targets. Refiling helps me to move headings(content) between or
different org files that I have(in this case, 'org-agenda-files') with "C-w"
command.
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+end_src

*** Org-mode capture

Example of a simple capture template:

Documentation for possible template elements - https://orgmode.org/manual/Template-elements.html

Documentation for possible template expansion - https://orgmode.org/manual/Template-expansion.html

#+begin_src emacs-lisp :tangle no
  (setq org-capture-templates '(("i"	;key
                                 "Inbox"	;description
                                 entry	;type
                                 (file+headline ag/task-file "Inbox") ;target
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?" ;template
                                 ;; :prepend t ; properties(append the new note to the top! BUT resets [/] if you have it setup)
                                 )))
#+end_src

Create a keybinding for org-capture.
#+begin_src emacs-lisp
  (define-key ag/custom-bindings-map (kbd "\C-cc") 'org-capture)
#+end_src

My personal capture templates. Click =C-cC= to see all the capture templates in
sort of graphical view.
#+begin_src emacs-lisp
  (setq org-capture-templates '(
                                ("t" "Tasks")
                                (
                                 "ti"
                                 "Inbox"
                                 entry
                                 (file+headline ag/task-file "Inbox")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "te"
                                 "Emacs"
                                 entry
                                 (file+headline ag/task-file "Emacs")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "tl"
                                 "Lifeapi"
                                 entry
                                 (file+headline ag/task-file "Lifeapi")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "tq"
                                 "Quotes"
                                 entry
                                 (file+headline ag/task-file "Quotes")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "ta"
                                 "Arvydasdev"
                                 entry
                                 (file+headline ag/task-file "Arvydasdev")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "tp"
                                 "PagalbaGyvunams"
                                 entry
                                 (file+headline ag/task-file "PagalbaGyvunams")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                (
                                 "tp"
                                 "Core Django Project"
                                 entry
                                 (file+headline ag/task-file "Core Django Project")
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?"
                                 )
                                ("s" "Someday")
                                (
                                 "sw"
                                 "Watch"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Watch")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sm"
                                 "Movies"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Movies")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sv"
                                 "Visit"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Visit")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sb"
                                 "Buy"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Buy")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sB"
                                 "Books"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Books")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sh"
                                 "Home"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Home")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sp"
                                 "Photography"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Photography")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "si"
                                 "Project Ideas"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Project Ideas")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sc"
                                 "Code"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Code")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                (
                                 "sq"
                                 "Quotes"
                                 entry
                                 (file+headline ag/somedaymaybe-file "Quotes")
                                 "* TODO %?\n:PROPERTIES:\nCAPTURED: %U\n:END:\n\n"
                                 )
                                ))
#+end_src

*** Org-mode archive

[2023-12-08 Fri] trying not to archive anything.

But if info about archiving is needed, can find it here:

http://doc.endlessparentheses.com/Var/org-archive-location.html

https://orgmode.org/worg/doc.html#org-archive-location

or in my old config -
https://github.com/arvydasg/.emacs.d/tree/20231124-Before-denote

*** COMMENT LaTeX export

Latex config example here - https://github.com/larstvei/dot-emacs. Did not use
LaTeX much myself.

*** COMMENT Org Modern

Touch up the appearance of org mode files with some fancy UTF-8 characters.
I disable ~org-modern-block-fringe~ due to [[https://github.com/minad/org-modern/issues/144][org-modern conflicting with]]
~org-adapt-indentation~.

#+begin_src emacs-lisp
  ;; Modern looks for Org
  (use-package org-modern
    :ensure t
    :after org
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-block-fringe nil))
#+end_src

** Version control

[2021-07-01] “Magit” - can not imagine working with git without
it. Instead of writing full commands like: “git add .” and then “git
commit -m ‘bla blaa’” then “git push”… I can simply =C-x g= for a git
status. Then =s= to do git add. And finally =C-c C-c= to invoke git
commit and simply write a message. Then press =p= and I just pushed
the changes. Way quickier than the termina, believe me.

Some notes:

- install git first on emacs - https://www.youtube.com/watch?v=ZMgLZUYd8Cw
- use personal access token
- add this to terminal to save the token for furher use
- git config –global credential.helper store

Execute the following lines in your terminal before trying to do
any commands with Magit.

git config --global credential.helper store
git config --global user.name arvydasg
git config --global user.email azegaspa@gmail.com

When you push anything, you will get prompted to enter a
password. Enter the ¨personal access token¨ from github developer
settings.

Cool, can see the commands magit is running by going to "magi-process" buffer
in emacs while in git repo

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))
#+end_src

[2022-03-08 An] https://github.com/dgutov/diff-hl. Show git diff changes in the
buffer "sidebar".
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode 1))

  ;; Activates diff-hl, highlighting changes in version-controlled files directly
  ;; in the buffer, providing visual cues for modifications using different
  ;; colors or markings, helping to track changes made to files in various
  ;; programming modes or buffers.
  (add-hook 'emacs-lisp-mode #'diff-hl-mode)
  (add-hook 'prog-mode-hook #'diff-hl-mode)
  (add-hook 'org-mode-hook #'diff-hl-mode)

  ;;  Integrates diff-hl within Dired mode, displaying file status indicators
  ;;  (e.g., added, modified, deleted) directly within the Dired buffer,
  ;;  facilitating quick identification of changes in the directory listing based
  ;;  on version control status.
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)

  ;; An essential hook for magit, updates the diff-hl indicators in the Magit
  ;; status buffer after a refresh, ensuring the displayed file changes align
  ;; with the status shown in magit.
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-post-refresh)

  ;;  Enhances diff-hl by displaying indicators in the left margin of the buffer,
  ;;  providing a concise overview of changes made to version-controlled files,
  ;;  aiding in identifying modifications in programming and org buffers.
  (add-hook 'prog-mode-hook #'diff-hl-margin-mode)
  (add-hook 'org-mode-hook #'diff-hl-margin-mode)
  (add-hook 'dired-mode-hook 'diff-hl-margin-mode)
#+end_src

** Completion UI

*** Vertico

[2023-11-26] decided to try out vertico instead of ivy.  Ivy
depends on a lot of packages, vertico is more simple. It also
replaces amx for M-x search. Prot inspired me to try it out. Let's
see.

It is everywhere - Ctrl-x f, M-x, ctrl-x d, ctrl-h v... everywhere
where you are trying to list and jump to something - vertico is
there

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Show more candidates
    (setq vertico-count 10)
    )
#+end_src

*** COMMENT Vertico-postframe

The completions are centered in a posframe (a frame at point). Using posframe
to show Vertico.

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :ensure t
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-width 100
          vertico-posframe-height vertico-count))
#+end_src

*** Savehist

Use the built in savehist-mode to prioritize recently used commands.

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode 1))
#+end_src

*** Marginalia

With Marginalia, we get better descriptions for commands inline. M-x, C-c f,
C-x b. Adds annotations at the margin of the minibufer for completion
candidates

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1))
#+end_src

*** Completion with corfu

Modular text completion framework for code. Using instead of company package.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode 1)
    (corfu-popupinfo-mode 1)
    (corfu-history-mode)
    :config
    (setq corfu-cycle t
          corfu-auto t
          corfu-auto-delay 0
          corfu-auto-prefix 2
          corfu-popupinfo-delay 0.5))
#+end_src

*** Orderless

I use corfu in concert with orderless.

Let's you to type "pa re con" in vertico minubuffer instead of
"package-refresh-contents". Orderless completion.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic partial-completion)
          completion-category-defaults nil
          orderless-component-separator "[ |]"
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Navigation and searching

*** Consult
The package Consult improves navigation and searching.

Consult - a super great package that will improve and make my workflow way more
interesting in emacs. It overrides a lot of default commands, but I am not
angry about it at all, these are just pure improvements.

Consult has lots of functions to keybind to. I looked through them all and
decided to keybind only particular ones. To see more of the functions, find
them in M-x ~consult-~

#+begin_src emacs-lisp
  ;; (use-package consult
  ;;   :ensure t
  ;;   :bind (:map ag/custom-bindings-map
  ;;               ("C-x b" . consult-buffer)
  ;;               ("C-c m" . consult-man)
  ;;               ("C-c r" . consult-ripgrep)))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command) ;cool, lists all the various mode commands available in the current buffer
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)

           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ;; ("M-g i" . consult-imenu)
           ;; ("M-g I" . consult-imenu-multi)

           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    )

  ;; overriding some default consult keybindings
  (define-key ag/custom-bindings-map (kbd "C-s") 'consult-line) ; Remaping the default "M-s l" for swiper like functionality
  (define-key ag/custom-bindings-map (kbd "C-r") 'consult-ripgrep) ; Remaping the default "M-s r" for ripgrep
  (define-key ag/custom-bindings-map (kbd "C-q") 'consult-imenu) ; Remaping the default "M-s r" for ripgrep

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  ;; DONT REMEMBER WHAT THIS IS, turning off for now
  ;; (add-hook 'completion-list-mode #'consult-preview-at-point-mode)
#+end_src

*** Dired

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)	; highlight the selected line
  (add-hook 'dired-mode-hook #'dired-hide-details-mode) ;Hide rights/size/created info, etc in dired buffer. To see details again click left bracket
  (setq dired-listing-switches "-al --group-directories-first") ; Sort by directoreis first in dired
  ;; Always copy/delete recursively
  (setq dired-recursive-copies  'always)
  (setq dired-recursive-deletes 'top)

  (global-set-key (kbd "C-x C-d") 'dired-jump)
#+end_src

Enable dired-find-alternate-file. In new config it always asks at the beginning
to enable this command, since it is disabled. I find it annoying, I always use
“a” to open a folder in dired and I will continue doing so. The piece of code
below does it so that I don’t get prompted “do you really want to use this
command” all the time.

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

*** Sidebar

**** COMMENT dired-sidebar

Sidebar, does the job, but don't like that ace-window clasifies that sidebar as
a window to possibly jump to. When I have 2 windows open side by
side(+sidebar), I can no longer jump to one of them with =C-x o=. I must choose
to which buffer to jump.. not good.

#+begin_src emacs-lisp
  (use-package dired-sidebar
    :hook
    (dired-sidebar-mode-hook . hide-mode-line-mode)
    (dired-sidebar-mode-hook . hl-line-mode)
    (dired-sidebar-mode-hook . variable-pitch-mode)
    (dired-sidebar-mode-hook . init-dired-sidebar))
#+end_src

Could try to ignore that buffer in a similar way, but the sidebar does not have
a name assigned to it..

#+begin_src emacs-lisp :tangle no
  :config
  (add-to-list 'aw-ignored-buffers "*Sidebar*")) ;; Replace "*Sidebar*" with the actual name of the dired-sidebar buffer
#+end_src

**** Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] seems like an extensible sidebar package. Been using it for a while
before, does not have the same problem like with =dired-sidebar=.

#+begin_src emacs-lisp
  ;; The following use-package snippet includes a list of all of
  ;; treemacs’ configuration options in their default setting.
  ;; Setting them, or activating the minor modes yourself is not
  ;; necessary, they are only listed here to encourage
  ;; discoverability.

  (use-package treemacs
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil
            treemacs-follow-mode t
            treemacs-filewatch-mode t
            treemacs-fringe-indicator-mode 'always
            treemacs-hide-gitignored-files-mode t))
    :bind (:map ag/custom-bindings-map
                ("M-`" . #'treemacs-select-window))
    )

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

** Terminal

*** Vterm

Using vterm is like using Gnome Terminal inside Emacs.

To copy from vterm buffer - first enable vterm-copy-mode with C-c C-t. To
deactivate the mode - same command.

=sudo apt install fish libtool libtool-bin autoconf automake cmake g++
libncurses-dev libz-dev libglib2.0-dev (for vterm)=

#+begin_src emacs-lisp
  (use-package vterm
    :defer t				; deferring until I use it with vterm-toggle
    :init
    (setq vterm-max-scrollback 100000)
    ;; using Fish as default vterm bash. Fish(Friendly interactive shell) is
    ;; basically buffed bash shell. Syntax highlighting, autocompletion, aliases
    ;; More about fish - https://www.youtube.com/watch?v=C2a7jJTh3kU&ab_channel=LukeSmith
    (setq vterm-shell "fish"))
#+end_src

vterm-toggle

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :bind(:map ag/custom-bindings-map
               ("C-`" . vterm-toggle)		; toggles vterm window
               ("C-<return>" . vterm-toggle-insert-cd) ; insert current dir and enter it when in vterm shell
               ))
#+end_src

** Lorem ipsum

Do you ever want to insert some [[https://en.wikipedia.org/wiki/Lorem_ipsum][Lorem ipsum]]?

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :defer t)
#+end_src

Now, run ~M-x lorem-ipsum-insert-paragraphs~ and get:

#+begin_quote
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae dolor.
Nullam tristique diam non turpis. Cras placerat accumsan nulla. Nullam
rutrum. Nam vestibulum accumsan nisl.
#+end_quote

** Multiple-cursors

Select same words inside the buffer and replace them - wow!!

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer t
    :bind (:map ag/custom-bindings-map
                ("C->" . mc/mark-next-like-this)
                ("C-<" . mc/mark-previous-like-this)
                ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** Expand region

Increase selected region by semantic units. Good for quickly selecting text in
between brackets or parenthesis.
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (:map ag/custom-bindings-map ("M-=" . er/expand-region)))
#+end_src

** Mode specific

*** Markdown

Emacs Major mode for Markdown-formatted files

#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t)
#+end_src

** Which-key

[2021-07-01] A package that displays the available keybindings in a popup. The
package is pretty useful, as Emacs seems to have more keybindings than I can
remember at any given point. For example press Ctrl+c or Ctrl+x in a buffer and
you will see the possible commands. [[https://github.com/justbur/emacs-which-key][Which key]] is nice for discoverability.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    (setq which-key-idle-delay 0.2)
    :config
    (which-key-mode 1))
#+end_src

** Helpful

[2022-03-15 An] Improves *help* buffer. Way more info than with regular help.
#+begin_src emacs-lisp
  (use-package helpful
    :defer t
    :bind (:map ag/custom-bindings-map
                ("C-h f" . helpful-callable)
                ("C-h v" . helpful-variable)
                ("C-h k" . helpful-key)
                ("C-c C-d" . helpful-at-point)
                ("C-h F" . helpful-function)
                ("C-h C" . helpful-command)))
#+end_src

** Yasnippet

[2022-02-13 Sk] ”Yasnippet” - expand to a switch statement with placeholders.
Tab between the placeholders & type actual values. like in
this(https://www.youtube.com/watch?v=mflvdXKyA_g&list=PL-mFLc7R_MJdX0MxrqXEV4sM87hmVEkRw&index=3&t=67s&ab_channel=byuksel)
video. I am kind of too new to programming to be using snippets, but its nice,
keeping this plugin for now. It installs kind of many snippets… hope that
doesn’t slow emacs down. Shouldnt… You can also create your own snippet…
possibly even for .org files. many examples here -
https://notabug.org/arkhan/dots.old/src/master/emacs/.emacs.d/snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-reload-all)
    (yas-global-mode))
#+end_src

** Keycast

Shows the keys that you type in the modeline. Might be useful when presenting
emacs to someone.

#+begin_src emacs-lisp
  (use-package keycast
    :defer t
    :config
    (setq keycast-mode-line-format "%2s%k%c%R")
    (setq keycast-mode-line-window-predicate 'mode-line-window-selected-p)
    (setq keycast-mode-line-remove-tail-elements nil)

    (dolist (input '(self-insert-command org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil))))

  ;; don't forget to turn it on whenever you need it
  ;; (keycast-mode-line-mode) or (keycast-mode)
#+end_src
** Undo-tree

[2021-07-01]”Undo tree” lets me to return to the file stage before any
modifications were made. Keybind - C-x u.

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil))
#+end_src

** Save place

[2021-07-01] “Saveplace” remembers your location in a file when saving files
#+begin_src emacs-lisp
  (use-package saveplace
    :config
    ;; activate it for all buffers
    (setq-default save-place t)
    (save-place-mode 1))
#+end_src

** Goto-chg

Go to last/previous change [2022-02-24 Kt] Perfect! Can now cycle through the
last changes in the buffer. Very useful when doing some C-s in the buffer and
then want to come back to the last modified location. Great! If trying to use
it in org file - doesn’t work. Does ”org-cycle-agenda-files’ instead when doing
the reverse.

#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure t
    :bind (:map ag/custom-bindings-map
                ("M-[" . 'goto-last-change)
                ("M-]" . 'goto-last-change-reverse)))
#+end_src

** Bindings for functions defined above.

Lastly we need to activate the map by creating and activating the minor-mode.

#+begin_src emacs-lisp
  (define-minor-mode custom-bindings-mode
    "A mode that activates custom-bindings."
    :init-value t
    :keymap ag/custom-bindings-map)
#+end_src
