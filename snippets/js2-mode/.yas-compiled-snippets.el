;;; Compiled snippets and support files for `js2-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'js2-mode
                     '(("//" "///////////////////////////////////////////////////////////////////////////////\n$0" "//" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/sliasiukas" nil nil)
                       ("postmondras" "// BUTINAI PAKEISK ENDPOINT\nconst END_POINT = \"https://63443d16dcae733e8fdaf088.mockapi.io/produktai\"\n\nconst submitForm = document.querySelector(\"form\");\nconst objectName = document.getElementById(\"name\");\nconst objectImage = document.getElementById(\"image\");\nconst statusMsg = document.getElementById(\"status-msg\");\n\nconst clickToHome = () => {\n  window.location = \"./index.html\";\n};\n\nconst postData = async (object) => {\n    try {\n        const response = await fetch(END_POINT, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(object),\n        });\n        if (response.status === 500) {\n            statusMsg.innerHTML = \"\";\n            statusMsg.style.color = \"#03d3b2\";\n            statusMsg.innerHTML = `Please check if all mandatory data provided. Here is response status code: ${response.status}`;\n        } else if (response.ok) {\n            statusMsg.innerHTML = \"\";\n            statusMsg.style.color = \"black\";\n            statusMsg.innerHTML = \"Data successfully sent! Returning to home page...\";\n            setTimeout(clickToHome, 2000);\n        }\n    } catch (error) {\n        statusMsg.innerHTML = \"\";\n        statusMsg.style.color = \"red\";\n        statusMsg.innerHTML = `There was an error: ${error}`;\n    }\n};\n\nconst validateForm = () => {\n    let validationOk = true;\n    const nameErrElement = document.querySelector(\"#name-block span\");\n    const imageErrElement = document.querySelector(\"#image-block span\");\n    \n    if (objectName.value == \"\") {\n        nameErrElement.innerHTML = \"Name field must be correctly filled\";\n        nameErrElement.style.visibility = \"visible\";\n        validationOk = false;\n    } else {\n        nameErrElement.style.visibility = \"hidden\";\n    }\n    if (objectImage.value == \"\" || !objectImage.value.includes(\"http\")) {\n        imageErrElement.innerHTML = \"Image URL field must be correctly filled\";\n        imageErrElement.style.visibility = \"visible\";\n        validationOk = false;\n    }\n    else {\n        imageErrElement.style.visibility = \"hidden\";\n    }\n    return validationOk;\n};\n\nsubmitForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    if (validateForm()) {\n        // BUTINAI PAKEISK key names\n    let newObject = {\n        pavadinimas: objectName.value,\n        nuotrauka: objectImage.value,\n    };\n    postData(newObject);\n    }\n});\n" "postmondras" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/postmondras" nil nil)
                       ("post" "const END_POINT = \"https://olive-bead-glazer.glitch.me\";\nconst submitForm = document.querySelector(\"form\");\n\nconst postData = async (car) => {\n    const alertMsg = document.getElementById(\"alert\");\n    try {\n        const response = await fetch(END_POINT, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(car),\n        });\n        if (response.ok) {\n            alertMsg.innerHTML = \"Data successfully sent!\";\n        }\n    } catch (error) {\n            // insert allert message here\n    }\n};\n\n\nconst addCar = (event) => {\n    event.preventDefault();\n    const carBrandInput = document.getElementById(\"car-brand\");\n    const carModelInput = document.getElementById(\"car-model\");\n    const car = {\n        brand: carBrandInput.value,\n        model: carModelInput.value,\n    };\n    postData(car);\n};\n\nsubmitForm.addEventListener(\"submit\", addCar);" "post" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/post" nil nil)
                       ("item" "const itemId = localStorage.getItem(\"itemId\");\nconst END_POINT = `https://6342e230ba4478d478446685.mockapi.io/test/${itemId}`\nconst dataArr = {};\n\n\nconst setId = (id) => {\n    localStorage.setItem(\"itemId\", id);\n};\n\nconst createCard = (object) => {\n    // defining wrappers\n    const cardWrapper = document.getElementById(\"cardWrapper\");\n\n    // defining elements\n    const card = document.createElement(\"div\");\n    // const cardImage = document.createElement(\"img\");\n    const cardBody = document.createElement(\"div\")\n    const cardTitle = document.createElement(\"h5\");\n    const cardButton = document.createElement(\"button\")\n    // const cardText = document.createElement(\"p\");\n    // const cardId = document.createElement(\"p\");\n    // const cardYear = document.createElement(\"p\");\n    // const cardButton = document.createElement(\"a\");\n\n    // adding styles to the elements\n    card.classList.add(\"card\");\n    card.style.width = \"18rem\"\n    // card.style.marginRight = \"1rem\"\n    // card.style.marginBottom = \"1rem\"\n\n    cardButton.classList.add(\"btn\")\n    cardButton.classList.add(\"btn-primary\")\n    \n    // cardImage.classList.add(\"card-img-top\")\n    // cardImage.setAttribute(\"src\", object.image)\n    // cardImage.style.height = \"200px\"\n    \n    cardBody.classList.add(\"card-body\")\n    \n    cardTitle.classList.add(\"card-title\")\n    cardTitle.style.color = \"red\"\n    cardTitle.style.fontWeight = \"800\"\n    \n    // cardYear.classList.add(\"card-text\")\n    // cardText.classList.add(\"card-text\")\n    \n    // cardButton.classList.add(\"btn\")\n    // cardButton.classList.add(\"btn-primary\")\n    // cardButton.innerHTML = \"Go somewhere\"\n\n    // adding content\n    cardTitle.innerHTML = \"title: \" + object.name\n    // cardText.innerText = \"text: \" + object.price\n    // cardId.innerText = \"id: \" + object.id\n    cardButton.innerHTML = \"blet\";\n\n    // appending\n    cardWrapper.append(card);\n    // card.append(cardImage, cardBody);\n    card.append(cardBody);\n    // cardBody.append(cardId, cardText, cardTitle, cardYear, cardButton);\n    cardBody.append(cardTitle);\n\n    // on button click add its id to localstorage\n    cardButton.addEventListener(\"click\", () => {\n        setId(object.id);\n    });\n};    \n\nconst fetchData = async () => {\n    try {\n        const response = await fetch(END_POINT);\n        if (response.ok) {\n            dataArr.blet = await response.json();\n            console.log(dataArr)\n            createCard(dataArr.blet)\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nfetchData()\n" "item" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/item" nil nil)
                       ("filter" "const metai2021 = dataArr.blet.filter(function (el) {\nreturn el.Laikotarpis == 2021\n})\nconsole.log(metai2021)" "filter" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/filter" nil nil)
                       ("felog" "fetch(END_POINT)\n    .then((response) => {\n        return response.json()\n    }).then((data) => {\n        console.log(data)\n    })" "felog" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/feLog" nil nil)
                       ("card" "const setId = (id) => {\n    localStorage.setItem(\"itemId\", id);\n};\n\nconst createCard = (object) => {\n    // defining wrappers\n    const cardWrapper = document.getElementById(\"cardWrapper\");\n\n    // defining elements\n    const card = document.createElement(\"div\");\n    // const cardImage = document.createElement(\"img\");\n    const cardBody = document.createElement(\"div\")\n    const cardTitle = document.createElement(\"h5\");\n    const cardButton = document.createElement(\"a\")\n    // const cardText = document.createElement(\"p\");\n    // const cardId = document.createElement(\"p\");\n    // const cardYear = document.createElement(\"p\");\n    // const cardButton = document.createElement(\"a\");\n\n    // adding styles to the elements\n    card.classList.add(\"card\");\n    card.style.width = \"18rem\"\n    // card.style.marginRight = \"1rem\"\n    // card.style.marginBottom = \"1rem\"\n\n    cardButton.classList.add(\"btn\")\n    cardButton.classList.add(\"btn-primary\")\n    \n    // cardImage.classList.add(\"card-img-top\")\n    // cardImage.setAttribute(\"src\", object.image)\n    // cardImage.style.height = \"200px\"\n    \n    cardBody.classList.add(\"card-body\")\n    \n    cardTitle.classList.add(\"card-title\")\n    cardTitle.style.color = \"red\"\n    cardTitle.style.fontWeight = \"800\"\n    \n    // cardYear.classList.add(\"card-text\")\n    // cardText.classList.add(\"card-text\")\n    \n    // cardButton.classList.add(\"btn\")\n    // cardButton.classList.add(\"btn-primary\")\n    // cardButton.innerHTML = \"Go somewhere\"\n\n    // adding content\n    cardTitle.innerHTML = \"title: \" + object.name\n    // cardText.innerText = \"text: \" + object.price\n    // cardId.innerText = \"id: \" + object.id\n    cardButton.innerHTML = \"blet\";\n    cardButton.href = \"item.html\";\n\n    // appending\n    cardWrapper.append(card);\n    // card.append(cardImage, cardBody);\n    card.append(cardBody);\n    // cardBody.append(cardId, cardText, cardTitle, cardYear, cardButton);\n    cardBody.append(cardTitle);\n\n    // on button click add its id to localstorage\n    cardButton.addEventListener(\"click\", () => {\n        setId(object.id);\n    });\n};    \n" "card" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/card" nil nil)
                       ("aslog" "async function fetchData() {\n    const response = await fetch(END_POINT)\n    const data = await response.json()\n    console.log(data)\n}\n\nfetchData()\n" "aslog" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/asLog" nil nil)
                       ("ascard" "const dataArr = {};\n\nconst fetchData = async () => {\n    try {\n        const response = await fetch(END_POINT);\n        if (response.ok) {\n        dataArr.blet = await response.json();\n            console.log(dataArr)\n            dataArr.blet.forEach((x) => createCard(x));\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\nfetchData()\n" "ascard" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/asCard" nil nil)
                       ("alermsg" "alertMsg.innerHTML = `There was an error!\\n${error}`;" "alermsg" nil nil nil "/home/arvydas/Dropbox/src/emacs/snippets/js2-mode/alert" nil nil)))


;;; Do not edit! File generated at Thu Dec 22 13:08:16 2022
