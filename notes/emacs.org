2024-03-17, no longer using Emacs. Focusing on work more, learning new stuff more rather than editors, note taking, etc...

All kinds of stuff from devnotes about emacs below. Trying to keep everything in one place.

# Emacs commands

* 2024-02-12 Nusprendziau Emacs padeti ant lentyneles.
Cia keli bindings kuriuos intensyviai tuomet naudojau.

C-c c-s - django snippets in html
M-g f - all flymake errors
M-x q - list variables/func/classes
M . - jump to definition
M , - jump back from definition
M ? - find references
M [ ] - jump to previous location
C-x r b - jump to bookmark
C-x p g - ripgrep project
C-h D - devdocs
C-M a - start of class
C-M e - start of class


* Emacs commands (from work)
** C-c C-e m M (org-md-export-as-markdown)
** mx truncate lines - wrap long lines
** unfill paragraph - unfill paragraph :)
** Naudok sparse trees su C-c /
** C-x 4 c - clone current buffer
** C-h m - current mode commands n stuff?
** org-change-tag-in-region - batch apply tags
** org-md-export-to/as-markdown - export org to markdown
** ctrl+c+/ in org file for filtering - org sparse tree!!!
** clear sparse tree ctrl+c+/ ctrl+c+'
** in org agenda press / and find ANYHTING you need!!!
not necessarily by tag or todokwd
** Query replace from all files within folder:

https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open

worked just fine on [2024-01-25 Thu]




```org
M-x find-name-dired RET
it may take some time for all the files to appear in the list, scroll to bottom (M->) until "find finished" appears to make sure they all have loaded
Press t to "toggle mark" for all files found
Press Q for "Query-Replace in Files...": you will be prompted for query/substitution regexps.
Proceed as with query-replace-regexp: SPACE or y to replace and move to next match, n to skip a match, etc.
Type ! to replace all occurrences in current file without asking, N to skip all possible replacement for rest of the current file. (N is emacs 23+ only)
To do the replacement on all files without further asking, type Y.
Call “ibuffer” (C-x C-b if bound to ibuffer, or M-x ibuffer RET) to list all opened files.
Type * u to mark all unsaved files, type S to save all marked files
 * * RET to unmark all marks, or type D to close all marked files



| Key Binding               | Function                                                                     | Mode       |
|---------------------------+------------------------------------------------------------------------------+------------|
| p                         | Forward one indentation block                                                | Elpy       |
| C-up                      | Backward one indentation block                                               | Elpy       |
| C-left                    | Backward one indentation level                                               | Elpy       |
| C-right                   | Forward one indentation level                                                | Elpy       |
| M-down                    | Move line or region down                                                     |            |
| M-up                      | Move line or region up                                                       |            |
| M-left                    | Move line or indentation block left                                          |            |
| M-right                   | Move line or indentation block right                                         |            |
| M-x elpy-set-project-root | Set the root directory of the python project                                 |            |
| C-c C-f                   | Find file in project                                                         |            |
| C-c C-s                   | Regular expression match in project                                          |            |
| M-TAB                     | Complete current statement                                                   |            |
| M-.                       | Goto defition                                                                |            |
| M-*                       | Return to position from last definition lookup                               |            |
| C-c C-z                   | Switch to python shell                                                       |            |
| C-c C-c                   | Send python code to shell (active region or complete buffer)                 |            |
| C-c RET                   | Send current line to python shell                                            |            |
| C-M-x                     | Sends code of current top level function to python shell                     |            |
| C-c C-v                   | Syntax check with flake8                                                     |            |
| C-c C-n                   | Next flake8 error                                                            |            |
| C-c C-p                   | Previous flake8 error                                                        |            |
| C-c C-t                   | Start tests                                                                  |            |
| C-c C-e                   | Edit all occurrences of the symbol at point at once                          |            |
| C-c C-r f                 | Format code using the available formatter                                    |            |
| C-c C-r i                 | Query for new imports of unresolved symbols, and remove unreferenced imports |            |
| C-c C-r r                 | Run the Elpy refactoring interface for Python code                           | Elpy       |
| C-u C-c C-x C-i           | See all recently clocked in tasks                                            | Org-clock  |
| M-x Customize group       | See ALL the configurable lines of a mode/package - GREAT!!!                  |            |
| C-c /                     | Org sparse tree - filter org file for TODO entries and such, to exit -       | Org        |
| org-sort-entries          | sort entries by TODO keyword                                                 | Org        |
| run-python                | can not find module named... python error. Run run-python in the buffer      | elpy       |
| dired-git-info-mode       | shows the commit history of a directory                                      | dired      |
| org-agenda-archives-mode  | shows all the archived tasks in the agenda.                                  | org agenda |
| c-u m-x shell             | open another shell instance, give it a name                                  |            |
| c-c c-d                   | Helpful at point                                                             | Docs       |
| C-h b                     | all shortcuts in of current buffer modes                                     | Docs       |
| M-x where is              | which key shortcut is bound to                                               | Docs       |
| C-h r                     | docs                                                                         | Docs       |
| C-h i                     | info                                                                         | Docs       |
| C-h ?                     | Other + other choose!                                                    
```


** Shortcuts
Sasha - http://emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html
*** network
- traceroute delfi.lt
- ipconfig
- gpupdate /force
- gpresult /r
n- ping
*** emacs
1) M-g j     = Dumb jump
2) M-%       = Query replace
3) C-M i     = FLYSPELL step on a word and correct it's
   spelling. multiple presses for different words
4) C-;       = flyspell auto correct previous word
5) F5        = turn on flyspell mode
6) C-c C-p I = open buffers OF THE CURRENT PROJECT
7) M-,       = Go back one step
8) C-h i     = info about your whole linux system and programs installed
9) C-h r     = info manual emacs
10) C-h m     = describe mode
11) C-h k    = describe key
12) C-x n s  = narrow down to one headline in org mode
13) C-x n w  = widden back to all headings
14) C-x n w  = widen back to normal
15) C-c u    = undo tree visualize
16) M-x highlight-regexp = highlights word occurences in the buffer
17) C-x h    = mark buffer
18) C-x SPC  = rectangle mode
19) C-u c-u c-u . = enter current date timestamp - this puts to agenda
20) C-u C-c . = inactive timestamp with hour and minutes
21) C-c .    = enter current date timestamp same
22) C-c !    = enter current date timestamp BUT no agenda entry
23) C-x ( OR F3    = define macro - do a sequence
24) C-x ) OR F4    = stop defining
25) C-x e OR f4    = executes macro
26) C-x C-k n      = give name to last macro
27) M-x insert-kbd-macro = extract contents of a macro (useful when
    want to put in init file)
28) M-x apply-macro-to-region-lines = does exactly that
29) C-SCP x2 = makes a mark
30) C-x C-SCP = jumps to that mark
31) C-x r SCP <any> = resgister a key(position)
32) C-x r j <any> = jump to the key(to that position)
33) C-c C-w  = refile to enother point in the org document or another file
34) C-c C-s  = schedule org item
35) C-c C-d  = set a deadine to org item
36) C-x C-x  = Move cursor to the other end of selection.
37) C-a a    = org agenda
38) C-c c    = capture something (write note and put it somewhere in the template)
39) C-c C-z  = make a note under sme org heading
40) C-c a a F = follow up mode. expands the task in agenda view
41) M-u      = capitalize all letters of a word
42) m-l      = lowercase all letters of a word
43) C-x left = previous buffer. Faster than C-x b? maybe. Cia gi winner mode.
44) C-c C-l  = after selecting text - add link shortcut
45) C-c C-x e = set effort estimate on an org headline
46) C-c C-x C-c = see the effort estimate table
47) C-c C-x C-j = go to clock entry
48) C-c C-e  = ELPY Edit all occurrences of the symbol at point at once
49) C-c C-c  = ELPY send REGION to python interactive
    interpreter,(atsidarys atskiras buffer, arba gali ji isjungti, tai
    graziai apacioje rodys for a short time) ARBA Gali ctrl+enter po
    viena eilute
50) C-c C-d  = ELPY show documentation,
51) C-c C-z  = ELPY Switch between your script and the interactive shell
52) M-.      = ELPY go to definition.(or use dumb-jump shortcut M-g g)
53) C-c n/p  = ELPY move to next, previous error
54) C-c C-v  = ELPY Syntax check with flake8
55) C-c C-n  = ELPY Next flake8 error
56) C-c C-t  = ELPY Start tests
57) C-c RET  = ELPY (new shortcut) evaluate line
58) M-x comint-clear-buffer = clears elpy terminal (C-c M-o)
59) M-x elpy-config  = ELPY config
60) C-h v kill-ring = Watch your kill ring
61) C-x o m  = AVY swap windows
62) M-i      = indent, cool
63) M-x emacs-lisp-byte -compile = after modifying emacs package file,
    run this (while in the opened buffer) to save the changes. Helped
    with iedit.
64) M-x eww  = EWW browser
65) C-c C-o  = ORG open linka
66) A        = ORG agenda append agenda view to buffer
67) o        = ORG agenda delete other windows
68) f1 v     = DESCRIBE VARIABLE - super useful. can look for all kind
    of information. Like directories of plugins and so on... try it out.
69) C-v      = scroll buffer down
70) M-v      = scroll buffer up
71) M-! nautilus . = open current dir in nautilus. oh yeah
72) M-x clone-indirect-buffer = multiple views of same file
73) M-o      = see council option
74) M-x flyckeck-list-errors = a list of errors in the buffer
75) C-c C-p p/d = TREEMACS add/remove project to a workspace
76) M-x lsp-treemacs-symbols = show the structure of the file
77) m-x lsp-find-references = show where the function is being used
78) C-c C-d  = when in python doc = gives documentation of chosen topic
79) C-c /    = sparse tree (org mode look up for things)
80) M-x erc-tls = irc.libera.chat IRC chat!
81) /join #emacs or #systemcrafters = IRC join channel
82) /part    = IRC leave channel
83) /quit bye all! = quit server
84) /reconnect = reconnect to the server?
85) /list    = IRC list channels
86) /whois nick = IRC find out whoe the user is!!
87) / query nick = IRC write someone a private message!! (new buffer opens
    up)
88) /msg nick Hello there = IRC sends a one time message
89) /nick newname = IRC change nickname
90) C-c '    = edit [[https://orgmode.org/manual/Editing-Source-Code.html][code block]] in a separate window (proper
    indentation and all)
91) C-c C-x ; = TIMER start
92) C-c C-x , = TIMER pause/continue
93) C-c C-x _ = TIMER stop
94) C-> = multiple cursors - mark next line like this
95) C-< = multiple cursors - mark previous line like this
96) C-c C-< = multiple cursors - mark all like this
97) M-x customize group - customize some stuff
98) M-x ielm RET package-archives RET = gives some values out
99) C-c '   = edit source code buffer (useful when need code
    completion when editint a src code in ORG file)
100) g-o     = DIRED view buffer(or view in another window)
101) a       = DIRED - cycle through directories and open files (leaves
     no traces(open buffers))
102) R      = DIRED rename file
103) +      = DIRED create directory
104) m      = DIRED mark file
105) u/U    = DIRED un mark file/s
106) (      = DIRED close/open information
107) t      = DIRED invert marked file selection
108) % m    = DIRED mark all files according to your needs fx. .org \.org$
109) *      = DIRED more options
110) c      = DIRED copy marked files
111) D      = DIRED delete marked files
112) d      = DIRED mark files for deletion
113) x      = DIRED execute the deletion
114) M-[    = goto last change(previous)
115) M-]    = goto last change reverse(next)
116) C-a C  = configure org agenda (the simple way)
117) C-'    = cycle through agenda files
118) F11    = full screen mode
119) emacs -q test.el foo.org = debug lisp code this way
120) C-D    = PYTHON mode - PY DOCS
121) *buffer name* = creates a buffer
122) M-x highlight-regexp = highlight search results
123) M-x clone indirect buffer = duplicate same buffer, edit in two places
124) M-y    = browse kill ring
125) RET:   = ELFEED view selected entry in a buffer
126) b:     = ELFEED open selected entries in your browser (browse-url)
127) y:     = ELFEED copy selected entries URL to the clipboard
128) r:     = ELFEED mark selected entries as read
129) u:     = ELFEED mark selected entries as unread
130) +:     = ELFEED add a specific tag to selected entries
131) -:     = ELFEED remove a specific tag from selected entries
132) g:     = ELFEED refresh view of the feed listing
133) G:     = ELFEED fetch feed updates from the servers
134) s:     = ELFEED update the search filter (see tags)
135) c:     = ELFEED clear the search filter
136) s-F10  = show minimap
137) C-c n l = ORG-ROAM-buffer-toggle
138) C-c n f = ORG-ROAM-node-find
139) C-c n i = ORG-ROAM-node-insert
140) C-M-i   = ORG-ROAM completion at point
141) org-id-get-create = ORG-ROAM create an IF for a heading
142) org-roam-alias-add = ORG-ROAM add another name for a node
143) C-c n d n = ORG-ROAM-dailies-capture-today
144) C-c n d d = ORG-ROAM-dailies-goto-today
145) C-c n d Y = ORG-ROAM-dailies-capture-yesterday
146) C-c n d T = ORG-ROAM-dailies-capture-tomorrow
147) C-c n d y = ORG-ROAM-dailies-goto-yesterday
148) C-c n d t = ORG-ROAM-dailies-goto-tomorrow
149) C-c n d d = ORG-ROAM-dailies-goto-today
150) C-c n d v = ORG-ROAM-dailies-capture-date
151) C-c n d c = ORG-ROAM-dailies-goto-date
152) C-c n d b = ORG-ROAM-dailies-goto-next-note
153) C-c n d f = ORG-ROAM-dailies-goto-previous-note
154) [[http://xahlee.info/emacs/emacs/rename_file_pattern.html][Batch rename files]] - open dired-toggle-read-only
155) - git rm --cached <path to file> = [[https://betterprogramming.pub/how-to-remove-committed-files-from-git-version-control-b6533b8f9044][removes git file from repo]],
     keeps it in folder
156) C-M o when in 'find file' = drop-down of suggestions of what to do
     with files, list.
157) C-c C-x C-v = show/hide images in org files instead of links
158) Mu4e - [[https://github.com/daviwil/emacs-from-scratch/blob/629aec3dbdffe99e2c361ffd10bd6727555a3bd3/show-notes/Emacs-Mail-01.org][shortcuts here]]
159) Ctrl+shift+alt+R - start/end gnome recording
160) settings set org.gnome.settings-daemon.plugins.media-keys
     max-screencast-length X - specify the length of the gnome video. 0
     instead of X - no duration. 300 instead of X = 300sec
161) C-u C-C C-x C-i = list of all clocked-in tasks. Primeti? Wow.
162) C-u thingie on different commands - projectile f.x also - COMMANDER
163) M-x customize-group RET org-pomodoro = configurations of ANY
     package listed here
164) M-x use-package-report = shows packages that got loaded and their
     load times!!
165) C-u M-x eshell = open two eshells at the same time!
166) org-customize = customize EVERYTHING about org-mode
167) C-c C-, = lists the possible <s completetions. discovered at work.
168) screenfetch = linux info with logo
169) passwd - change password for linux user
170) du -hs = [[https://askubuntu.com/questions/1224/how-do-i-determine-the-total-size-of-a-directory-folder-from-the-command-line][how big is a folder]] in terminal
171) C-h m = list all the minor modes
172) C-c C-d = helpful-at-point
173) C-x C-0 = text-scale-adjust
174) C-x z = repeat last command
175) C-c M- o or M-x commit clear buffer - clears eshell or shell buffer
176) ~Shift + "~ = wraps text in parentheses
177) C-w = whitespace mode, rodo taskiukus vietoj whitespace
178) C-c - c-e f = fold all children elements of the current father
179) [[https://ternjs.net/doc/manual.html#emacs][tern commands]] - javascript jump to definition, documentation and
     other cool stuff
180) org-export-dispacher or C-c C-e(might be conflicitng with pop eshell)
181) c-x n s/w - org narrow/expand
182) ~C-o~ in dired to preview/view/visit files
183) C-x C-p - mark whole page
184) org-change-tag-in-region - apply tag to all headings
- C-h i - INFO MODE!!!!! shows all the manuals of packages
- c-c c-x p - assign property(category etc) to org note
- C-a - add attachement!!
- c+h r - open emacs docs, press m to pick topic (f.x bookmarks), RET -
you are reading the docs. NIIICE.

*** Bindings
**** Emacs pasidaryk bindings patogesnius

Last change
Bottom top of the file
Definition
[[https://github.com/Crandel/home/blob/master/.config/emacs/recipes/multiple-cursors-rcp.el][Multiple cursors]]
Jump between paragraphs
M-s
query replace

Gal kaip revit??
**** go to next paragraph su M-n M-p maybe
**** go to last change emacs M={ }
**** go to last change emacs M={ }
**** go to next paragraph su M-n M-p maybe
**** kaip suzinoti visas commands? pvz agenda... shift + r clocktable, shift + L follow mode
gal su hydrom galima matyti?
**** Vim bindings
https://bbbscarter.wordpress.com/2012/09/13/emacs-bits-and-bobs/

[[https://i.stack.imgur.com/zpzPO.gif][evil bindings cheat sheet]]

[2022-12-05 Mon] [[https://www.reddit.com/r/emacs/comments/tyg9v5/why_not_use_evil_in_2022/][why NOT tu use evil in 2022?]] zinai ka, gal pabusiu su
emacs for now.. it is going great with it. I like it.

Evil collection plugin in the future - "evil bindings in every package"
- C-G from INSERT to NORMAL mode
- C-U go half page up
- C-D go half page down
- Shift-A - append to the end of the line
- C-z - emacs mode(get yourself out of trouble with it. STOP evil)
- C-w - evil window management
- C-o - evil JUMP backwards
**** M-x customize group RET org-pomodoro RET
** commands emacs
*** ansi-term copy/paste
:PROPERTIES:
:CAPTURED:[2023-06-15 Thu 08:30]
:END:

~C-c C-j~ will run term-line-mode, which treats the terminal buffer more
like a normal text-buffer in which you can move the cursor and yank
text. You can switch back to character mode by running term-char-mode
with ~C-c C-k~.

https://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell
** Bookmarks emacs

C+h i - info mode

C+x r b - jump to bookmark
C+x r m - make a bookmark here
C+x r l - see all bookmarks


# fix characters appearing in org files


```org
So I was storing some .org files on windows machine and making a symlink from
nixos - notes -> /mnt/c/Users/arvydas/OneDrive/Documents/GIT/notes/.

So basically stored files on Windows and used them in WSL(nixos). Did all the
commits to those files from nixos also.

One day I have opened magi and wanted to check untracked files - there were
hundreds of them, because each file had ^M character added to them. They were
invisible in the .org file, but visible in git.

Researched a bit, saw these:

- https://stackoverflow.com/questions/1822849/what-are-these-ms-that-keep-showing-up-in-my-files-in-emacs
- https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings
- https://stackoverflow.com/questions/9225599/should-git-change-the-ending-of-line-controlm-or-m-at-the-end-of-the-first-l

At first I thought it was an Emacs thing, but apparently it is Git thing. So
adding this line to my terminal once:

#+begin_src bash
  git config --global core.autocrlf input
#+end_src

Has fixed the problem. The ^M's are now ignored and I can see the actual
changes to the files.

Yay!
```


# make a table of read books in org

```org
Here is simply an example of how to generate such table.

Created in once, wanted to leave it as a reference for later.

Example below:

Simply have some headings defined, describe columns, then C-c C-c at the end of
##+BEGIN: line

#+columns: %50ITEM(Title) %author(Author) %pages(Pages){+} %8rating
#+BEGIN: columnview :hlines 1 :id global :skip-empty-rows t :indent t :match "-noexport"
| Title                                                                          | Author                   | Pages | rating  |
|--------------------------------------------------------------------------------+--------------------------+-------+---------|
| Books that I have read                                                         |                          |  6938 |         |
| \_  2021                                                                       |                          |   160 |         |
| \_    READ Esencializmas. Disciplinuotas mažiau siekimas                       | Greg McKeown             |   160 | ******  |
| \_    READ GYVENIMAS AUDROJE. Kaip išlikti sausam                              | Paulius Kovas            | audio | ******* |
| \_  2020                                                                       |                          |   736 |         |
| \_    READ The Last Anniversary                                                | Liane Moriarty           |   416 | ******* |
| \_    READ The Plague                                                          | Albert Camus             |   320 | ******* |
| \_  2019                                                                       |                          |  5374 |         |
| \_    READ The Joy of Compassion                                               | Thubten Zopa Rinpoche    |   122 | ******* |
| \_    READ The Gracious Flow Of Dharma                                         | S.N.Goenka               |    70 | ******* |
| \_    READ Discourse Summaries                                                 | S.N.Goenka               |   144 | ******* |
| \_    READ Zen in the Art of Archery                                           | Eugen Herrigel           |    92 | ******* |
| \_    READ Tao: The Watercourse Way                                            | Alan Watts               |   134 | ******  |
| \_    READ The Book of Secrets                                                 | Osho                     |  1328 | ******* |
| \_    READ Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel | Timothy Ferriss          |   240 | ******* |
| \_    READ Jitterbug Perfume                                                   | Tom Robbins              |   342 | ******* |
| \_    READ Hippie                                                              | Paulo Coelho             |   304 | ******* |
| \_    READ The Wisdom of No Escape: How to Love Yourself and Your World        | Pema Chödrön             |   208 | ******  |
| \_    READ Shantaram                                                           | Gregory David Roberts    |   936 | ******* |
| \_    READ Veronika Decides to Die                                             | Paulo Coelho             |   210 | ******* |
| \_    READ The Martian                                                         | Andy Weirauthor          |   369 | ******* |
| \_    READ Cosmos                                                              | Carl Sagan               |   432 | ******* |
| \_    READ Sapiens: A Brief History of Humankind                               | Yuval Noah Harari        |   443 | ******* |
| \_  2018                                                                       |                          |   668 |         |
| \_    READ The Little Prince                                                   | Antoine de Saint-Exupéry |    96 | ******* |
| \_    READ The Alchemist                                                       | Paulo Coelho             |   572 | ******* |
| \_      READ The Four Agreements: A Practical Guide to Personal Freedom        | Don Miguel Ruiz          |   160 | ******* |
| \_      READ Dune                                                              | Frank Herbert            |   412 | ******* |
#+END

* Books that I have read
** 2021
*** READ Esencializmas. Disciplinuotas mažiau siekimas
CLOSED: [2022-05-08 Sun 19:26]
:PROPERTIES:
:author:   Greg McKeown
:year:     2016
:pages:    160
:rating:   ******
:END:

Tomo knyga.
*** READ GYVENIMAS AUDROJE. Kaip išlikti sausam
CLOSED: [2022-05-08 Sun 19:27]
:PROPERTIES:
:author:   Paulius Kovas
:year:     -
:pages:    audio
:rating:   *******
:END:

Klausem su Julyte vaziuodami i keliones ir pan.
** 2020
*** READ The Last Anniversary
CLOSED: [2022-05-08 Sun 19:11]
:PROPERTIES:
:author:   Liane Moriarty
:year:     2005
:pages:    416
:rating:   *******
:END:

While in quarantine in Bali with Rama.
*** READ The Plague
CLOSED: [2022-05-08 Sun 19:24]
:PROPERTIES:
:author:   Albert Camus
:year:     1947
:pages:    320
:rating:   *******
:END:

** 2019
*** READ The Joy of Compassion
CLOSED: [2022-05-08 Sun 19:12]
:PROPERTIES:
:author:   Thubten Zopa Rinpoche
:year:     2006
:pages:    122
:rating:   *******
:END:

*** READ The Gracious Flow Of Dharma
CLOSED: [2022-05-08 Sun 19:10]
:PROPERTIES:
:author:   S.N.Goenka
:year:     1994
:pages:    70
:rating:   *******
:END:

Don't remember much. Vipassana times book.
*** READ Discourse Summaries
CLOSED: [2022-05-08 Sun 19:08]
:PROPERTIES:
:author:   S.N.Goenka
:year:     1987
:pages:    144
:rating:   *******
:END:

Dharmashirnga book.
*** READ Zen in the Art of Archery
CLOSED: [2022-05-08 Sun 19:07]
:PROPERTIES:
:author:   Eugen Herrigel
:year:     1948
:pages:    92
:rating:   *******
:END:

*** READ Tao: The Watercourse Way
CLOSED: [2022-05-08 Sun 19:06]
:PROPERTIES:
:author:   Alan Watts
:year:     1975
:pages:    134
:rating:   ******
:END:

Mano biciukas. Turejau paskaityt. Klausosi geriau.
*** READ The Book of Secrets
CLOSED: [2022-05-08 Sun 19:05]
:PROPERTIES:
:author:   Osho
:year:     1974
:pages:    1328
:rating:   *******
:END:

Makes you cry out of joy sometimes. Read while in a monastery in Myanmar.
*** READ Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel
CLOSED: [2022-05-08 Sun 19:04]
:PROPERTIES:
:author:   Timothy Ferriss
:year:     202
:pages:    240
:rating:   *******
:END:

Nice, perfect for Camino and travels.
*** READ Jitterbug Perfume
CLOSED: [2022-05-08 Sun 19:02]
:PROPERTIES:
:author:   Tom Robbins
:year:     1984
:pages:    342
:rating:   *******
:END:

*** READ Hippie
CLOSED: [2022-05-08 Sun 19:01]
:PROPERTIES:
:author:   Paulo Coelho
:year:     2018
:pages:    304
:rating:   *******
:END:

Dont even remember reading his. Or maybe I do.. bus, right?
*** READ The Wisdom of No Escape: How to Love Yourself and Your World
CLOSED: [2022-05-08 Sun 19:00]
:PROPERTIES:
:author:   Pema Chödrön
:year:     1991
:pages:    208
:rating:   ******
:END:

Rosa recommended while in India.

*** READ Shantaram
CLOSED: [2022-05-08 Sun 18:59]
:PROPERTIES:
:author:   Gregory David Roberts
:year:     2003
:pages:    936
:rating:   *******
:END:

Top 3 books. Read while in Myanmar monastery. India, lots of common
things.. amazingly written. Recommended to Julytes mama.

*** READ Veronika Decides to Die
CLOSED: [2022-05-08 Sun 18:53]
:PROPERTIES:
:author:   Paulo Coelho
:year:     1998
:name:     Veronika Decides to Die
:url:      https://www.goodreads.com/book/show/1431.Veronika_Decides_to_Die
:pages:    210
:rating:   *******
:END:
*** READ The Martian
CLOSED: [2022-05-08 Sun 18:22]
:PROPERTIES:
:author:   Andy Weirauthor
:year:     2011
:name:     The Martian
:url:      https://www.goodreads.com/book/show/18007564-the-martian
:pages:    369
:rating:   *******
:END:

*** READ Cosmos
CLOSED: [2022-05-08 Sun 18:20]
:PROPERTIES:
:author:   Carl Sagan
:year:     1980
:name:     Cosmos
:url:      https://www.goodreads.com/book/show/55030.Cosmos
:pages:    432
:rating:   *******
:END:

*** READ Sapiens: A Brief History of Humankind
CLOSED: [2022-05-08 Sun 18:19]
:PROPERTIES:
:author:   Yuval Noah Harari
:year:     2011
:name:     Sapiens: A Brief History of Humankind
:url:      https://www.goodreads.com/book/show/23692271-sapiens
:pages:    443
:rating:   *******
:END:

Perskaiciau eidamas marsruteli Indijos kalnuose

** 2018
*** READ The Little Prince
CLOSED: [2022-05-08 Sun 19:23]
:PROPERTIES:
:author:   Antoine de Saint-Exupéry
:year:     1943
:pages:    96
:rating:   *******
:END:

Uzauges nesuprasi.
*** READ The Alchemist
CLOSED: [2022-05-08 Sun 19:21]
:PROPERTIES:
:author:   Paulo Coelho
:year:     1988
:PAGES:    572
:rating:   *******
:END:

Top 3 book. Very relatable during my travels and camino.
**** READ The Four Agreements: A Practical Guide to Personal Freedom
CLOSED: [2022-05-08 Sun 18:56]
:PROPERTIES:
:author:   Don Miguel Ruiz
:year:     1997
:name:     name
:url:      url
:pages:    160
:rating:   *******
:END:

Helena told me about this book while in a cave in Tenerife
**** READ Dune
CLOSED: [2022-05-08 Sun 18:57]
:PROPERTIES:
:author:   Frank Herbert
:year:     1965
:pages:    412
:rating:   *******
:END:

One of the best books I have ever read. Boy, sand, lots of common
things. Seen a movie also after a few years.

```


# Emacs Tasks

```org
* Emacs [5/36]                                                        :emacs:

** TODO read THROUGH the documentation
:PROPERTIES:
:CAPTURED: [2023-12-07 Thu 17:38]
:END:


https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html
** TODO get to know to EMACS viduriai ir source files
:PROPERTIES:
:CAPTURED: [2023-12-07 Thu 17:36]
:END:

packages and so on, like the dude here
https://github.com/emacs-mirror/emacs/pull/38

simply fixing typos in the packages
** TODO What is use-package

ensure t jau yra visur.

paaiskink su :tangle no ka reiskia kai darai defer ar bind.

su defer snd pastebejau, kad jeigu neidedi i (use-package) block - tuomet
nerunina tos dalies kodo vapse. Jeigu turesi susijusiu eiluciu su tuo package -
tuomet ir ju nerunins. be careful. Kaip su keycast vakar buvo.

visados pirma dek bind, kad initializuotusi su keybindu. Taip pat ir su magit.
Ensure t nuomet reikia nuimti nuo visu? Uzdek pats rankutem.

kaip cia:
#+begin_src emacs-lisp :tangle no
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
#+end_src

** TODO kada nors pasidaryk hydra like keybinds kaip seb guy
:PROPERTIES:
:CAPTURED: [2023-12-06 Wed 02:13]
:END:

https://github.com/terlar/emacs-config

naudok general package for :general :keymaps

tuomet galesi pasidaryti atskirus :prefix for search
:prefix for agenda

:prefix for directories

ir pan

panasiai kap hydra -
https://www.youtube.com/watch?v=dBinYLNTvBo&ab_channel=EmacsElements


pasidaryk search/nav/toggle ir pan frefixus kaip seb biciukas - https://github.com/terlar/emacs-config

** TODO watch this about emacs org-mode
:PROPERTIES:
:CAPTURED: [2023-12-05 Tue 16:03]
:END:

https://www.youtube.com/watch?v=SzA2YODtgK4&ab_channel=thoughtbot

** TODO write code blocks and evaluate code in them
:PROPERTIES:
:CAPTURED: [2023-12-05 Tue 16:02]
:END:

like the guy is doing here in 15:00 https://www.youtube.com/watch?v=SzA2YODtgK4&ab_channel=thoughtbot
** TODO emacs knyga or smth read... buk kaip terlar speacas emacs
:PROPERTIES:
:CAPTURED: [2023-12-01 Fri 08:44]
:END:

** TODO try buffer completion with corfu like terlar
:PROPERTIES:
:CAPTURED: [2023-12-01 Fri 08:28]
:END:
** TODO zurnala rasyk in emacs su denote pagalba jeigu imanoma
Kaip julyte, susigaudyk mintis ir pan
** TODO [[https://bzg.fr/en/how-to-help-gnu-emacs-maintainers/][be org mode maintainer]]
:PROPERTIES:
:CAPTURED:[2023-01-26 Thu 19:40]
:END:
** TODO set custom org agenda commands to be able to filter the tasks with one button?

ofc can now filter in the agenda itself, but still, interesting

:PROPERTIES:
:CAPTURED:[2023-11-30 Thu 20:16]
:END:
** TODO check ka galima paimti is onedrive ir i denote ikelti? Kokius tai notes.. nezinau del pdf, labai dideli. I git nlb eina.
** TODO Pasidaryk raspberry pi kaip emacs client thingy to login to ssh with
** TODO Check out ghost text del emacs fieldu
** TODO add lithuanian languge pull request org-static-blog
** TODO create your own emacs theme just as github dark theme
[[https://github.com/philiparvidsson/GitHub-Theme-for-Emacs][github light color theme here]]
** TODO kaip Titas sako RSS pamegink
:PROPERTIES:
:CAPTURED:[2023-01-09 Mon 20:45]
:END:

busi tikras koderis
** TODO in the future try to read the emacs source file of a mode
:PROPERTIES:
:CAPTURED:[2023-01-10 Tue 21:07]
:END:
** TODO [[https://github.com/Crandel/home/blob/master/.config/emacs/recipes/git-rcp.el][magit-todos]]
** TODO [[https://www.youtube.com/watch?v=NocDm4zzToo&ab_channel=GavinFreeborn][learn more about lisp short intro]]
** TODO paskaityk apie [[http://www.howardism.org/Technical/Emacs/new-window-manager.html][emacs new window manager ]]
:PROPERTIES:
:Created: [2022-04-28 Thu 22:29]
:END:
** TODO watch emacs conf 2022
** TODO [[https://youtu.be/-iDJV2GPjEY?t=1261][what is emacs abbrev]]
** TODO What is exwm and emacs in it
** TODO emacs guru config https://github.com/Crandel
** TODO watch - Emacs as terminal multiplexer: Speed
https://www.youtube.com/watch?v=crHOK6XHDHc&ab_channel=SkybertHacks
** TODO watch this video
https://www.youtube.com/watch?v=LTC6SP7R1hA&ab_channel=SkybertHacks
** TODO report bug apie prepend ir [0/0] pasinulinima
:PROPERTIES:
CAPTURED: [2023-12-08 Fri 00:18]
WHERE: [[file:~/GIT/notes/somedaymaybe.org::*movies][movies]]
INSERT:
:END:

gal koki video padaryk taip pat zn su irodymais

parodyk kaip gerai, ir kaip blogai.
** CANCELLED EPIC GatherEmacsShortcuts [0/14]
*** TODO sukatekorizuok dabartines shortcuts
*** TODO org change tag in region
*** TODO org-show-todo-tree
*** TODO naujus shortcutus patogesnem uzduotim
*** TODO easier macro recording
instead of C-x ( ir c-x e
*** TODO a macro for example to record. instead of C-x ( ir c-x e
*** TODO sukatekorizuok dabartines shortcuts
*** TODO change tag for region, apply effort in agenda pressing E, sort by tag.. IZ
*** TODO org change tag in region
*** TODO org-show-todo-tree
*** TODO org agena follow mode F
:PROPERTIES:
:CAPTURED:[2023-01-03 Tue 19:40]
:END:
*** TODO 'M-o' while in 'C-x C-f' to get a lot of options!
*** TODO sort shortcuts folder into proper categories
*** TODO fix shortcut file to have all shortcuts nicely, in a table
** DONE setting up org agenda/capture templates/refile targets
CLOSED: [2023-12-08 Fri 03:03] SCHEDULED: <2023-12-07 Thu>

- [X] Capture templates
- [X] Agenda
- [X] Refile
- [X] fix archive headingu(gal kol kas nearchyvuok zinai)
- [X] fix the indentation(po visu above commitu)
- [X] transfer all the stuff from the browsers to emacs watch list

** DONE arba naudoji journal arba ne. Gali tiesiog regular denote note deti kaip journal entry
CLOSED: [2023-12-09 Sat 07:22] SCHEDULED: <2023-12-09 Sat>
:PROPERTIES:
CAPTURED: [2023-12-09 Sat 06:19]
WHERE: [[file:~/GIT/notes/tasks.org_archive]]
INSERT:
:END:

tik pridek journal tag

nes dabar noriu apie horoskopus parasyti ir nzn kur
** DONE Fix TIME of your wsl krc. Dabar yra 12:37, bet rodo, kad 00:00
CLOSED: [2023-12-09 Sat 20:10]

** DONE fix the sudo hwclock forever, create a bashrc script or cronjob
CLOSED: [2023-12-11 Mon 07:19] SCHEDULED: <2023-12-09 Sat>
:PROPERTIES:
CAPTURED: [2023-12-09 Sat 06:15]
WHERE:
INSERT:
:END:

tired of this wrong time. Wrong denote date, wrong journals, wrong notes, wrong
commits..

lets fix it once and for all and then also make a dotfiles file for it.

[[denote:20231209T093750][freshsetup]]
** TODO TABS in emacs? wtf? like browser tabs?
:PROPERTIES:
CAPTURED: [2023-12-12 Tue 06:19]
WHERE: [[file:~/GIT/dotfiles/.emacs.d/init.org::*Define a function to open a specific directory in Dired mode][Define a function to open a specific directory in Dired mode]]
INSERT:
:END:

C-x t N pvz creates a new tab. WTF dude.
** TODO paskaityk sito biciuko blog, gal rasi ka idomaus
:PROPERTIES:
CAPTURED: [2023-12-13 Wed 12:04]
WHERE: [[denote:20231129T002500][paperclip maximizer]]
INSERT:
:END:

https://ict4g.net/adolfo/notes/
** TODO write a lt langcode for org-static-blog
:PROPERTIES:
CAPTURED: [2023-12-17 Sun 19:06]
WHERE: [[file:~/.emacs.d/elpa/org-static-blog-20231006.1534/org-static-blog.el::(defcustom org-static-blog-langcode "en"]]
INSERT:
:END:
```

# Dired diff-hl

```org
* Introduction

So, everything started when I have discovered ‘diff-hl’ package. It had an
option to show differences in dired buffer. I thought okay, cool option, lets
not use neotree anymore and use dired instead.

* Body

I added a few lines to ‘diff-hl’ config to make the file changes visible in
dired buffer.

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :init (add-hook 'prog-mode-hook #'diff-hl-mode)
  (add-hook 'org-mode-hook #'diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

I then watched some videos to remind myself of dired commands and configs.

I saw a guy effortlessly jumping from one directory to another, opening a file,
opening a directory at point, opening another directory, closing dired buffer
with q and not complaining about many opened buffers after he jumped between a
few with dired.

First of all, I wanted the same behavior as ‘neotree’. I wanted to see the
current directory and its files with one keystroke. There original one C-x d
ASKS me for a directory. C-x C-d just list a directory - didn’t understand this
function. Then I discovered ‘jump-to-dir’ smth like that, so I bind that to C-x
C-d. Great, I can now open current directory and see it’s files quickly.

Next issues - I could navigate dired buffers with f - forward q - backwards.
BUT if I wanted to quit, I could not do it, because q was taken already.

Then on top of that I have discovered that after navigating through a few
directories, my buffer list gets cluttered with dired buffers of visited files.
That’s definitely a no-go, because I don’t want to accidentally open dired
buffer that is named the same as my file when I am looking for a file.

To fix BOTH of these issues I have discovered ‘dired-find-alternate-file’
command. It is bound to ‘a’ and it opens a file or directory WITHOUT creating a
separate buffer for it. Great!

Then it also somehow leaves ‘q’ unused, so I can quit dired buffer with that
keystroke. Great!

Then I rebind ‘dired-find-alternate-file’ to ‘f’, because I find it more
convenient to cycle with and I am all set!

* The final config

#+begin_src emacs-lisp
 (use-package dired
    :ensure nil                         ;no need for t, because dired is built in
    :custom ((dired-listing-switches "-agho --group-directories-first"))) ;sort directories first
  (global-set-key (kbd "C-x C-d") 'dired-jump) ;open dired buffer in current location
  (define-key dired-mode-map (kbd "f") 'dired-find-alternate-file)
;; (global-set-key (kbd "C-x d") 'dired)

  ;; a function to kill dired buffers. Kind of works. Or you can use "a"
  ;; to cycle through dired and it leaves no buffers opened
  ;; DiredReuseDirectoryBuffer - https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
  ;; KillingBuffers - https://www.emacswiki.org/emacs/KillingBuffers
  (defun kill-dired-buffers ()
    (interactive)
    (mapc (lambda (buffer)
            (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
              (kill-buffer buffer)))
          (buffer-list)))

  ;; can easily check how many buffers got opened
  (defun kill-all-dired-buffers ()
    "Kill all dired buffers."
    (interactive)
    (save-excursion
      (let ((count 0))
        (dolist (buffer (buffer-list))
          (set-buffer buffer)
          (when (equal major-mode 'dired-mode)
            (setq count (1+ count))
            (kill-buffer buffer)))
        (message "Killed %i dired buffer(s)." count))))
#+end_src

Some killing buffers commands are just extras. Was using those when I was
testing out how many opened buffers there were. But luckily I found
‘dired-find-alternate-file’ :)

```

# Why I use Denote [2023-11-25 Sat 21:18]

```org
* Why Denote
So last week I have decided to get to know to Denote package. Having lots of
free time, I realized that I do not like my notes structure. Maybe Denote will
help with that.

I can say that the best introduction to Denote is here -
https://protesilaos.com/codelog/2022-06-18-denote-demo/. By the Denote package
author himself. It is nice to use the tool that was created by the person I
"know". Also the great docs here - https://protesilaos.com/emacs/denote

* Process of transferring my life to Denote

This whole Denote setup has taken way more time and effort than I expected.
Reinstalling Emacs to a newer version, then fixing wsl - [[file:20231128T164359--wsl-glitches-in-gui-applications__wsl.org][reporting bugs to
Microsoft's wslg team]], [[file:20231211T151427--first-nixos-installation__nixos.org][remaking my linux/emacs configuration with nixos]],
[[file:20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.org][making denote run quickier]], transporting all my notes to denote style notes(is
what I am doing right now, for the last couple of days)... Okay, my notes are
quite valuable to me, so let's try to create a website out of them with Emacs.
Now I just have to figure out how which website creation method is the best for
me:
- Must use emacs, right? [[file:20231215T140448--why-build-a-website-with-emacs-and-not-with-something-else__emacs_websites.org][why build a website with emacs and not with something else]]
- Checking my previous blogs I have created with Emacs, their configs, content
- Looking for inspiration in other places - [[file:20231214T150411--inspirational-websites__emacs_websites.org][inspirational websites]]
- Try easy hugo maybe? [[file:20231215T101410--create-a-blog-with-emacs-easy-hugo__emacs_hugo_websites.org][create a blog with emacs-easy-hugo]]
- Ox_hugo maybe? [[file:20231215T203400--create-a-website-with-ox-hugo__emacs_hugo_websites.org][create a website with ox hugo]]
- Org static blog maybe? [[file:20231219T051943--build-a-website-with-emacs-and-org-static-blog__emacs_websites.org][build a website with emacs and org-static-blog]]
- Px-publish maybe? [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][Build a website with emacs and ox-publish]]
- Finally decided how I will build it - [[file:20231215T182523--building-development-notes-website-with-emacs__emacs_websites.org][building development notes website with
  Emacs]]

I of course had to write down all the steps I took into separate denote pages,
so that we work on that knowledge base you know.

Then I also have to transfer all of my notes from various places(previous
blogs, my work notes, etc..) to denote to have them all in one place,
everywhere :)

* Finally done

So to simply use Denote I had to go over many many steps as you can see :D It's
funny. Many Yaks have been shaved during this process.

#+attr_html: :width 800px
#+ATTR_ORG: :width 600
[[./media/yak-shaving.jpg]]

Overall, I am happy with the result.


* Some features not to forget.

- Rename the files(denote-rename)
- Take pdf or any other file, rename it denote style - search for it later
- remove/add keywords
- quickly create notes
- modify the font matter to your liking
- use m% to search for notes with regular expressions

#+begin_src bash
  U - unmark all selections in dired

  %m

  t - toggle the mark
  k - kill unecessary
  g - close this
  v - view file quick
  q - quit
#+end_src

- have a list of "backlinks" that link to your current note
* Silos

Denote allows me to generate blog files quick and easy. They are all in the
same structure, do not require databse. I can link between them.

Default denote dir is Documents/org, but my denote dir is ~/GIT/notes. This is
where ALL my notes used to lie. When I decided to move the programming/work
related notes to a different directory, I had to make a "silo" in denote
terms - as described in https://protesilaos.com/emacs/denote.

instead of denote looking at my default denote dir when I create and manage
denote files, I had to specify another directory. I could do that by simply
creating a =.dir-locals.el= file in my new directory and add such content to
it:

#+begin_src emacs-lisp
  ;;; Directory Local Variables.  For more information evaluate:
  ;;;
  ;;;     (info "(emacs) Directory Variables")

  ((nil . ((denote-directory . default-directory))))
#+end_src

so now when denote is launched from THAT particular folder in which there is
this dir-locals.el file, it will know that It has to create notes in that
directory and not the default directory which I have specified in my init file,
which contains all my personal files.
```


# convert denote links to org links for html export [2024-01-27 Sat 10:52]

So when making [[file:20240127T100325--2024-01-first-month-as-developer__statusupdate.org][this status update]] I have faced a problem and decided to attempt
to fix it right away.

I am using [[https://github.com/protesilaos/denote][Denote]] in emacs to take notes, so today, when writing the mentioned
status update post there was a need for me to list all the notes that were
created over the past month. So I pressed =C-c n I= command in emacs
(denote-add-links) and got a list with links to all of posts that were created
this month. Great! In emacs, I can click on that link and be directed to the
note. Great! But I know that if I try to export this .org file(denote note) to
a .html file (needed for the website you are reading now) - I will get an error
saying that it can not find a link to file.

"denote-add-links" as well as "denote-link" commands currently create links
that look like such:

#+begin_quote
[[denote:20240102T100605][Reach django project from anywhere] ]
#+end_quote

When the regular link made to the same file with built in "org-insert-link"
gives a link that looks like this:

#+begin_quote
[[file:20240102T100605--reach-django-project-from-anywhere__django.org][reach-django-project-from-anywhere] ]
#+end_quote

Denote way is not understandable for emacs html exporter, but file: link is
understandable.

So when I have a list of denote links and I have to manually convert them to
org links I do this:

I evaluate this piece of code in my scrach buffer:

#+begin_src emacs-lisp
  (defun extract-link-text-and-hyphenate ()
    (interactive)
    (when (region-active-p)
      (let ((selected-text (buffer-substring (region-beginning) (region-end))))
        (if (string-match "\\[\\[.*?\\]\\[\\(.*?\\)\\]\\]" selected-text)
            (replace-region-contents (hyphenate-link-text (match-string 1 selected-text)))
          (message "No valid org-mode link found in the selected text")))))

  (defun hyphenate-link-text (text)
    (replace-regexp-in-string " " "-" (downcase text)))

  (defun replace-region-contents (new-text)
    (delete-region (region-beginning) (region-end))
    (insert new-text))
#+end_src

Basically what it does is:
- takes the currently highlighted text
- removes brackets, etc, everything that is not the title of the denote link
- puts dashes in between each word
- down cases all letters

What I then manually do create a macro with F3
(kmacro-start-macro-or-insert-counter):

1. I mark the denote link, execute =extract-link-text-and-hyphenate= on it
2. I then mark the whole title, now it is with dashes between words
3. Then copy the whole title
4. do org-insert-link
5. file link
6. paste the title with dashes
7. it finds the link(since all of the denote notes of mine are in the same folder)

Close macro with F4(kmacro-end-or-call-macro ARG &optional NO-REPEAT)

Now press F4 on each denote link and it gets transformed to a regular org link
that org html exporter can understand.

A lot of work, but it is what it is. If I knew elisp better, perhaps I could
find a better workaround :)

# the less mess with notes the better [2023-12-24 Sun 08:22]

```org
Very happy to have finally setup the dev environment how I imagined:

- [[file:20231209T093750--freshsetup__emacs.org][freshsetup]]
- [[file:20231211T151427--first-nixos-installation__nixos.org][first nixos installation]]

Then also happy to have my notes jazz setup with a new tool - Denote:
- [[file:20231125T211812--why-i-use-denote__emacs.org][Why I use Denote]]

Then also happy to have found a way to sync notes quickly between my wsl and
onedrive and ALSO have them under version control in git.
- [[file:20231130T065309--fetch-and-pull-changes-automatically__git_wsl.org][fetch and pull changes automatically]]
- [[file:20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.org][make denote faster on wsl]]

The last part is what this post is about.

* It is just too much of hassle

Those scripts mentioned above are only on my ubuntu wsl, not on nixos(don't
know how to put scripts into .bahrc on nixos build yet), but I am using the
notes on nixos, not on ubuntu... then I have think about where and at what
stage are my notes between wsl's, then if they are on onedrive, then what about
notes at work.. dude, too much! Better go back to the old and trusted
solution - put the notes on onedrive, symlink to wsl and that's it. Yes, it
will be slower to fetch, but the headache it will save..

#+begin_src bash
  ln -s /mnt/c/Users/arvydas/OneDrive/Documents/GIT/notes/ notes
#+end_src

Thank you bye.

```

# perspective and denote conflict [2023-12-09 Sat 18:18]

```org

I just figured out =perspective-mode= and how cool is it, I can have a similar
behavior like tmux or default window as window management.

But the problem is when I create perspective frames and in those frames there
is at least one denote file. That frame does not get saved. Why? Because denote
purposefully by default renames it's buffers not to contain all the gibberish
like date when it was created, tag names and so on with this function -
=denote-rename-buffer-mode=.

Instead of such filename:

- 20231209T181842--perspective-and-denote-conflict__emacs.org

it renames it to(removes the file extension, tags, date):

- perspective and denote conflict

And when you save in perspective the name of the buffer, it gets saved as this
short version which AFTER we try to open the saved perspective - it does not
find such filename, because it simply does not exist.

Nice I am happy that I could figure this out.

Let's try to change that variable and see if it helps.

Denote docs - [[https://protesilaos.com/emacs/denote#h:3ca4db16-8f26-4d7d-b748-bac48ae32d69][10. Automatically rename Denote buffers]]

#+begin_src emacs-lisp
  (denote-rename-buffer-mode -1)
#+end_src

It did help!!! I am a magician!!

```

# make denote faster on wsl [2023-11-26 Sun 01:20]

```org
Before this change the denote notes were stored on Windows system and it would take
time for them to get fetched and opened on Emacs that runs in WSL. Each denote
command or simply opening a file would take longer than usual. This was
annoying.

So I have moved all the denote note files to WSL. Then created a script that
would copy all the note files into windows machine, onedrive folder, for them
to be synced to my onedrive cloud. This will act as a security measure in case
I forget to commit my notes to git and my machine dies. I will still have a
quite recent copy of the notes in OneDrive.


* [2023-12-24 Sun] Update

[[file:20231224T082240--the-less-mess-with-notes-the-better__denote_git_notes.org][the less mess with notes the better]]

* My question to chatgpt <2023-11-26 Sun>.

#+begin_quote
I have lots of .org files, I currently store them on my window's
machine, onedrive folder. So they are backed up to the cloud.

I want to use those notes in a text editor called emacs. But when I
ntry to reach the notes over wsl, I must go this path to reach them on
windows - /mnt/c/user/xxx/org-notes to

this loads the notes very slowly compared if they were on wsl
directly.

How can I BOTH have the files load quickly, same as if they were on my
wsl AND have those files in google cloud?
#+end_quote

* Solution not worth considering

I heard that you can create a symlink from windows to wsl. I tried doing that:

#+begin_src bash
  # open cmd as admin
  cd /d C:\Users\arvydas\OneDrive\Documents
  mklink /D HELLO \\wsl.localhost\Ubuntu\home\arvy\.emacs.d\EMACS_DALYKAI
#+end_src

That worked, symlink was created, but then I started to think what would happen
if I delete WSL. All my notes will also be deleted. Meaning that the symlink
will point to nowhere. Not good. Ditched this idea.

* Temporary working solution

Create a symbolic link within WSL that points directly to your
OneDrive folder:

#+begin_src bash
  ln -s /mnt/c/Users/xxx/org-notes /path/in/WSL/org-notes
#+end_src

This will enable a little bit faster access to your OneDrive-stored
.org files within WSL.

Yes, I think it is faster. Notes are created and opened faster.

* Permanent working solution

What I will do is create a shell script that will automatically run on each wsl
launch. It will copy the files from wsl notes dir to OneDrive notes dir.

commit - 2ba4f55

** Option 1 - use ~cp~ command to copy

Shell script lies in:

#+begin_src bash
  ~/.emacs.d/MISC/copy_to_onedrive.sh
#+end_src

Can use a simple copy method to copy the files:

- no progress
- no exclusion of directories
- takes everything, not only what has changed
- can not show stats of the run

#+begin_src bash
  cp -r GIT/notes/* /mnt/c/Users/arvydas/OneDrive/Documents/notes/
#+end_src

** Option 2(final) - Use ~rsync~ command

Or can use ~Rsycn~ - it performs synchronization between source and
destination. It copies only the differences between the source and destination
files. It checks file timestamps and sizes to determine which files need to be
updated

#+begin_src bash
  rsync -ah --progress --delete --exclude='.git' GIT/notes/ /mnt/c/Users/arvydas/OneDrive/Documents/notes/ --stats
#+end_src

Then make this file executable:

#+begin_src bash
  chmod +x .emacs.d/MISC/copy_to_onedrive.sh
#+end_src

** Update ~.bashrc~ file to copy automatically

Add the script execution to your .bashrc

#+begin_src bash
  echo '~/.emacs.d/MISC/copy_to_onedrive.sh' >> ~/.bashrc
#+end_src

Now the script will be run with ~source .bashrc~ AKA with each launch of wsl.
Which is maybe more than we need, but good anyway.

Whenever I launch wsl I will be able to see the progress of the rsynch copying
procedure.

```

# never ending task and notes capture/refile/archive question [2024-01-14 Sun 15:48]

```org
I make too many different configurations from time to time.

Probably because I don't use emacs for this often. So when I create a system
that I like and not use it for 2-3 months, I come to this question again, then
decide to rewrite it. Then I don't use it for some more months.. then rewrite
again...

I am too tired of this. I want one system that works both when I am at home and
at work. Will write some notes here HOW WHEN and WHY I chose what I chose.

* [2024-01-14 Sun]

- =MANY FILES OR ONE BIG FILE=
  one file per project. projname-agenda.org

  agenda tag is the key(with denote)

  I can then do something like this:

#+begin_src emacs-lisp
    (setq org-agenda-files
      (directory-files-recursively "~/GIT/notes/" ".*agenda.*\\.org$"))
#+end_src

- =ARCHIVING=

  archive inside. internal archiving. Can view in agenda, can
  preview quickly inside the file. For some reason tags are applied on each
  headline, but w/e for now.

- =REFILLING=
  Refilling to agenda files only
- =CAPTURING=
  Capture to notes/tasks files of a subject(rights, shipping in my case)
- =AGENDA=
  Use to remember what tasks are in progress, etc.
- =DOCUMENTATION=
  Write proper docs in a separate denote file, snippets taken from notes.

```

# connect to a remote server over emacs and tramp [2024-01-02 Tue 09:24]

```org
Official docs - https://wikemacs.org/wiki/TRAMP

If  you need to edit files as sudo - info how is in the docs above.

First of all, try to connect to the remote machine over shell, eshell or vterm like so:

#+begin_src bash
  ssh username@remotehost
#+end_src

You will get prompted for a password. Enter it and you should be able to connect.

Then open emacs and then let's try to open a file remotely, use the =C-x C-f=

#+begin_src bash
  /ssh:username@remotehost:
  # now  you will get prompted for a password (don't forget : at the end of the remotehost name!!)
#+end_src

=.authinfo= in your home dir will contain your credentials.

=tramp= file in your =.emacs.d= will contain your connection history.

```

# combining all blogs in one [2023-12-27 Wed 11:17]

```org
Currently, [2023-12-27 Wed] everything works as it should.

- one place to store denotes devnotes - "org" folder
- one place to store build scripts - "build" folder
- one place to store exported html files - "html" folder

A few annoying things about this way of working:

- html files are in the same repo, I never need them when looking for files,
  but they are always in a way. During simple or rg searches.
- Also when I make a change to an org file and re-export - bunch of html files
  get changed too(id's of headings), so I when I want to commit a change of an
  org file - I have to make sure I don't accidentally commit html files as well
- This repo does not contain other blog attempts and their org
  files(arvydas.dev, gvazdikelis, emacs_blog, etc). I want everything to be in
  one place

Way's to fix/improve:

1. Create a new branch for "devnotes" repo called
   =2023_12_27_before_all_blog_merge=, this will hold the current
   [2023-12-27 Wed] state of the devnotes repo
2. move all the files from
   https://github.com/arvydasg/arvydasg.github.io_blog_content to devnotes,
   delete the repo
3. move all the content from https://github.com/arvydasg/codeacademy to
   devnotes, delete the repo
4. move certain/needed(if something can be shows that I worked on, idk) files
   from https://github.com/arvydasg/pkc_wiki/tree/master/CONTENT/pkc, don't
   delete the repo
5. reuse https://github.com/arvydasg/arvydasg.github.io repo to store all html
   in one place(first make sure that )
6. review all the commits and write the steps you took here

```

# using org-download package in WSL [2023-12-19 Tue 09:09]

```org
[2023-12-19 Tue], when I was setting up [[file:20231215T182523--building-development-notes-website-with-emacs__emacs_websites.org][building development notes website with
Emacs]], I wanted to use =org-download= package and it's functionalities. I
later realized, that as long as I am on WSL, this won't work out of the box for
me.

Simply documenting what I have found below.

Package itself - https://github.com/abo-abo/org-download
Great demo by the author of the package -
https://www.youtube.com/watch?v=dAojpHR-6Uo&ab_channel=abo-abo

since I am on wsl and not ubuntu, but nixos, there seems not to be a software
that can take those screenshots. The tool for that is mentioned in
=org-download-screenshot-method=. Will try to install =scrot=.

After installing =scrot= and =xclicp= on my nixos WSL distro, I still was not
able to make the package work.

This could be a potential workaround -
https://github.com/abo-abo/org-download/issues/178.

I think I will live without it.

```

# Attempts to Blog [2022-06-19 Sun 20:04]

```org
* Intro

* Body

** First attempts

I was trying to do the same with my journey to programming. It started a bit
more than a year ago and since them I was trying to create personal
blog/website.

- First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
- Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
- Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]

* Current setup

[2022-04-17 Sk] I discovered a way to make a website with emacs. [[https://systemcrafters.net/publishing-websites-with-org-mode/][Systemcrafters
channel]] has a lot of great material covering just that.

I knew that this is the right way for me to blog, because:

- I can use my emacs shortcuts to write and edit
- I don’t need to reformat text to make it readable for something like CKEditor
  in python [[https://github.com/arvydasg/emacs_blog][django]]. I can just straight up use emacs source blocks, headings,
  text blocks and so on and everything just works,
- I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to Github and
  the changes will be visible immediately in my website,

* Summary

For me, this is the fastest way to blog. I will be using it in the future and
hopefully improve my workflow as I go along.

P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why - [[https://github.com/arvydasg/emacs_blog][here]].

```

# Create a Blog with Emacs [2023-01-21 Sat 12:40]

```org
* Intro

If you are using Emacs and org mode as much as me, you must have come
up to org-publish feature that allows you to convert org files to html files.

When you have a lot of org files - means you can have a lot of html
files. When you have a lot of html files - you can have your own
static website ;)

* Create Emacs blog the "System Crafters" way
Best description in a video format is [[https://www.youtube.com/watch?v=AfkrzFodoNw&t=1612s&ab_channel=SystemCrafters][here]]. To later publish it
automaticall,y video [[https://www.youtube.com/watch?v=za99DwdZEyg&t=996s&ab_channel=SystemCrafters][here]].
** Choose a directory

You will place your org files inside content/ directory.

#+begin_src emacs-lisp
/home/arvydas/Dropbox/src/sites/my-org-site/content/
#+end_src

** Creating the build script
*** build-site.el
Inside of this directory:

#+begin_src emacs-lisp
/home/arvydas/Dropbox/src/sites/my-org-site/
#+end_src

Create a file called ~build-site.el~ with this inside of it.

#+begin_src emacs-lisp
  ;; Load the publishing system
  (require 'ox-publish)

  (message "Build complete!")

  ;; Define the publishing project
  (setq org-publish-project-alist
        (list
         (list "my-org-site"
               :recursive t
               :base-directory "./content"
               :publishing-directory "./public"
               :publishing-function 'org-html-publish-to-html)))

  ;; Generate the site output
  (org-publish-all t)
#+end_src

This configures the /org-publish-project-alist/ variable to define a
publishing project for our site. Read the documentation of this
variable using M-x describe-variable for a lot more information!

*** build.sh

We also need a shell script that can run our Emacs Lisp script. We'll call that build.sh:

#+begin_src emacs-lisp
#!/bin/sh
emacs -Q --script build-site.el
#+end_src

Don't forget to use ~chmod +x build.sh~ to make the script executable!

NOTE: If you're on Windows, you can create a ~build.cmd~ file that
invokes Emacs the same way.

The -Q parameter prevents Emacs from loading your own Emacs
configuration which will help ensure that this same script can be
executed cleanly on other machines once we get ready to start
publishing this site.

Create one org file, in the content dir, run the shell script, see the
html in public folder, open it in the browser.

** Improving the HTML output

There are a few things about the page we just looked at that I'd like
to change to make the output look a bit cleaner:

- Section numbers
- Author name
- Publish timestamp
- Validate link

Luckily the publish system is very customizable so I'll show you how
we can disable a few things in the project configuration to get a
better result.

#+begin_src emacs-lisp
  ;; Define the publishing project
  (setq org-publish-project-alist
        (list
         (list "org-site:main"
               :recursive t
               :base-directory "./content"
               :publishing-function 'org-html-publish-to-html
               :publishing-directory "./public"
               :with-author nil           ;; Don't include author name
               :with-creator t            ;; Include Emacs and Org versions in footer
               :with-toc t                ;; Include a table of contents
               :section-numbers nil       ;; Don't include section numbers
               :time-stamp-file nil)))    ;; Don't include time stamp in file
#+end_src
** Improving the page styling
At this point have a decent basic output for our website, but what if we want to make it look a little bit nicer?

By setting a few more variables, we can use a nice stylesheet to give our site a more polished look:

#+begin_src emacs-lisp
  ;; Customize the HTML output
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-html-head "<link rel=\"stylesheet\" href=\"simple.min.css\" />" ;place your own stylesheet in public folder
        org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />" ;use cdn stylesheet
        )
#+end_src
** Generating pages with code blocks
So far we've been looking at a very simple example page that doesn't really have much on it. What happens when we try to generate a more elaborate Org file containing code blocks?

Let's try it out with another file, a version of my literate Emacs configuration called Emacs.org!

If you're generating a site that features code blocks like a coding blog or a literate Emacs configuration, you'll probably see an error like this when you generate the site:


Cannot fontify source block (htmlize.el >= 1.34 required)

To resolve this issue, you will need to install the htmlize package from MELPA. We can automate the process of installing this package by adding the following snippet to our build-site.el file:

#+begin_src emacs-lisp
;; Set the package installation directory so that packages aren't stored in the
;; ~/.emacs.d/elpa path.
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Install dependencies
(package-install 'htmlize)
#+end_src

In this snippet, we load Emacs' package manager and configure the package-user-dir to be a sub-directory of our project folder. This allows you to install packages for the script without mixing them up with the packages of your personal Emacs configuration!

The next thing we do is add MELPA to the package archive list and refresh the package archive so that htmlize can be found. Finally, we call package-install to install it!

In a future video I'll show you how to convert your Emacs color theme to a CSS file that you can use to colorize source blocks with exactly the same colors used in the theme!

** Linking between pages
One last thing I want to show you is how you can create links between
pages on your site. Let's open up index.org and create a link to the
Emacs.org file.

Inside index.org, we can press ~C-c C-l (org-insert-link)~, enter the
path of the Org file we want to link to (./Emacs.org), press Enter,
then enter the text for the link ("My Emacs configuration").

When you generate the site again, you should be able to follow the
link between pages because Org's publishing system will convert the
link to the proper output extension.

It will also complain when a linked file can't be found!


#+begin_src emacs-lisp
Debugger entered--Lisp error: (user-error "Unable to resolve link: \"Emacs2.org\"")
#+end_src

** The final build script

Here is the final form of our ~build-site.el~ script:


#+begin_src emacs-lisp
;; Set the package installation directory so that packages aren't stored in the
;; ~/.emacs.d/elpa path.
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Install dependencies
(package-install 'htmlize)

;; Load the publishing system
(require 'ox-publish)

;; Customize the HTML output
(setq org-html-validation-link nil            ;; Don't show validation link
      org-html-head-include-scripts nil       ;; Use our own scripts
      org-html-head-include-default-style nil ;; Use our own styles
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />")

;; Define the publishing project
(setq org-publish-project-alist
      (list
       (list "org-site:main"
             :recursive t
             :base-directory "./content"
             :publishing-function 'org-html-publish-to-html
             :publishing-directory "./public"
             :with-author nil           ;; Don't include author name
             :with-creator t            ;; Include Emacs and Org versions in footer
             :with-toc t                ;; Include a table of contents
             :section-numbers nil       ;; Don't include section numbers
             :time-stamp-file nil)))    ;; Don't include time stamp in file

;; Generate the site output
(org-publish-all t)

(message "Build complete!")

#+end_src

* Create Emacs blog with "org-static-blog" package
"[[https://github.com/bastibe/org-static-blog][org-static-blog]]" is a package written by [[https://github.com/bastibe][Bastian Bechtold]] is a static site
generator. I believe it started [[https://bastibe.de/2013-11-13-blogging-with-emacs.html][here]].

My current Emacs configuration for "[[https://github.com/arvydasg/.emacs.d/blob/master/recipes/org-static-blog.el][org-static-blog]]" is here.

Install the plugin, you get all it's functions. They are
clearly documented within the plugin, it's super easy to read the
instructions and understand what it does. One command
~org-static-blog-create-new-post~ creates new post, then
~org-static-blog-publish~ converts all your .org files to html files in
your chosen location. You push them to github and that's all! Your
site is live.

I have just discovered it [2023-01-21 Sat], but already like it.
Mainly because it is a simple program that I am able to wrap my head
around and I know it will remain simple and I will be able to use for
a long time in the future, it won't go anywhere. I can also make some
pull requests to it by adding Lithuanian language and some features.
It automatically generates archive file where all the posts are
stored, it also automatically generates tag's file and then in the
browser I can filter my posts.. It is easy to generate header and
footer. Yes, I like it more than the first method.

If you would like to add an image to your org file, try this:

#+begin_src emacs-lisp
#+attr_html: :width 1200px
#+ATTR_ORG: :width 600
[[./media/org-static-blog.png]]
#+end_src

#+attr_html: :width 1200px
#+ATTR_ORG: :width 600
[[./media/org-static-blog.png]]

lightbox.js that you can see in this page source helps with the lightbox effect that you get when clicking on
the image.

* Conclusion
Now the only thing is left - I have to blog. :) I am thinking why
don't I whenever learning a new thing write such little summary about
it OR imagine that I am teaching someone this topic. "The best way to
learn it is to teach it" they say.

```

# seq keep error message in emacs [2023-11-25 Sat 22:09]

https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package

should install emacs 29 bla

# why I am using emacs [2023-11-26 Sun 00:30]

```org
- Most flexible and configurable editor in the multiverse.
- It's free, was and [[https://www.gnu.org/philosophy/free-sw.html][forever will be]].
- Complete built-in documentation
- Packaging system, the community that creates them is great
- Keyboard shortcuts similar to Linux shell's. Can't write anything without
  those shortcuts now.
- A wide range of functionality beyond text/code editing, including a
  [[https://www.gnu.org/software/emacs/manual/org.html][project planner]], [[https://www.gnu.org/software/emacs/manual/gnus.html][mail
  and news reader]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html][debugger interface]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html][calendar]], [[https://www.gnu.org/savannah-checkouts/gnu/emacs/erc.html][IRC client]], and [[https://www.gnu.org/savannah-checkouts/gnu/emacs/further-information.html][more]].
- According to Zygimantas, most developers WILL be running linux at work, so
  don't fall for Windows OS.
- Can create FOREVER notes, simple org files, text, so notes will forever be
  readable(unlike other formats, storing them on cloud, etc.).
- Torstein - The drive you have to always improve your tools and workflow will
  take you and your career great places
- I guess in some older companies where security (of all kinds) is an actual
  issue, they mandate that everyone works through a VM, hosted remotely. And
  when whatever you’re using to visually connect to the VM lags, and the VM
  itself is pretty slow, and you have 10 people near you connecting to the same
  router, it becomes a ridiculous pain to use an IDE.
- [[https://www.reddit.com/r/emacs/comments/z9u6c1/my_experience_with_emacs_and_the_eventual/?utm_source=share&utm_medium=android_app&utm_name=androidcss&utm_term=1&utm_content=share_button][emacs till the day I die due to magit]]
- think about using emacs + angular, bent jau prisirasyk cia kaip option
- With Emacs and being able to change/modify/tweak things to be like I want,
  create the functionality that I want, this exact mentality is the main reason
  why I became a programmer.
- [[https://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life][How emacs changed my life]]

```

# manually install emacs package from git [2023-11-26 Sun 00:32]

Useful when you can not reach elpa/melpa repositories, for example - at work.

video showcasing that -
https://www.youtube.com/watch?v=at_fACZ_o9Q&ab_channel=TimothyUnkert


# login to another server over ssh [2023-11-26 Sun 00:33]

```org
First you probably must generate an .ssh key. Or have one in on your machine.
Can do that similarly like described here - [[file:20231214T060558--authenticate-to-git-with-ssh__git_ssh.org][authenticate to git with ssh]].

When ssh keys are setup, then over emacs do:

#+begin_src bash
  /ssh:remote-user@remote.box:/path/to/my/file
#+end_src

will be prompted for password n stuff.

```


# why certain shortcuts dont work in emacs terminal [2023-11-26 Sun 00:33]

https://emacs.stackexchange.com/questions/75347/problem-with-key-bindings-in-emacs-in-the-terminal-on-wsl/75349#75349

You’re using Emacs inside of a terminal, and terminals have a much more limited
set of keystrokes that they can communicate. This is because historically
terminals simply had fewer keys on their keyboards, and because not all
combinations of keys were thought to be useful.

Some terminal emulators, starting with XTerm, have added new escape sequences
that are capable of communicating the full range of key combinations possible
on modern keyboards. Emacs will automatically recognize these escape sequences,
so if your terminal emulator supports them then you have a solution. If it
doesn’t perhaps you can use XTerm instead.


# images in org files [2023-11-26 Sun 00:37]

```org
* Display images in org files

To display inline images in org buffer after you have placed some, click =C-c
C-x C-v=.

* If you have the image with you

To insert an image, do C-u then C-c C-l. easy. if you add a
description, it won't show the image, but rather the description with
an indication of a link.

[2023-12-14 Thu] or what I use now is yasnippet that looks like such, that is
the yasnippet template:

#+begin_src emacs-lisp
  #+attr_html: :width 800px
  #+ATTR_ORG: :width 600
  [[./static/images/.png]]
#+end_src

Don't forget to modify the path of the image and it will display it.

This - #+attr_html: - tells how wide the image should look *in the browser*.
This - +ATTR_ORG - tells how wide the image should look *in the org file inside
emacs* when you do =org-toggle-inline-images=.

* Resizing images in emacs and html

To resize an image, add this to your init:

#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

Then, above EACH and EVERY image add such lines:

#+begin_src org
#+attr_html: :width 900px
#+ATTR_ORG: :width 600
[[file:images/smutifruti.png]]
#+end_src

and now after C-c C-x C-v - images will display nicely, as per your request.
Beautiful.

And then make sure to add this to your css so the image would not spill out of
the container borders:

#+begin_src css
  img {
    max-width: 100%;
    height: auto;
  }
#+end_src

* If you don't have an image and want to insert a screenshot

Use ~org-download~ package. After you install it, run =M-x
org-download-screenshot=.

Then make sure in init file you have specified the directory. If not, it will
save images in your current org file directory. It is good if you want to
export the file to html later and then maybe even send to someone.

Important - [[file:20231219T090909--using-org-download-package-in-wsl__emacs_nixos_windows_wsl.org][using org-download package in WSL]]

```


# org roam

```org
Quite old notes about using org-roam package in emacs.

1. [[https://youtu.be/AyhPmypHDEw][Getting Started with Org Roam - Build a Second Brain in Emacs]] [[https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/][shownotes]]
2. [[https://youtu.be/YxgA5z2R08I][Capturing Notes Efficiently in Emacs with Org Roam]] [[https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/][shownotes]]
3. [[https://youtu.be/3-sLBaJAtew][Org Roam: The Best Way to Keep a Journal in Emacs]] [[https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/][shownotes]]
4. [[https://youtu.be/CUkuyW6hr18][5 Org Roam Hacks for Better Productivity in Emacs]] [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][shownotes]]

[[https://coredumped.dev/2021/05/26/taking-org-roam-everywhere-with-logseq/][Taking org-roam everywhere with logseq]]

KEY - linking roam notes with id's in html -
https://www.reddit.com/r/emacs/comments/q82zci/how_to_include_the_id_links_into_your_orgroam/


I have found org-roam to be nice to use as I remember, but file naming was
a little strange + I remember I did not like he idea of having a database to
store all the links between notes. Also I was not really using the full
potential and functionalities(graphs, backlinks, etc) that it offered.

That is why, when the idea of having a "second-brain" started to creep towards
me, [[file:20231125T211812--why-i-use-denote__emacs.org][I choose denote]].
```


# emacs init time

```org
* emacs init time
[[https://www.youtube.com/watch?v=9i_9hse_Y08&t=492s][How to Cut Emacs Start Up Time in Half! - Emacs From Scratch #12]]

* use-package-report

[2022-04-10 Sun] allows to invoke and use use-package-report
#+begin_src emacs-lisp
(setq use-package-compute-statistics t)
#+end_src

* Show startup time on emacs-load
#+BEGIN_SRC emacs-lisp
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

* Message
Add such message in the package and then look at *messages* buffer on startup
to find which one has failed.

#+begin_src emacs-lisp
  :config
  (message "Org-roam got loaded!")
#+end_src

```

# emacs in daemon mode

```org

[[https://www.youtube.com/watch?v=ZjCRxAMPdNc&ab_channel=SystemCrafters][link ofc]]

alot of the times config can get big and take 3-5 or even 1-sec to
load.

the most important commands:
- emacs --deamon
- OR
- emacs --fg-deamon (only run foreground process)
- ~C-h v server-socket-dir~ (shows where the server is running)
- ls /run/user/1000/emacs
- ~emacsclient -c -n~ (no wait)
- ~emacsclient -e "(kill-emacs)"~ kill the daemon server if you want to
  reload the congif
```

# emacs colors in tmux

```org
Jeigu kartais noresi pasileisti emacs in tmux (shudas, kol kas neradau kaip
padaryti, kad galeciau close all headers in .org file), tai noresi tikriausiai
ir spalvas atitaikyti. By default jeigu per tmux paleidi =emacs -nw=, tuomet
buna shudinos spalvos.

Reikia sekti sita tutorial -
https://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux201

basically this:

#+begin_src bash
  ~$ which tmux
  tmux: aliased to TERM=xterm-256color tmux
  # and in in my .tmux.conf:

  set -g default-terminal "screen-256color"
  # Aliasing tmux to "tmux -2" should also do the trick.

  #And don't forget to restart your tmux server: (see @mast3r answer)
  tmux kill-server && tmux201
#+end_src

```

# install emacs on windows 

```org
Not sure if installation 1 or installation 2 is the good one, so when you will
try to install it once again - summarize the instructions to a proper document.

* Installation 1:

- [ ] Great [[https://www.youtube.com/watch?v=0OLfdiZ_b0k&ab_channel=LigerLearn][video here]] showcasing the steps below
- [ ] install emacs from [[http://ftp.gnu.org/gnu/emacs/windows/][here]]
- [ ] go to C:\Program Files\Emacs, find emacs, take the run icon
- [ ] launch emacs, press C-x C-f, then press ~/ - shows you the
  directory emacs thinks of as 'HOME'
- [ ] create init.el file in here, Save-as init.el - then the file is
  with correct file extension and not .txt
- [ ] add basic emacs config, such as:
  press C-c C-, to make the source block
  #+begin_src emacs-lisp
    (setq inhibit-startup-message t
          initial-scratch-message "Hello world"
          cursor-type 'bar) (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src
- [ ] Restart emacs and check if it works (it should)
- [ ] install fonts on windows machine
  https://github.com/domtronn/all-the-icons.el/tree/master/fonts go
  here, download fonts one by one and install
- [ ] install python on windows
  https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store
- [ ] windows + linux configas
  #+begin_src emacs-lisp
    (cond ((eq system-type 'windows-nt)
           (defun display-startup-echo-area-message ()
             (message "Writing from windows"))
           )
          ((eq system-type 'gnu/linux)
           (defun display-startup-echo-area-message ()
             (message "Writing from linux"))
           ))
  #+end_src

* Installation 2:

some useful stuff
https://www.gnu.org/software/emacs/manual/html_mono/efaq-w32.html#Location-of-init-file

install emacs from here -
http://ftp.task.gda.pl/pub/gnu/emacs/windows/emacs-27/

set home path variable like the guy in this tut -
https://lucidmanager.org/productivity/emacs-windows/

do - setx HOME %USERPROFILE% in windows powershell

then you will see that HOME variable has appeared under - settings ->
system -> advanced system settings -> environment variables

then open emacs and do C-h v, write user-emacs-directory and enter. It
will create an .emacs.d directory under HOME path.

It works, right? okay, now you remember how to set the path.

now go back to environment variables and make it like so -
C:\Users\Arvydas\emacs

You will place the .emacs file in that folder and also .emacs.d folder
will appear in it. great.

put some variables in .emacs and confirm that emacs got modified

(menu-bar-mode -1) ; Disable the menu bar (tool-bar-mode -1) ; Disable
the toolbar (tooltip-mode -1) ; Disable tooltips (set-fringe-mode 10)
; Give some breathing room

worked for me so far.

Time to link it with Dropbox.

add this to the .emacs file. right under use-package installation

(org-babel-load-file (expand-file-name
"C:\\Users\\Arvydas\\Dropbox\\temp_emacs\\myinit.org"))

imesk theme i .emacs.d, jokiu folderiu. turetu veikti

```


# swap ctrl with capslock

```org
Doing this mainly for emacs.

I guess this in linux:
#+BEGIN_SRC bash
   /usr/bin/setxkbmap -option "ctrl:swapcaps"
#+END_SRC

and I use powertoys windows app for windows to accomplish the same.

```

# byte compile emacs packages

```org

[[https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs][what is it]]

It was useful for me when I was installing 28 emacs on ubuntu and then lost
syntax highlighting in js2 mode. I then found [[https://github.com/mooz/js2-mode/issues/72#issuecomment-15176816][this]] fix. did M-: and wrote this
to fix it:

#+begin_src elisp
  ;; dont forget the exact file path
  (byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/js2-mode-20130307.2012/") 0 t)
#+end_src

```

# org agenda

```org
* tips
# have a next action for each project IF its active. If not active - no
# states(project, someday) ir pan. Jeigu projektas someday - duok state
# someday.

# Projects putting all the projects here, easy to see how many I have and If I
# am woking on them or not I have a headline "* projects" with individual
# projects as second-level headlines, sorted (manually and approximately) from
# the most-important to the least important. To mark "next action" items I just
# use the TODO keyword.

# Todo all tasks here that don't belong to any of the project as of yet. Apart
# from the "*projects" headline, I also have a "*todo" headline, where I put
# all the todo items which are not clearly assignable to a specific project (or
# when I simply don't have the time for finding the appropriate project to put
# them under). Once every while, I go through the "*todo" hierachy and move
# some items into the appropriate projects. Sometimes groups of entries in the
# "*todo" hierarchy evolve to the point of becoming a separate project by
# themselves. This might look like a mess, but actually it allows me to spend
# more time doing things than organizing them.

* advanced agenda

- advanced searching - https://orgmode.org/worg/org-tutorials/advanced-searching.html
- special agenda views - https://orgmode.org/manual/Special-Agenda-Views.html
- agenda- commands https://orgmode.org/manual/Agenda-Commands.html

* [[https://orgmode.org/worg/doc.html][org agenda filtering]]
was useful when needed to filter by effor. use this- _

```

# org clock report

```org
Was useful in obelsdumas times when I wanted to track how much time I used on
building and working on the project. Padaryti isklotines su laiku kiek dirbau
prie ko ir pan.

Link to the docs - https://orgmode.org/manual/The-clock-table.html

* examples

[2022-04-10 Sun] Daily org-diary file report BY TAG
#+begin_src emacs-lisp
  #+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100! :match "emacs"
#+end_src

[2022-04-10 Sun] Daily org-diary file report without tag, show all tasks
#+begin_src emacs-lisp
  #+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100!
#+end_src

```

# run sql from emacs

```org
If on Ubuntu:

#+begin_src bash
  sudo apt-get install sqlite3
#+end_src

- have an sqlite db ready(possibly from django)
- create an org file and follow [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html][these instructions]] to connect to the db
- I also have this in my emacs config

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages (quote ((emacs-lisp . t)
                                     (sqlite . t)
                                     (R . t)
                                     (python . t))))
#+end_src

```

# javascript in emacs

```org
* dap mode debugger for javacript

docs - https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript

- download zip file from [[https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript][here]].
- create two folders ~/.emacs.d/.extension/vscode
- only extract it like described [[https://github.com/emacs-lsp/dap-mode/issues/554#issuecomment-1171256089][here]].
- jeigu sako jog file location not found (buffer chrome browser
  stderr) - perkelk parsisiustus files ten kur jis iesko
- M-x dap-chrome-setup (while in .js window)
- M-x dap-debug and choose THE SAME url as live server - f.x react runs
  on this http://localhost:3000/
- Or choose file - M-x dap-debug and choose file option
- then it works boyyyy
- dap-debug-last to repeat the last debug command, no need to
  respecify stuff
- Download the React DevTools for a better development experience:
  https://reactjs.org/link/react-devtools - components and profiler
  thingies will apper in developer toolbar
- right click on debug  sessions to delete all old sessions
- double click on the session to navigate there
- dap-switch-stack-frame - same jump, just without a mouse
- dap-disconnect - stops debugging
- dap-debug-recent - see all the recent sessions
- dap-ui-sessions to jump to sessions and then D to delete sessions
- dap-debug-edit-template
- and ofc some thoughts from [[https://www.youtube.com/watch?v=0bilcQVSlbM&ab_channel=SystemCrafters][System Crafters]].

* run js files in emacs

have node installed

can do node testfile.js
ir kaskart sita runinant - pakalkuluos tau dalykus. Aisku su python
patogiau, gali line by line evaluate, bet vis sis tas.

arba gali naudoti javascript repl(M-x run-js), bus toks pat dalykas kaip ir
browserio consoleje - tik naudok sita[[https://github.com/redguardtoo/js-comint][ js-comint]] package

js-run
js-send-region

** javascript and emacs

today installed javascript syntax highlighting for emacs - js2-mode.
Love it. Here are some more ideas:

https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org
** skewer mode - live javascipt in browser
- run skewer in javascript file
- c-c c-k load javascipt buffer to skewer
- ctrl+alt+x to reflect changes in browser
** live js editing in emacs with skewer mode

1. open a js file
2. Enable JS2-mode (a dependency of skewer)
3. Enable skewer-mode
4. M-xrun-skewer (a browser opens, go back to myskewer.js)
5. open buffer called *http* to check if skewer is running, refresh
   browser page to confirm
6. Type alert("hello"); and hit C-xC-e at the end of that line
7. Go back to the browser.
8. put in THIS (below) head tag - try to reload index.html window in browser - *http*
   should reflect that
   #+begin_src html
     <script src="http://localhost:8080/skewer"></script>
   #+end_src
9. load whole buffer if something

   realiai cia geriausias example -
   https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode

   bet still man nepatinka, neloadina modules...

** emacs live javascript editing lsp mode
- pirma properly install node
- basically sitas video - https://www.youtube.com/watch?v=E-NAM9U5JYE&ab_channel=SystemCrafters
- install lsp
- install needed lsp-language server M-x lsp-install-server(ts-ls in
  javascript case)
p- write lsp in opened js buffer - choose location
- lsp works. autocompletion, suggestion (m-x completion-at-point) if
  it does not
- REFERENCE FIND - C-c l g r - find by reference(show in other files) (with evil mode
  jump back with c-o)
- DEFINITION FIND - C-c l g g - go to definition!!!
- RENAME - C-c l r r
- green underline - lightbulb to fix the error (flymake enabled) (let
  un = undefined;)
- lsp format buffer (other packages can do a better job)
- lsp-ui-workspace-symbol - nusoks i definition, nebutinai ant jos
  hoverint - kazkoks sudas
- lsp-ivy-workspace-symbol - nusoks i definition, gali is uzpakalio
***  traukti fn name - megins surasti vistiek. Labai pravartu

```

# emacs hooks explanation

Amazing tutorial here at 1:13:40 -
https://www.youtube.com/watch?v=gfZDwYeBlO4&t=2637s All of this is done in
scratch buffer.

First, lets find what kind of function we want to add our code to. Let's say
=org-clock-in=. When I do org-clock-in command, I want my piece of code to run.
Okay. Let's find the "org-clock-in" source code. Press C-h k - this will ask us
to input a command. We input the command we are curious about. It is
"org-clock-in" command, which is C-c C-x C-i. As we write that command and
press enter, we get the following result:

C-c C-x TAB runs the command org-clock-in (found in org-mode-map), which is an
interactive autoloaded compiled Lisp function in ‘org-clock.el’.

Aha! Function in 'org-clock.el'. Okay, we click on that and it leads us to the
source code of "org-clock-in". We look for a hook function in there. We do C-s
to find work, find the "org-clock-in-hook" function and now we are ready to
write our little piece of code, since we know a hook for it exists.

And that would be the little piece of code. We are adding a hook, and after
lambda inputting our function. Great.

#+begin_src emacs-lisp
  (add-hook 'org-clock-in-hook '(lambda () (message "this works")))
#+end_src

We then evaluate that function by C-c C-e with our cursor at the last ) and
then we can go to an .org file and call "org-clock-in" function and watch our
message bar. The message will show up there.

# python development in emacs

```org
* [2023-12-22 Fri] nixos at work

Kind of complicated procedure because of - ~exited abnormally with code 1~
error. As described here - https://github.com/jorgenschaefer/elpy/issues/1936

Solution:

- add python3 in nixos home config
- install elpy on emacs
- pyvenv-create and name the environment "duona". It should appear in
  =/home/s2753g/.virtualenvs/duona=
- configure where emacs will look like for a BASE(duona) virtualenv. That
  virtualenv must have all the python packages like jedi, autopep, yapf, black,
  flake8, usual stuff that you see when you do =elpy-config=
- Add the line below to your elpy configuration in emacs
- (setq elpy-rpc-virtualenv-path "/home/s2753g/.virtualenvs/duona/")
- Now if you restart emacs, then do =elpy-config=, you will be asked if it
  should install the dependencies(basically all of the packages mentioned
  above). if you say yes - then it will say the procedure failed, because it
  can not download packages over work network
- We then must =source /home/s2753g/.virtualenvs/duona= to activate our newly
  created virtualenv
- pip install jedi autopep8 yapf black flake8  --index-url https://secret.xxxx.se/artifactory/api/pypi/pypi/simple
- Then restart emacs and try to do =elpy-config= again
- You will see that all the packages are recognized and the error will no longer be thrown

Now when we open any python file in emacs, emacs will open up with the correct
virtual environment that will have all the necessary packages for us not to get errors.

If we want to create additional environments, we can do so by
"pyvenv-create/workon", BUT they will not override the RPC environment, it will
always stay there as a base for us not to get errors and not to uztersti our
new project venv with all those yapf, flake8 and etc pakges. Great!!!

* Dependencies

Simple python dev environment that does the job(without lsp)

Skybert paaiskinimas
https://www.youtube.com/watch?v=JmmTUIahB1U&ab_channel=SkybertHacks

Maybe dont even touch LSP FOR PYTHON.

simply create environment with pyvenv-create
then pyvenv-workon
then install the the needed packages that are described in elpy-config
pip3 install jedi autopep8 yapf black flake8 ipython importmagic

ipython - IPython is generally considered more feature-rich and
provides a more interactive and convenient experience. If you prefer
advanced features like tab completion, syntax highlighting, and
command history, IPython may be a better choice.

set this: basically is what you get when doing ctrl+ret on a piece of
code. looks more fancy, indeed, that python3 interpreter.

#+begin_src bash
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+end_src

importmagic - Importmagic helps simplify the process by automatically analyzing
your code and suggesting or making changes to import statements based on the
modules and symbols used in your code. It can detect missing imports, remove
unused imports, and reorder existing imports according to a specified style or
convention.

if want auto-completion, warnings, navigation, IDE features like
rename - get eglot like here -
https://www.youtube.com/watch?v=JmmTUIahB1U&ab_channel=SkybertHacks

and that's it, lets get rolling.

have syntax highlights, corrections, completions, jumping to definitions etc.
very nice and simple.

LSP will be using for JS development and etc.

---------------------------------------------
LSP setup below(did not work)

+ LSP package and config
+ sudo apt install python3 (for python development)
+ apt install python3.10-venv (for python development)
+ Install a python language server - https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/
+ berods dariau pip install "python-lsp-server[all]"
+ paskui sitas sudo apt install pipenv
+ create a python file
+ create a virtual environment with python3 -m venv <nameOfEnv> (or
  can do with pyvenv-create, then it will create virtual environment
  in ~/.virtualenvs folder)
+ Open emacs, do pyvenv-activate when you are inside the folder
  containing <nameOfEnv>
+ open terminal in emacs (shell, eshell, ansi-term, term) and do which
  python. You should see the <nameOfEnv> location. If you want to
  disable that env, do pyvenv-deactivate. Terminal will still have the
  <nameOfEnv> active, so might need to restart the terminal as well.
+ But then you will still get some sentinel error 1 errors
+ Lets see elpy config

---------------------------------------------------
more elpy docs:

  [2022-02-20 Sk] TUT: "Elpy" - various python modes for easier python
  programming. Installs various other packages as well. A few videos to help
  install elpy and customize.

  https://www.youtube.com/watch?v=0kuCeS-mfyc,
  https://www.youtube.com/watch?v=mflvdXKyA_g
  https://elpy.readthedocs.io/en/latest/index.html

  When using tab auto completion, click f1 and get the explanation in another
  buffer. Company doccumentation window. and of course more amazing [[https://gist.github.com/mahyaret/a64d209d482fc0f5eca707f12ccce146][shortcuts]]
  Here.

  If documentation suggestions get annoying - turn off eldoc mode

  INSTALL:
  1. sudo pip install elpy rope jedi
  1. add export PATH=$PATH:~/.local/bin to your .bashrc file and reload
     Emacs.
  2. should get a message asking something about RPC, click yes.
  3. then make sure jedi is installed in your system. others use flake8,
     others use jedi.. idk. zamansky and the guy from he tutorial video
     use jedi.
  4. do M-x elpy-config to see the config
  5. check your .emacs.d folder. if there is one called "elpy" and it is
     empty or something, do M-x elpy-rpc-restart. Folders will appear,
     packages will install. Then do elpy-config
  6. pip install flake8 - get to see more syntax checks. M-x elpy-config
     to confirm its installed

* Commands

lsp-doctor
lsp-install server

* virtual env

~/.virtualenvs/ - cia guli visos virtual env

- ijunk emacs ir iskart daryk pyvenv workon
- pip list(ar viso kompo info ziuri ar tik env environment)
- pyvenv-workon - create a virtual env in a folder
- pip list
- elpy config - susiinstallink visus packages

```

# ivy new file creation completion candidates bug

```org
* ivy new file creation completion candidates bug

In Emacs with Ivy, when you try to create a new file with a name that partially
matches an existing file, Ivy will prioritize the existing file as a completion
candidate. If you want to create a new file with a similar name, you can use
the following workaround:

Start typing the name of the new file you want to create, for example, "api".

When Ivy presents the completion options and highlights the existing file
"lifeapi", press the C-M-j key combination (which stands for
ivy-immediate-done). This key combination allows you to bypass the completion
and directly accept the current input as the selected option.

After pressing C-M-j, Ivy will accept the current input and create a new file
with the name you specified ("api" in this case), instead of choosing the
existing "lifeapi" file.

By using C-M-j, you can bypass the completion and proceed with creating the new
file with the desired name, even if it partially matches an existing file.

Note: The keybinding C-M-j is the default binding for ivy-immediate-done, but
it may vary depending on your Emacs configuration. If C-M-j doesn't work for
you, you can check your Ivy keybindings or customize the keybinding for
ivy-immediate-done in your Emacs configuration.

```

# emacs setup on digitalocean with dropbox

* Emacs setup on digitalocean

psx - lAba$!1o
simply using password, ssh is acting up with me

[[https://www.youtube.com/watch?v=98YuVDj6g8Q&ab_channel=RibaLinux][install GUI]]
[[https://www.youtube.com/watch?v=r3t61OP5mWs&ab_channel=TonyTeachesTech][how to conenct to ssh into digitaloacean]]
[[https://www.digitalocean.com/community/questions/dropbox-works-with-digitalocean-droplets][dropbox on digital ocean droplet vm]]

** launch dropbox

- little tut [[https://www.dropbox.com/install-linux][install headless dropbox]]
- [[https://www.dropbox.com/install-linux][use this link to download dropbox]]
- then click on the link in command line to to link to your dropbox.
  Paste link in the browser
- download python3
- download the python script
- python3 dropbox.py status - runs, good
- [[https://www.youtube.com/watch?v=mA08E59-zo8&ab_channel=ChrisTitusTech][create a symlink to this python script]]
  - echo $PATH
  - go to /usr/local/bin
  - create a symlink with FULL PATHNAME ln -s ~/scripts/dropbox.py
  - sudo chmod 744 dropbox.py - make the script executable!
  - try to do dropbox.py in the current folder
  - try to do it in other folders
  - python3 dropbox.py status


# consult package benefits

Tu juokauji gal. Koks amazing package.. :) Apie ji suzinojau tik 2023.12.

Bemegindamas irasti denote radau sita package.

Cia intro video -
https://www.youtube.com/watch?v=HwBHBwYgs2g&ab_channel=EmacsElements

- Galiu paturbinti C-x b, kad rodytu man buffer contenta. Nice.
- =consult-grep= - find whateveryouwant in a current PROJECT(git project).
- =consul-man= - look for ANYTHING in LINUX MANUAL PAGE. WTF.
- =consult-info= - find ANYTHING in your installed packages manuals...
- =consult-bookmark= - set a bookmark in a location and then easily jump to it
  later... almost like my org find agenda file.
- =consult-theme= - change and try themes on the fly. wtf.
- =consult-flymake=???????????????????? Labadiena
- =consult-goto-line= - cool
- =consult-outline/consult-org-headings= - look through ORG file outlines.
  Through all the headings. Thats cool when in a large document! That's like a
  table of contents for you.
- =consult-org-agenda=??? must try that out
- =consult-project-buffer= - look only through opened files in the project.
- =M-s= is a big one!
- =M-s e= for example shows you all the search functions you previously typed
  for. Nice.
- =M-g i= - look for functions inside the file!!!
- =C-u M-s g= - first specify the directory and then do the search. Great,
  works like regular RG.

bookmarks is another cool thing.. can set them and then later jump to them with
c-x b and pressing m then SPACE and you will have a list of bookmarks!!


# freshsetup

```org
After creating a new [[file:20231209T080431--moving-emacsd-into-dotfiles-repo__emacs.org][dotfiles repo]] - I realized there is a need to set up
everything automatically on the new machine IF the user so desires.

For that I have created a script called "freshsetup.sh" in dotfiles directory.
When it is launched, it does everything I need.

Everyting regarding =freshsetup= topic(tag):

- [[file:20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.org][Make denote faster on wsl]]
- [[file:20231130T065309--fetch-and-pull-changes-automatically__git_wsl.org][fetch and pull automatically]]
- [[file:20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.org][wsl clock is out of sync]]

All of the steps above are described for when using an Ubuntu distro on wsl on
windows. [[file:20231211T151427--first-nixos-installation__nixos.org][But If I am using nixos]]... stuff will change. :) More on that later.

```

# inspirational websites


* Websites made with Emacs and org-mode
- chatgpt-shell creator - https://xenodium.com/
- built with [[https://github.com/bastibe/org-static-blog?tab=readme-ov-file#other-org-static-blog-blogs][org-static-blog]]
- https://www.draketo.de/
- Docs - [[https://orgmode.org/worg/org-blog-wiki.html][Blogs and Wikis with Org]]
- https://nicolas.petton.fr/blog/blogging-with-org-mode.html
- https://ogbe.net/
- https://elis.nu/
- https://bastibe.de/
- https://writepermission.com/
- https://config.daviwil.com/
- https://opensource.com/article/20/3/blog-emacs
- https://psachin.gitlab.io/
- https://magnus.therning.org/index.html (org-static-blog)
- oh hugo sites - https://ox-hugo.scripter.co/doc/examples/
- My UI inspiration - https://taingram.org/blog/org-mode-blog.html
- https://justin.abrah.ms/
- https://ddavis.io/

* Other
- https://intuitiveexplanations.com/
- https://sulyak.info/
- https://www.jwz.org/hacks/
- Artsy - https://kathie.io/
- https://motherfuckingwebsite.com/
- https://drewdevault.com/
- https://agnessa.pp.ru/archive.html
- https://sourcehut.org/consultancy/
- https://www.jarmalavicius.lt/
- status update inspiration - https://bitfehler.srht.site/
- https://bastibe.de/projects.html
- [[https://braindump.jethro.dev/][org-roam creator]]
- https://outofambit.format.com/
- [[https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html#orgb5773b9][this guy is org pro]]
- [[https://orgmode.org/worg/org-web.html][webpages made with org]]
- [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][original tut making sites with ORG not roam]]
- crazy site with nodes - https://hugocisneros.com/notes/
- org roam creator website - https://braindump.jethro.dev/
- crazy - https://anagora.org/index


# using emacs together with vscode

```org
Don't remember where it is from, but I quote everything what is written below:

#+begin_quote
I use Emacs for writing prose and general computing.

But, with respect to programming, I now use both Emacs and VSCode *at the same
time for the same files/projects*. (Although predominantly Emacs).

Some months ago, I started working professionally on a Typescript/Angular
project. And my co-workers, of course, use VSCode.

Initially, I kept using Emacs. After a while, seeing the several ide features
(go to definition, show documentation, etc.) that my colleagues were using, I
decided to give VSCode a serious try and I used it to write Typescript/Angular
for a whole month or so.

After that, I tried to see whether I could get similar functionalities in
Emacs. I tried both LSP Mode and Eglot. After some fighting, I had a quite
usable LSP Mode with the ide features I wanted. Not as polished as VSCode, but
totally usable. (Eglot was very nice, but I wanted to try ESLint and it looks
like with Eglot, atm, you cannot have multiple LSP servers running for the same
buffer.)

Instead of going back to Emacs 100%, I decided to try a hybrid approach, which
has been very pleasant so far. I use emacs most of the time, but when I feel
that VSCode can offer some additional help I turn to it and then go back to
Emacs. To make the process smooth I wrote some lines of elisp that make VSCode
open the same file I am currently editing, at the same line and the same
column. I have it bound to C-Caps (Actually it's C-Escape, because I have
Escape remapped to Caps systemwise). When I want, then, I hit a key, VSCode
appears, with the cursor placed exactly where Emacs cursor was, I do what I
want to do, save if necessary, and switch back to Emacs. I usually keep VSCode
already open in the same project, to allow things to be faster. Here is the
elisp:
#+end_quote

#+begin_src emacs-lisp
  (defun gp/vscode-current-buffer-file-at-point ()
    (interactive)
    (start-process-shell-command "code"
                                 nil
                                 (concat "code --goto "
                                         (buffer-file-name)
                                         ":"
                                         (number-to-string (1+ (current-line))) ;; +1 who knows why
                                         ":"
                                         (number-to-string (current-column)))))

  (define-key global-map (kbd "C-<escape>") 'gp/vscode-current-buffer-file-at-point)
#+end_src

#+begin_quote
I would also like to able to open Emacs from VSCode, remaining in the same
file, same line and column, too. Does anyone know how to do that? I couldn't be
bothered, so far...

Assuming that Emacs is better than VSCode at certain things (say, text-editing,
keyboard-macros, extensibility on the fly) and VSCode is better than Emacs (at
least, non-relevantly extended Emacs) at other things (say, code
navigation/visualization and certain code-completions), using both at the same
time is, I think, an approach that deserves some thought.
#+end_quote

```

# create a blog with emacs-easy-hugo

Here is how you create a blog simply with Hugo - [[file:20231128T133020--create-a-blog-with-hugo__hugo_websites.org][example]]. Unless you like to
write outside Emacs and you like wiring in plain Markdown - go ahead and create
a blog with hugo.

If you want to use Emacs, write in .org syntax AND publish your blog HUGO
STYLE, then there is a package for you -
https://github.com/masasam/emacs-easy-hugo. Heard about it here -
https://youtu.be/7s8cQ2cOnl8?si=NaOv-2uyv74PmZo6&t=1708

And here -
https://gtpedrosa.github.io/blog/using-org-mode-and-ox-hugo-to-replace-markdown-in-hugo-workflow/

Have not tried it myself yet(yes, might seem strange, will I might do that in
the future, now simply keeping this as a reference for myself later.
[2023-12-15 Fri] and I am quite happy with my fresh out of the over devnotes
page(the one you are on now.)), I don't really want another dependency managing
my LIFE LONG notes. If it's just for a simple blog that you want to spin up on
the spot, then probably that could work.

https://github.com/kaushalmodi/ox-hugo?tab=readme-ov-file


# why build a website with emacs and not with something else

I tried creating personal blog/website the following ways:

 - First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
 - Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
 - Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]
 - Emacs blog - [[https://github.com/arvydasg/emacs_blog][example]]
 - PKC wiki - [[https://github.com/arvydasg/pkc_wiki][example]]
 - PKC afk - [[https://github.com/arvydasg/PKC_AFK/blob/main/AFK/testamentas/afk.html][example]]
 - Emacs and built in [[https://orgmode.org/manual/HTML-Export.html][HTML exporting feature]](export one page at a time) =C-c C-e=
 - Emacs and built in [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][org-publish-project]], [[https://github.com/arvydasg/org-publish-project-blog][personal example]] =C-c C-e P p=, [[https://taingram.org/blog/org-mode-blog.html][good intro tutorial]]
 - Emacs and [[https://github.com/bastibe/org-static-blog][org-static-blog package]], [[https://github.com/arvydasg/org-static-blog][personal example]]
 - [2023-12-15 Fri] Had my [[https://github.com/arvydasg/devnotes][devnotes website]] 90% built([[https://github.com/arvydasg/devnotes/tree/baaee96445935c4d985990561ebc062054d980bf][link to commit]]) with
   =org-static-blog=, and then found out about ox-hugo from [[https://youtu.be/7s8cQ2cOnl8?si=Msps0EMgyY0cJYba&t=1804][here]]. Tried to
   create a blog with it, example
 - Then found out about [[https://gtpedrosa.github.io/blog/using-org-mode-and-ox-hugo-to-replace-markdown-in-hugo-workflow/][Emacs and hugo]].. [[https://ox-hugo.scripter.co/][ox hugo]] and [[https://github.com/masasam/emacs-easy-hugo][emacs-easy-hugo]].
 - [[https://github.com/emacs-love/weblorg][Weblorg]] - have not tried it
 - There is also [[https://github.com/novoid/lazyblorg][lazyborg]], for writing blogs. But it seems quite complex.
 - Also you can [[https://github.com/org2blog/org2blog][export your org files to wordpress]]. Have not tried.

Creating personal website/blog with Emacs is the right way for me, because:

- I can use Emacs shortcuts to write and edit text
- I don’t need to reformat text to make it readable for something like [[file:20231215T055820--add-ckeditor-into-django-app__django.org][CKEditor]]
  in python [[https://github.com/arvydasg/emacs_blog][django]] I can just straight up use emacs source blocks, headings,
  text blocks and so on and everything just works,
- I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to Github and
  the changes will be visible live immediately.

For me, this is the fastest, most enjoyable, bulletproof, independent way to
blog. I don't want to depend on Wordpress, packages installs/updates/pricing,
having to deploy the site somewhere in certain file types.. now its simple
html/css. Can be hosted anywhere/forever.

You can find some inspirational websites build with org mode [[file:20231214T150411--inspirational-websites__emacs_websites.org][here]].


# building development notes website with Emacs

```org

* Research
** Why build a website for development notes anyway

I have a lot of notes. Over a few systems(at home, at work, under descriptions
of various projects).

So I wanted to gather everything in one place and somehow link them together.
It is also nice if I can share that with others. Also, as of [2023-12-16 Sat],
having everything about you/your way of working, etc written in one place, is a
perfect for AI systems to grab. All in one place, no need to scrape the whole
Internet. So the AI will for sure know how I like to work and my weak
spots(what I usually write here is what I just learned or don't want to
forget).

Also, of my notes are in .org files written in emacs, so of course my website
will also be written in Emacs

There are also many [[file:20231214T150411--inspirational-websites__emacs_websites.org][inspirational websites]] that look nice, are clean and
simple, but not necessarily do the purpose of "development notes storage".
Unless maybe this one - http://tips.defun.work/, which is also my initial
inspiration.

Have your devnotes reachable anywhere + be able to share them with others(in a
readable html format in a form of a blog). I am in.

** Why use emacs for it

[[file:20231215T140448--why-build-a-website-with-emacs-and-not-with-something-else__emacs_websites.org][Why build a website with emacs and not with something else]]

** Choosing an Emacs tool to build such website

Emacs has both built in and external packages that help you to generate .html
files from .org note files.

Some of them are:

- org-export-dispatcher(export one file at a time) [[https://github.com/arvydasg/codeacademy][Codeacademy example]]
- ox-publish(alist, export all pages of a project) ([[https://github.com/arvydasg/org-publish-project-blog][ox-publish]], [[https://github.com/arvydasg/emacs_blog/tree/master][emacs blog]],
  [[https://github.com/arvydasg/PKC_AFK/blob/main/AFK/src/pkcwiki/pkc-mano-build-site.el][pkcwiki]], [[https://github.com/arvydasg/pkc_wiki][pkcwiki2]], [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][my notes about ox-publish]])
- [[file:20231215T101410--create-a-blog-with-emacs-easy-hugo__emacs_hugo_websites.org][create a blog with emacs-easy-hugo]]
- [[file:20231215T203400--create-a-website-with-ox-hugo__emacs_hugo_websites.org][create a website with ox hugo]]
- org-static-blog, [[https://github.com/arvydasg/org-static-blog][example]]

** ox-publish VS org-static-blog

At first([2023-12-15 Fri]) I was thinking to write the website with
=org-static-blog=, almost had the blog setup and ready, converted around 50
pages to html already, displayed them under my domain. But then kept seeing
some features that ox-publish has and org-static-blog does not. Thought okay,
let's rethink that. Asked ChatGPT for help:

#+begin_quote
The choice between using the default ox-publish functionality in Org Mode or
the org-static-blog package to create your Emacs website depends on your
specific requirements and preferences. Let's explore both options:

*ox-publish in Org Mode*:

=Pros=:

Flexibility: ox-publish is part of Org Mode and provides considerable
flexibility in customizing your website. You can define various publishing
options, including different output formats and configurations.

Integration: It seamlessly integrates with Org Mode, making it easy to manage
content directly within Emacs.

Customization: Allows extensive customization using Emacs Lisp, enabling you to
tailor your website to your preferences.

=Cons=:

Steep Learning Curve: Setting up and configuring ox-publish might have a
learning curve, especially if you're new to Emacs Lisp and detailed
configuration.

*org-static-blog Package*:

=Pros=:

Simplicity: org-static-blog is designed specifically for creating simple blogs
or websites using Org Mode. It's relatively straightforward to set up and use,
making it ideal if you want a quick solution.

Minimal Configuration: It requires minimal configuration, making it accessible
for beginners.

Focused Purpose: Primarily built for blogs, it might suit your needs if you're
looking for a straightforward blogging platform within Emacs.

=Cons=:

Limited Features: It might lack certain advanced features or customization
options compared to ox-publish, especially if you need more complex
functionality.

Less Flexible: As it's tailored for static blogs, if your website needs evolve
beyond blogging, you might face limitations.

*Decision Factors*:

Complexity vs. Simplicity: Consider how complex or simple you want your website
setup to be.

Customization Needs: Evaluate how much flexibility and customization options
you require for your website.

Future Growth: Consider whether your website's needs might expand beyond a blog
and if you need features beyond what a blogging-centric package provides.

Familiarity with Emacs Lisp: Assess your comfort level with Emacs Lisp, as
ox-publish might require more familiarity.

*Recommendation*:

If you prioritize simplicity, quick setup, and your website's focus is
primarily a blog, org-static-blog could be a good starting point.

If you foresee needing extensive customization, flexibility, or plan for
features beyond a blog, investing time in learning and using ox-publish might
be more beneficial in the long run.

Experiment with both to understand their functionalities and how they align
with your specific website goals. You can start with org-static-blog for a
quick setup and later explore ox-publish for more intricate customization and
flexibility if needed.
#+end_quote

These were my thoughts AFTER I have read the ChatGPT response:

#+begin_quote

Of course after reading this I leaned toward =ox-publish= instead of
org-static-blog. True, I have noticed that it lacks configuration options and
is kind of restraining. I read other people's tutorials on how they use
ox-publish and all the settings they have and I can not try to reuse them with
org-static-blog. Not nice..

Also there is this issue that I am facing today(re renders each post). -
https://github.com/bastibe/org-static-blog/issues/126

I just hope that tag feature works in ox-publish(it should) - then I am all
good. Let's dive in.
#+end_quote

[2023-12-16 Sat] Unfortunately, the tags don't work in ox-publish way of making
a website, so I will have to stick with org-static-blog. Not complaining. It
will force me to read thought the source code more often and and see how I can
use pieces of ox-publish in org-static-blog configuration.

[2023-12-19 Tue] The issue I have mentioned above still bugs me. I can use tags in my website,
BUT I can not compile it from the comfortable place of a custom script(instead
of having the config in my main config), it is not native Emacs, stuff is built
on top of it.. I once again decided to switch my mind and build my website with
built in tools - [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][Build a website with emacs and ox-publish]]. I will have ALL the
features of org mode and standard publishing tools, exports will be clean, I
will also be able to have multiple configs for each blog/website and. I will
simply not have the tags.. which I will build on top by myself with the
inspiration of =org-static-blog=(someday in the future). The notes will not be
rendered into html that often, they won't be categorized by tags, but that's
not a big deal. Primary audience for these notes is still - me. I need to be
able to search through them and find the information in them. If it's not as
easy to do that on the web - so be it. I will work on that later.

* Implementation
** Get to know to =ox-publish=

First things first of course:

- Publishing Org-mode files to HTML - https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
- HTML specific export settings - https://orgmode.org/manual/HTML-Export.html#HTML-export
- My personal notes about building websites with =ox-publish= - [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][Build a website
  with emacs and ox-publish]]
- I recommend to get to know to the source code if you like:
  #+begin_src bash
    /org/ox-html.el.gz
    /org/ox-publish.el.gz
  #+end_src
- =C-c C-e #= (org-export-dispatch) plus "template" - ALL possible in-file options
- =org-html-preamble-format= some useful %a %c %T functions

** Installation
*** Install the package

It is already installed with Emacs by default.

*** Decide where to place the configuration

Ox-publish configuration might get large if you start modifying the head,
preamble, postamble.. Also if you have multiple blogs/websites that you want to
publish this way, you need to have two separate configurations.

Eventually you realize that you can't store multiple configurations in your
emacs config file.

So the solution to this is to create a "build" folder and in it have such
files:

#+begin_src bash
devnotes/build/
├── build.sh
└── build-site.el
#+end_src

build.sh should be made to be executable =chmo o+x build.sh= and it's contents
are:
#+begin_src bash
  #!/bin/sh
  emacs -Q --script build-site.el
#+end_src

and =build-site.el= content would contain your ox-publish configuration(we will
remove the configuration from our emacs config and place it in this file with a
couple of additions).

That's it. Now when we will run the bash script (=./build.sh=), it will fetch
the dependencies into the /build directory. It will then do the html conversion
from org files as you have specified and at the end it will print out "Build
complete!"

** Creating .org files to be rendered

You can simply create a .org file and then render it or:

*** Creating new notes with Denote

I am using Denote package, so I can use it's functionality to create a new
entry. Here are some [[file:20231125T212326--denote-features__emacs.org][denote features]].

I use Denote for my personal note taking, now I will also use it for
development note taking. Win win.

*** Creating a HTML page with my .emacs configuration

Simply made a symlink to my .org configuration file and it renders it together
with the rest of the .org files.

#+begin_src bash
   [nixos@nixos:~/GIT/devnotes/build]$ ln -s ../../dotfiles/.emacs.d/init.org init.org
#+end_src

UNFORTUNATELY - if you will chose to deploy to github pages, it will not
understand the symlink, the build will fail with such message:

#+begin_quote
Error: No such file or directory @ rb_check_realpath_internal - /github/workspace/org/init.org
#+end_quote

So I ditched this idea of having a symlink to my init.org. IF I will ever host
this site on another platform - I might try this workaround again.

*** You can also include other content from other files!

Like such - https://orgmode.org/manual/Include-Files.html

I have done this to include recent posts into index.org page.

*** Adding date to post title in sitemap

Inspiration here - https://taingram.org/blog/org-mode-blog.html

We can customize the entry format with a =sitemap-format-entry= function. In my
case I wanted to show the date inline with the blog post listings:

#+begin_src emacs-lisp
  (defun ag/org-sitemap-date-entry-format (entry style project)
    "Format ENTRY in org-publish PROJECT Sitemap format ENTRY ENTRY STYLE format that includes date."
    (let ((filename (org-publish-find-title entry project)))
      (if (= (length filename) 0)
          (format "*%s*" entry)
        (format "{{{timestamp(%s)}}} [[file:%s][%s]]"
                (format-time-string "%Y-%m-%d"
                                    (org-publish-find-date entry project))
                entry
                filename))))
#+end_src

Notice above we insert an [[https://orgmode.org/manual/Macro-Replacement.html][Org macro]] called timestamp, it is defined as follows:

#+begin_src emacs-lisp
  (setq org-export-global-macros
        '(("timestamp" . "@@html:<span class=\"timestamp\">[$1]</span>@@")))
#+end_src

We then also must inform =org-static-project-alist= about this change by using
our custom function in:

#+begin_src emacs-lisp
  :sitemap-format-entry ag/org-sitemap-date-entry-format
#+end_src

Re-render your .org files.

This macro adds some HTML around the timestamp for CSS styling, it has to be
done as a macro as otherwise Org escapes the HTML tags. The results are:

#+INCLUDE: "sitemap.org" :lines "-6"

** Linking

As of [2023-12-17 Sun] denote links do not work with exporting to html. Talked
with Prod about it, there is no fix for it now. So what I do now is I create
file links(C-c C-l file: <and your filename>) instead of denote links, these do
work. Also, if you get a link wrong and it is not possible to render it, the
compilation of html pages will break. That's good, because by checking the logs
you will see the broken link and can fix it. If you don't want the compilation
to stop, you can add this in your config:

#+begin_src emacs-lisp
  (setq org-export-with-broken-links 'mark)
#+end_src

You will simply see this in your html page(I prefer to know that there are
broken links during the html compilation, so I don't put the code above in my config).

#+begin_quote
[BROKEN LINK: denote:20231125T212326]
#+end_quote

Naming the links:

Example taken from here - https://orgmode.org/manual/Links-in-HTML-export.html

#+begin_src org
#+ATTR_HTML: :title The Org mode website :style color:red;
[[https://orgmode.org]]
#+end_src

** Previewing the generated site

Now that we have a few .org file notes in our directory and we have exported
them into html, we can preview them. Open the .html file and it will open in
the browser.

*** Preview the html file in the browser
If the file on my wsl lies here:

file://wsl.localhost/NixOS/home/nixos/GIT/devnotes/html/index.html, I would
open the whole html directory instead of a single file
(file://wsl.localhost/NixOS/home/nixos/GIT/devnotes/html/) to preview the
contents of it in the browser. This allows me to quickly open the files that I
want and see what has changed.

how to implement - here
https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/

*** Preview with simple-httpd
Or you can use =simple-httpd=. It's a package that can host your files as a
website on your local machine so that you can pull it up in your browser.

You can install simple-httpd from MELPA using M-x package-install or by putting
the following snippet in your Emacs configuration if you have use-package
installed and MELPA configured as a package source(install it globally in your
emacs config, not in build-site.el file):

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

Now you can run M-x httpd-serve-directory. It will prompt you for a directory
to serve from within Emacs.

Select the path of your public/ directory and then open your browser to
http://localhost:8080 to see the preview of your site! Set httpd-port to change
the default port if necessary.

Any time you regenerate the site files, you can just reload the page to see the
result of changes you made! (if you need to do a refresh, then it's the same as
opening in the browser...). That's why I don't bother with simple-httpd.

** CSS support in HTML export

Official docs for css support in HTML export - https://orgmode.org/manual/CSS-support.html

There are a few options when it comes to custom CSS on your website generated
with Emacs.

*** Use the default styles from ox-html

You have to do nothing, =ox-html= - =org-html-style-default= got you covered.
And it looks pretty good already by default.

But you can do like I did, went to =org-html-style-default= and copied the CSS
from there, placed in my own stylesheet. I can customize the look myself now a
little. Don't have to rewrite everything - just the parts that I want.

Also it's good to have the default styles as a reference close to me rather
than somewhere deep in the emacs docs.

*** Add custom classes to blocks of text/code

https://orgmode.org/manual/HTML-doctypes.html

*** import custom css
Default html export engine already has us covered with basic css, you can
enable/disable it like so:

#+begin_src emacs-lisp
  :html-head-include-default-style t/nil
#+end_src

But you might want to change the default css. Best bet is to do something like
this:

#+begin_src emacs-lisp
  :html-head "<link rel=\"stylesheet\" href=\"../static/style.css\" type=\"text/css\"/>"
#+end_src

Basically whatever you put in =style.css= now will end up in every html page of
yours. We can add any information you like there. But for now I am concerned
about css and favicon. This will link to my own style.css file, but you can
also use CDN's or bootstrap or whatever else.

Use your own config from another website/blog for example:

#+begin_src emacs-lisp
  :html-head-extra "<link rel=\"stylesheet\" href=\"https://arvydas.dev/static/style.css\" type=\"text/css\"/>"
#+end_src

*** org-html-themes
ORRR last thing that you can try when it comes to styling your website, try
using one of these, [[https://github.com/fniessen/org-html-themes][org-html-themes]].

You can point to one of these themes like such, by placing this code at the top
of your.org file:
#+begin_src org :tangle no
  #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-NAME.setup
#+end_src

Or if you have downloaded the code(more future proof solution), add such line
at the top of your .org file.
#+begin_src org :tangle no
  #+SETUPFILE: PATH/TO/GIT/REPO/org/theme-NAME-local.setup
#+end_src

Of course we can also modify our =setq org-static-blog-page-header= to contain
the =org-html-themes=, but I won't do that this time since I know I will be
using my own custom stylesheet.

*** Note to self

Some css examples here(built with ox-publish though) -
https://github.com/arvydasg/emacs_blog/blob/master/css/style.css
** Javascript support in HTML export

Official docs - https://orgmode.org/manual/JavaScript-support.html

Add the .js files the same way as you would add .css file.

** Images in HTML export

*** Display images

Official docs - https://orgmode.org/manual/Images-in-HTML-export.html
My docs - [[file:20231126T003746--images-in-org-files__emacs.org][images in org files]]

*** One option is to add images as plain html

But then you can not change the size of it in lightbox.

#+BEGIN_EXPORT html
<figure>
  <img src="./media/Screenshot 2023-11-17 163344 - very quaint.png" alt="1.png" width="300px">
</figure>
#+END_EXPORT

*** Another option is to include a link to a file(the usual way)

To toggle the images(show/hide), use =org-toggle-inline-images=.

#+attr_html: :width 1200px
#+ATTR_ORG: :width 600
[[./media/water.jpg]]

Okay, so no now we know that we can create a yasnippet for this(I have mine
bound to =img=) and then I can drop images wherever.

*** Org download package for inserting images in org files

Optional, does not really work if in WSL - [[file:20231219T090909--using-org-download-package-in-wsl__emacs_windows_wsl.org][using org download package in WSL]]

*** Add a lightbox effect on the images

Follow - [[file:20231219T091704--add-a-lightbox-effect-for-images-in-html__javascript_websites.org][add a lightbox effect for images in html]]

** Preamble(nav) and postamble(footer)

Docs about them -  https://orgmode.org/manual/HTML-preamble-and-postamble.html

Postamble - https://taingram.org/blog/org-mode-blog.html
Postamble - nice footer and more? -
https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html

Check other [[file:20231214T150411--inspirational-websites__emacs_websites.org][inspirational websites]] that are build with Emacs for some
inspiration.

Then simply modify - :html-preamble and :html-postamble in your config.

** Publishing

*** Free method with github
First, Github pages - [[file:20231212T123552--deploy-a-static-website-with-github-pages__git_websites.org][deploy a static website with github pages]]

Second, custom domain name - [[file:20231214T094426--setup-custom-domain-for-github-pages__git_websites.org][setup custom domain for github pages]]

*** Possibly non-free with a server(have not tried)

Also possible to server your html files over apache. And then simply push your
them over tramp with rsync - https://taingram.org/blog/org-mode-blog.html

*** Automatically publish your pages?(have not tried)

Automatically like so - https://ravi.pro/blog/blogging-with-emacs-org-mode.html

Or like so - https://systemcrafters.net/publishing-websites-with-org-mode/automated-site-publishing/

** Extra's

*** TODO Linking HTML pages and their org mode sources
Inspiration - https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html

*** Add scroll to top button

Follow - [[file:20231219T172622--scroll-to-top-button__javascript_websites.org][scroll to top button]]

*** Adding analytics

**** Plausible

Follow - [[file:20231219T153629--add-website-analytics-with-plausible__websites.org][add website analytics with plausible]]

**** Google tag analytics

Follow - [[file:20231219T153712--add-website-analytics-with-google-tag-manager__websites.org][add website analytics with google tag manager]]

*** Table of contents at the side - inspiration

https://ckeditor.com/docs/ckeditor4/latest/features/codesnippet.html#hooking-a-custom-syntax-highlighter

*** short and clean links like here

https://diego.codes/post/blogging-with-org/

*** Print out proper underscore

add #+OPTIONS: ^:nil to all files

and write a post about it how it looks wiht and without

https://emacs.stackexchange.com/questions/10549/org-mode-how-to-export-underscore-as-underscore-instead-of-highlight-in-html
*** Tables in HTML export

https://orgmode.org/manual/Tables-in-HTML-export.html
*** Create editable text areas

Docs - https://orgmode.org/manual/Text-areas-in-HTML-export.html

If you ever want to try using this feature, here is an example:

#+ATTR_HTML: :textarea t :width 40
#+BEGIN_EXAMPLE
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_EXAMPLE

*** Tags solution

**** tags in the sidebar with JS

https://manateelazycat.github.io/tags.html

solution:

https://github.com/bastibe/org-static-blog/issues/125

use some js? Mobile content atrodo labai nice taip pat.

**** create this functionality

build a tagging functionality like in org static blog(inspiration from it's
source code)

*** presentation mode?

https://orgmode.org/worg/code/org-info-js/index.html#undefined

this guy uses it -
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

"As I use org-info.js and track Worg git, I use "inherit-org-info-js" in all my
org projects:"

*** search function with agolia like Bozhidar

https://docs.projectile.mx/projectile/installation.html

* Quick use case
- Write new files in devnotes repo
- Run ./build.sh from devnotes repo
- org files will be published to html into arvydas.github.io repo
- Publish arvydas.github.io repo changes to see them on https://arvydas.dev

```

# create a website with ox hugo

Git repo - https://github.com/kaushalmodi/ox-hugo?tab=readme-ov-file

Good ox-hugo tutorial - https://andreyor.st/posts/2022-10-16-my-blogging-setup-with-emacs-and-org-mode/

# Build a website with emacs and ox-publish

```org
Here is my [[https://github.com/arvydasg/org-publish-project-blog][attempt to build a site with ox-publish]]. But here I will not write
much about it.

This way of creating a blog, unlike [[file:20231219T051943--build-a-website-with-emacs-and-org-static-blog__emacs_websites.org][build a website with emacs and
org-static-blog]], does not have a possibility to do anything with tags. It does
not generate separate pages for tags. In theory it could be custom made with
html/javascript, but if org-static-blog is there and you need tags, use it
instead.

This is good if you have a few org files that contain ALL the information a
bout a certain topic. For example - about Emacs, you have one file called
"emacs.org" and in it you have tens or hundreds of subheadings. You open one
file - search - find what you need. This is how I built codeacademy page.

Just keeping some notes for reference:

- [[https://github.com/arvydasg/org-publish-project-blog][my example]] contains ALL the possible settings you can set in it. Clearly
  ChatGPT was right on this one here - [[file:20231215T182523--building-development-notes-website-with-emacs__emacs_websites.org][building development notes website with Emacs]]
- A list of guides how to build pages with ox-publish ir ox-html- https://pages.gitlab.io/org-mode/post3.html
- Emacs docs - https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
- good nice example - https://taingram.org/blog/org-mode-blog.html
- youtube video how it's being used - https://www.youtube.com/watch?v=Elynmb3kTE4
- create new files with =org-structure-template-alist=
- full example of the config - https://ogbe.net/blog/blogging_with_org
- System crafters example -https://systemcrafters.net/publishing-websites-with-org-mode/building-the-
- Footnotes are possible

* pros/cons

Can do basic batch export with header, footer, no need to use additional package.

More info here how it could be built from PKC times -
https://github.com/arvydasg/PKC_AFK/tree/main/AFK/src/pkcwiki

and from this guy's video -
https://www.youtube.com/watch?v=Elynmb3kTE4&ab_channel=ChrisMaiorana

and official docs -
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

if the org file has not changed and you have deleted the html file and you try
to publish project again - it will say that the file is unmodified and will not
export to html. What we do then, we can forcefully publish it by setting a
prefix in org dispacher:

#+begin_quote
The export dispatcher, which you can summon with C-c C-e in the Org mode,
provides the relevant "Force publishing" option under C-f. Thus, to
force-publish the current file, type C-c C-e C-f P f.
#+end_quote

It will then publish ALL the files once again?

note(look for prefix) - https://orgmode.org/guide/Publishing.html#Publishing,
similar here also -
https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project

can actually make links with C-c C-l to file, that's good.

you can also create a script instead of going the default way. explain why its
good and how to do  both ways.

script - dont export when link problems, nicer preview, logs, see what has been
done. no need to use the menus etc.

Check the docs for more options here -
[[help:org-publish-project-alist][org-publish-project-alist]] docs

*** PROS
- can work with multiple projects
- each project can be specified in a separate config
- built in
- many options to customise the site
- worked in pkc, should work for me now also

*** CONS
- links don't work

```

# creating  a simple emacs package

```org
[2023-12-18 Mon] I wanted to find a way how to override a function in Emacs.
After a few unsuccessful attempts, I thought okay I first must understand how
packages work in Emacs.

So researched a simple way to create one.

* Steps to execute to create your own emacs package

** Create a Package Directory Structure

Create a directory named =my-word-counter= (or any preferred name) within your
Emacs configuration folder.

** Write the Package Code

Inside the =my-word-counter= directory, create a file named
=my-word-counter.el= and write the following Emacs Lisp code:

#+begin_src emacs-lisp
  ;;; my-word-counter.el --- A simple Emacs package to count words in the buffer.

  ;;;###autoload
  (defun my-word-counter ()
    "Count the number of words in the current buffer."
    (interactive)
    (message "Number of words in the buffer: %d" (count-words (point-min) (point-max))))

  ;; Provide the feature
  (provide 'my-word-counter)
#+end_src

** Create the Package Metadata

In the =my-word-counter= directory, create a file named
=my-word-counter-pkg.el= to define package metadata:

#+begin_src emacs-lisp
  (define-package "my-word-counter" "1.0" "A simple package to count words in Emacs.")
#+end_src

** Load the Package

Add code to your Emacs configuration file (~/.emacs or ~/.emacs.d/init.el) to
add the directory containing your package to the load path and load the
package:

#+begin_src emacs-lisp
  ;; Add the package directory to load-path
  (add-to-list 'load-path "~/.emacs.d/my-word-counter")

  ;; Load the package
  (require 'my-word-counter)
#+end_src

** Usage

After following these steps, you can use the =my-word-counter= package in
Emacs. Open a buffer and execute =M-x my-word-counter=. It should display a
message with the count of words in the buffer.

```

# install emacs on linux

```org
Git clone .emacs.d from github into the newly installed [[file:20231128T165324--install-linux-distro-over-wsl__windows_wsl.org][wsl distro]] -
https://github.com/arvydasg/.emacs.d/tree/master

In your wsl instance basically ~sh~ the file in
~MISC/ubuntu_wsl_emacs_29.1/compile-install-emacs.sh~ to do the emacs
installation. Installing from source this way since 28.2 is required by denote
and does not exist in ubuntu mirrors or w/e -
https://unix.stackexchange.com/questions/6284/how-do-i-check-package-version-using-apt-get-aptitude
emacs.

Open emacs, enjoy

* Old emacs installation notes                                      :ARCHIVE:
keeping old notes just for fun:

** Emacs installation on LINUX (senas)
Before even doing anything, in your .emacs.d/init.el file add all this info --
 https://www.youtube.com/watch?v=EX9PKK3EMaw&t
*** susikuriam baze - init.el
   Jeigu nauja sistema, tai reikia pirma eiti i .emacs.d ir susikurti init.el faila.
 /home/azeubu/Dropbox/org/  Jis bus pagrindinis, ten desim tai:

        (require 'package)
     (setq package-enable-at-startup nil)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/npackages/"))
     (package-initialize)

     ;; Bootstrap 'use-package
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (org-babel-load-file (expand-file-name "myinit.org"))

*** susikuriam sutrauka - myinit.org
   vel, .emacs.d folderiuke sukuriam myinit.org

   (require 'package)
   (setq package-enable-at-startup nil)
   (add-to-list 'package-archives
   '("melpa" . "https://melpa.org/packages/"))
   (package-initialize)

   ;; Bootstrap 'use-package
   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))
*** Totally new thingy krc 2021-12-06 - veikia su dropbox
   sudo apt install emacs
   atsidarai .emacs.d, susikuri init.el faila
   ikeli visa sita content

   ;; Initialize package sources
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
   ("org" . "https://orgmode.org/elpa/")
   ("elpa" . "https://elpa.gnu.org/packages/")))

   (package-initialize)
   (unless package-archive-contents
   (package-refresh-contents))

   CIA PADARAI package-refresh-contents
   perkrauni emacs, ziuri ar viskas ok
   go and check M-x list-packages
   PAMEGINK M-x package install use- ir jeigu meta ka nors - gerai, reiskia pasiruoses kitam zingsniui

   open init.el ir ikelk

   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

   reload emacs, jeigu viskas veikia- einam sekanti zingsni

   susikurk dropboxe vieta kur nori kelti emacs failus.
   susikurk ten myinit.org IR TAIP PAT myinit.el

   i myinit.org ikelk sita content

   #+BEGIN_SRC emacs-lisp
   ;; Thanks, but no thanks
   (setq inhibit-startup-message t)


   (menu-bar-mode -1)            ; Disable the menu bar
   (tool-bar-mode -1)          ; Disable the toolbar
   (tooltip-mode -1)           ; Disable tooltips
   (set-fringe-mode 10)       ; Give some breathing room

   ;; Set up the visible bell
   (setq visible-bell t)
   (load-theme 'tango-dark)
   #+END_SRC

   turn off emacs, turn on.

   Jeigu pasikeicia theme - tu ready to go. jeigu ne, paziurek ar myinit.el
   turi ta pati content kaip org.

   Blogiausiu atveju nueik i temp_emacs ir copy files from there.

** Old emacs notes
  :LOGBOOK:
  CLOCK: [2021-08-01 Sk 05:19]--[2021-08-01 Sk 15:46] => 10:27
  CLOCK: [2021-07-31 Št 18:46]--[2021-07-31 Št 22:46] =>  4:00
  - Note taken on [2021-07-31 Št 20:45] \\
    for fuck sakes I am again in emacs whole evening... trying out helm mode,
    looking for other small things, tweaking stuff, fixing stuff... man oh man
    it is endless if I allow myself to.
  - Note taken on [2021-07-31 Št 18:18] \\
    found an autosave package

    https://christiantietze.de/posts/2020/10/emacs-auto-saving-and-email-drafts/
  - Note taken on [2021-07-31 Št 16:43] \\
    found expand-region package. amazing. c-=
  - Note taken on [2021-07-31 Št 15:26] \\
    dude wtf. was trying to add date at every heading, so I know when I start
    a project.

    used this in .emacs

    and got 5000-6000 lines printed in obelsdumas org file. It broke. I couldnt open it
    had to open in vim and delete all the lines that were created, multiple in one second...

    #+BEGIN_SRC emacs-lisp
    (defun update-last-edited (beg end length)
      (when
          (and
           (not (org-before-first-heading-p))
           (org-get-heading))
        (org-entry-put nil "LAST-EDITED" (format-time-string "[%Y-%m-%d %a
    %H:%M:%S]"))))

    (add-to-list 'after-change-functions 'update-last-edited)
    #+END_SRC

    I kind of forgot vims keybindings, thats scary.
  - Note taken on [2021-07-30 Pn 18:32] \\
    Org as a spreadsheet system: a short introduction

    https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html
  - Note taken on [2021-07-30 Pn 16:59] \\
    blemba zinok gal reikes gauti evil mode... su emacs bindings is just wayy slower
    when you actually are doing repetitive work, not just messing around like I used
    to
  - Note taken on [2021-07-30 Pn 16:43] \\
    pize isivaizduok.. praleidau apie valandzike su sita problema.

    https://orgmode.org/manual/Updating-the-table.html

    3.5.9 Updating the table

    In order to recalculate a line of a table or the entire table, use the following commands:

    C-c * (org-table-recalculate)

    KOL issiaiskinau
  - Note taken on [2021-07-30 Pn 16:23] \\
    krc kas yra "local setup has been refreshed".

    nebegaliu evaluate funkciju skaiciavimo lenteliu.. nei vienam kompe nei kitam

    Nei senam faile nei naujam
  - Note taken on [2021-07-30 Pn 15:16] \\
    replace-string - very cool. make sure you are above the content

    n mygtukas iseina is rikiuotes lol
  - Note taken on [2021-07-30 Pn 14:39] \\
    dude... table eddition in emacs.. using it as a spreadsheet.. amazing!!!

    https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html

    https://www.youtube.com/watch?v=5vGGgfs0q3k

    calculating the csv tables for obels dumas orders like crazyyy
  - Note taken on [2021-07-30 Pn 13:58] \\
    tables in images from csv files

    C-c | (org-table-create-or-convert-from-region)
  - Note taken on [2021-07-30 Pn 13:56] \\
    SELECT RECTANGLE!! and delete. so useful with CSV tables now.

    In Emacs-24.4, the rectangle commands are alo made available via rectangular
    selection: hit C-x SPC and then move around to select a rectangle (it should
    be highlighted visually), after which you can use the usual C-w to remove it.

    https://www.gnu.org/software/emacs/manual/html_node/emacs/Rectangles.html#Rectangles
  - Note taken on [2021-07-30 Pn 10:14] \\
    Images in emacs
    #+CAPTION: This is the caption for the next figure link (or table)
    #+NAME:   fig:SED-HR4049
    [[./img/a.jpg]]
    [[file:/tmp/image.png]]
    C-c C-x C-v (org-toggle-inline-images)
  (setq org-image-actual-width nil) - to myinit to be able to resize images?
    #+NAME: fig:figure name
    #+CAPTION: figure name
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 500
    #+ATTR_HTML: :alt cat/spider image :title Action! :align right
    [[file:~/Dropbox/doviliukas/emacs-html/images/karstas.jpeg]]

    #+NAME: fig:figure name
    #+ATTR_ORG: :width 500
    #+ATTR_LATEX: :width 2.0in
    #+ATTR_HTML: :width 500
    #+CAPTION: A black cat stalking a spider
    #+ATTR_HTML: :alt cat/spider image :title Action!
    [[file:~/Dropbox/doviliukas/emacs-html/images/karstas.jpeg][Pranesimas]]

    wow, clickable image - [[http://www.gnu.org/software/emacs/][GNU Emacs]] - collapse this
    look more on export section.

  - Note taken on [2021-07-30 Pn 09:17] \\
    maybe I should create 3 separate files for the 3 main projects now.
    1 - Personal website
    2 - Obelsdumas
    3 - Emacs
  - Note taken on [2021-07-30 Pn 08:55] \\
    watching this video - efficient keybindings emacs
    https://www.youtube.com/watch?v=Dq5UOt63Mms
  CLOCK: [2021-07-30 Pn 08:54]--[2021-07-30 Pn 09:17] =>  0:23
  - Note taken on [2021-07-28 Wed 09:31] \\
    labai nice - habit tracking mode.
  CLOCK: [2021-07-28 Wed 08:38]--[2021-07-28 Wed 09:31] =>  0:53
  - Note taken on [2021-07-27 Tue 14:41] \\
    https://www.youtube.com/watch?v=nUvdddKZQzs&t=625s sitas video buvo inspiration susidelioti viska i projektus. Time stamps, comments, etc
  CLOCK: [2021-07-27 Tue 14:39]--[2021-07-27 Tue 14:40] =>  0:01
  CLOCK: [2021-07-27 Tue 12:12]--[2021-07-27 Tue 14:30] =>  2:18
  CLOCK: [2021-07-27 Tue 08:43]--[2021-07-27 Tue 12:32] =>  3:49 - emacs research helm, make clock.org, transfer etc
  CLOCK: [2021-07-27 Tue 08:17]--[2021-07-27 Tue 08:25] =>  0:08 - emacs
  CLOCK: [2021-07-26 Mon 10:30]--[2021-07-26 Mon 18:05] =>  7:35 - org mode GTD way (first time)
  CLOCK: [2021-07-19 Pr 13:42]--[2021-07-19 Pr 15:22] =>  1:40 - emacs agenda view
  CLOCK: [2021-07-19 Pr 12:25]--[2021-07-19 Pr 13:12] =>  0:47 - emacs time tracking solution
  CLOCK: [2021-07-19 Pr 15:20]--[2021-07-19 Pr 16:24] =>  1:04 - emacs autocompletion for languages
  CLOCK: [2021-07-18 Sk 17:58]--[2021-07-18 Sk 18:15] =>  0:17 - doing totally random stuff (org mode time stuff)
  CLOCK: [2021-07-17 Št 07:09]--[2021-07-17 Št 08:18] =>  1:09 - Mess around emacs theme. finally choosing zenburn.
  CLOCK: [2021-07-16 Pn 19:50]--[2021-07-16 Pn 22:10] =>  2:20 - emacs/lol... getting better at using vim bindings in emacs. closign buffers, opening shells, closing windows, splitting windows. tomorrow have to look into themes
  CLOCK: [2021-07-16 Pn 16:32]--[2021-07-16 Pn 18:32] =>  2:00 - setting up emacs/cleaning google drive/ putting stuff to dropbox and to .org files
  - Note taken on [2021-07-27 Tue 14:31] \\
    gg man. again with emacs most of the day..

          Can not hold myself from trying to configure it the way I want and the way
          it looks meaningful and helpful for me.

          created clock.org file where I will clock all my times in. Better than
          having them merged in the same file with journals.

          as of now, after 3 or so hours, I have deleted clock.org because I have
          found this funcion that allows me to take and log notes together with timestamps
          along the project. thats a good way for now I think.
  - Note taken on [2021-07-27 Tue 12:42] \\
    Every single time I find something useful and implement in emacs org mode -
          ofc it takes time, then all of the suddent I find a video of Reiner Konig
          and my world just flips around. He introduces me to some cool feature that
          kind of make my previous work useless.

          not sure if I should just watch all of his videos and then start configuring
          my emacs or just keep going and do stuff by myself and other resources.
  - Note taken on [2021-07-26 Mon 14:24] \\
    wow silly me, made some many mistakes trying to make this thing work.
          but now one thing for sure - I will have a separate file with all the journaling
          stuff. easy to input in it - yes.

          one file to put all the time-stamped stuff - easy to put in - yes.

          one place to dump all my thoughts in - gtd.org. easy to put in - lets try,
          give me a moment.

          Ok, back. It works like a charm.

          and one place called - someday/maybe, where I will dump stuff that I dont
          want and need to see on a daily basis. this list of tasks will be cleaned weekly.

          refile - change location of the item c-c c-w and choose a place
          archive - nothing gets deleted c-c c-x c-a
          use template - c-c c
   - Note taken on [2021-07-26 Mon 17:15] \\
    So its the end of this working day. Spend the whole time, since 10am at the library
          mostly configuring emacs to suite my liking. GTD method with emacs is quite easy and
          I am liking it. Not dependent on evernote or anything like that, can be sure that
          my workflow will remain the same for ears when I finally finish the setup phase, which
          I am getting to an end to.

          Theme - solarized from today. Will try it out. Creator - buddhist dude w/e, probs kept
          an eye on details. Also it doenst strain my eyes so why not.

          Yes, separate files for everything, orgzly on my phone all synced up, reviews are scheduled,
          now all I have to do is stick to my schedules and do the actual work.
  :END:

```

# moving emacsd into dotfiles repo

```org
So today [2023-12-09 Sat] is a morning for configs.

Shell is not working properly(wrong time in wsl). I use tmux sometimes, I use
fish now(config will come also probably), I use vim sometimes, I want my
.bashrc file to look certain way... many config files and they are now all over
the place on different machines.

I need to have one repo for this.

What I did, because I did not want to lose the =.emacs.d= version history is
renamed that repo to =dotfiles=. Inside of that dotfiles directory I have
created .emacs.d folder content. I then git clone that folder into any location
on my machine and then link the .emacd.d folder to that git folder like such:

#+begin_src bash
  cd
  # source destination(your wanted new location)
  ln -s GIT/dotfiles/.emacs.d/ .emacs.d
#+end_src

and now when I launch emacs from anywhere inside my wsl, it looks into
=GIT/dotfiles/.emacs.d/= for my .emacs.d config files. Great.

Now in that =dotfiles= folder I can start putting other config files.

```

# build a website with emacs and org-static-blog

```org

* Docs
Official docs - https://github.com/bastibe/org-static-blog

* Installation
#+begin_src emacs-lisp :tangle no
  (use-package org-static-blog
    :ensure t)
#+end_src

* Try using the minimal config

Taken from the docs.

#+begin_src emacs-lisp
  (setq org-static-blog-publish-title "My Static Org Blog")
  (setq org-static-blog-publish-url "https://staticblog.org/")
  (setq org-static-blog-publish-directory "~/projects/blog/")
  (setq org-static-blog-posts-directory "~/projects/blog/posts/")
  (setq org-static-blog-drafts-directory "~/projects/blog/drafts/")
  (setq org-static-blog-enable-tags t)
  (setq org-export-with-toc nil)
  (setq org-export-with-section-numbers nil)

  ;; This header is inserted into the <head> section of every page:
  ;;   (you will need to create the style sheet at
  ;;    ~/projects/blog/static/style.css
  ;;    and the favicon at
  ;;    ~/projects/blog/static/favicon.ico)
  (setq org-static-blog-page-header
        "<meta name=\"author\" content=\"John Dow\">
  <meta name=\"referrer\" content=\"no-referrer\">
  <meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\">
  <link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
  <link rel=\"icon\" href=\"static/favicon.ico\">")

  ;; This preamble is inserted at the beginning of the <body> of every page:
  ;;   This particular HTML creates a <div> with a simple linked headline
  (setq org-static-blog-page-preamble
        "<div class=\"header\">
    <a href=\"https://staticblog.org\">My Static Org Blog</a>
  </div>")

  ;; This postamble is inserted at the end of the <body> of every page:
  ;;   This particular HTML creates a <div> with a link to the archive page
  ;;   and a licensing stub.
  (setq org-static-blog-page-postamble
        "<div id=\"archive\">
    <a href=\"https://staticblog.org/archive.html\">Other posts</a>
  </div>
  <center><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">bastibe.de</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://bastibe.de\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Bastian Bechtold</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</center>")

  ;; This HTML code is inserted into the index page between the preamble and
  ;;   the blog posts
  (setq org-static-blog-index-front-matter
        "<h1> Welcome to my blog </h1>\n")
#+end_src

Now do =org-static-blog-publish= to generate html pages from your publish
directory to your posts directory.

As you can see you can customize the html-head, preamble(that's navigation part
for me) and postamble(that's footer for me). That's all you need in a static
site not to write repetitive code for each! Great!
* Decide where to place the configuration

Now the configuration above might get large if you start modifying the head,
preamble, postamble.. Also if you have multiple blogs/websites that you want to
publish this way, you need to have two separate configurations.

Eventually you realize that you can't store multiple configurations in your
emacs config file.

So the solution to this is to create a "build" folder and in it have such
files:

#+begin_src bash
devnotes/build/
├── build.sh
└── build-site.el
#+end_src

build.sh should be made to be executable =chmo o+x build.sh= and it's contents
are:
#+begin_src bash
  #!/bin/sh
  emacs -Q --script build-site.el
#+end_src

and build-site.el content would contain your org-static-blog configuration(we
will remove the configuration from our emacs config and place it in this file
with a couple of additions):

#+begin_src emacs-lisp

  ;; NEW START ------------------------------------------------------------------------

  ;; Set the package installation directory so that packages aren't stored in the
  ;; ~/.emacs.d/elpa path.
  (require 'package)
  (setq package-user-dir (expand-file-name "./.packages"))
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Initialize the package system
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (message "Package refresh complete!")

  ;; Install dependencies inside the ./packages directory
  ;; should install ONLY org-static-blog
  (package-install 'org-static-blog)
  (message "Package installation complete!")

  ;; NEW END ------------------------------------------------------------------------

  (setq org-static-blog-publish-title "My Static Org Blog")
  (setq org-static-blog-publish-url "https://staticblog.org/")
  (setq org-static-blog-publish-directory "~/projects/blog/")
  (setq org-static-blog-posts-directory "~/projects/blog/posts/")
  (setq org-static-blog-drafts-directory "~/projects/blog/drafts/")
  (setq org-static-blog-enable-tags t)
  (setq org-export-with-toc nil)
  (setq org-export-with-section-numbers nil)

  ;; This header is inserted into the <head> section of every page:
  ;;   (you will need to create the style sheet at
  ;;    ~/projects/blog/static/style.css
  ;;    and the favicon at
  ;;    ~/projects/blog/static/favicon.ico)
  (setq org-static-blog-page-header
        "<meta name=\"author\" content=\"John Dow\">
      <meta name=\"referrer\" content=\"no-referrer\">
      <meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\">
      <link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
      <link rel=\"icon\" href=\"static/favicon.ico\">")

  ;; This preamble is inserted at the beginning of the <body> of every page:
  ;;   This particular HTML creates a <div> with a simple linked headline
  (setq org-static-blog-page-preamble
        "<div class=\"header\">
        <a href=\"https://staticblog.org\">My Static Org Blog</a>
      </div>")

  ;; This postamble is inserted at the end of the <body> of every page:
  ;;   This particular HTML creates a <div> with a link to the archive page
  ;;   and a licensing stub.
  (setq org-static-blog-page-postamble
        "<div id=\"archive\">
        <a href=\"https://staticblog.org/archive.html\">Other posts</a>
      </div>
      <center><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">bastibe.de</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://bastibe.de\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Bastian Bechtold</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</center>")

  ;; This HTML code is inserted into the index page between the preamble and
  ;;   the blog posts
  (setq org-static-blog-index-front-matter
        "<h1> Welcome to my blog </h1>\n")

  ;; NEW START ------------------------------------------------------------------------

  (org-static-blog-publish t)

  (message "Build complete!")

  ;; NEW END ------------------------------------------------------------------------
#+end_src

That's it. Now when we will run the bash script (=./build.sh=), it will install
org-static-blog package into the /build directory if it does not already exist.
It will then do the html conversion from org files as you have specified and at
the end it will print out "Build complete!"

* My configuration as of [2023-12-19 Tue]

Stopped using it before I went to build devnotes site with ox-publish -
[[file:20231215T182523--building-development-notes-website-with-emacs__emacs_websites.org][building development notes website with Emacs]]

#+begin_src emacs-lisp
;; Set the package installation directory so that packages aren't stored in the
;; ~/.emacs.d/elpa path.
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Initialize the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(message "Package refresh complete!")

;; Install dependencies inside the ./packages directory
;; should install ONLY org-static-blog
(package-install 'org-static-blog)
(message "Package installation complete!")

;; stop making ~ files
(setq make-backup-files nil)

;; directories and urls
(setq org-static-blog-publish-title "arvydasg.github.io")
(setq org-static-blog-publish-url "https://arvydasg.github.io/devnotes/html")
(setq org-static-blog-publish-directory "~/GIT/devnotes/html")
(setq org-static-blog-posts-directory "~/GIT/devnotes/org")
(setq org-static-blog-drafts-directory "~/GIT/devnotes/drafts")
(setq org-static-blog-index-length 3)
(setq org-static-blog-preview-date-first-p nil)
(setq org-static-blog-use-preview t)
(setq org-static-blog-langcode "en")
(setq org-static-blog-enable-tags t)
(setq org-static-blog-no-post-tag "NONPOST")
(setq org-static-blog-enable-deprecation-warning nil)
(setq org-static-blog-page-header
"<meta name=\"author\" content=\"Arvydas Gasparavicius\">
<meta name=\"referrer\" content=\"no-referrer\">
<meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\">
<link rel=\"stylesheet\" href=\"../static/style.css\"/>
<link rel=\"icon\" href=\"../static/ag.ico\">
<script src=\"../static/lightbox.js\"></script>
<script src=\"static/auto-render.min.js\"></script>")

(setq org-static-blog-page-preamble "<br>preamble here yo</br>")
(setq org-static-blog-page-postamble
"<div id=\"footer\">
<hr>
<p>2021-2023 Arvydas Gasparavicius</p>
<script src=\"static/script.js\"></script>
</div>")

(setq org-static-blog-index-front-matter
"<h1> Hello there!</h1>
<hr>
<div id=\"intro\">
<p> My name is Arvydas. <a class=\"no-link\" href=\"https://github.com/arvydasg\">My Github</a>.</p>
<p> If you are interested in some of my writings, here are some of my latest posts:</p>
</div>
\n\n\n")

(org-static-blog-publish t)

(message "Build complete!")
#+end_src
* CSS
** use CSS built in css from ox-html

We can customize =org-static-blog-page-header= and add your custom css
stylesheet, or we can try to use the built in ox-html stylesheet(provides nice
code block styling)

Adding this to your configuration:
#+begin_src emacs-lisp
  (require 'ox-html)                    ;or (require 'ox-publish)
  (setq org-static-blog-page-header org-html-style-default)
#+end_src

You will be able to use the default style sheets of ox-html or ox-publish in
your org-static-blog project.

But still, you might prefer to have full control of your stylesheets, so better
keep the first option that I have suggested with style.css file.
** org-html-themes
ORRR last thing that you can try when it comes to styling your website, try
using one of these, [[https://github.com/fniessen/org-html-themes][org-html-themes]].

You can point to one of these themes like such, by placing this code at the top
of your.org file:
#+begin_src org :tangle no
  #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-NAME.setup
#+end_src

Or if you have downloaded the code(more future proof solution), add such line
at the top of your .org file.
#+begin_src org :tangle no
  #+SETUPFILE: PATH/TO/GIT/REPO/org/theme-NAME-local.setup
#+end_src

Of course we can also modify our =setq org-static-blog-page-header= to contain
the =org-html-themes=, but I won't do that this time since I know I will be
using my own custom stylesheet.

*  pros/cons

*** PROS
- does everything for you
- tags
- archives
- rss feed
- especially good for blogs, but for other things - overkill?

*** CONS
- big program(installable package, not built in)
- links don't work
- can't handle multiple projects

```
